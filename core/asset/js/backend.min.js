"use strict";

window.eoxia_lib = {};
window.task_manager = {};

window.eoxia_lib.init = function() {
	window.eoxia_lib.load_list_script();
	window.eoxia_lib.init_array_form();
}

window.eoxia_lib.load_list_script = function() {
	for ( var key in window.task_manager ) {
		window.task_manager[key].init();
	}
}

window.eoxia_lib.init_array_form = function() {
	 window.eoxia_lib.array_form.init();
}

jQuery(document).ready(window.eoxia_lib.init);

window.task_manager.core = {};

window.task_manager.core.init = function() {
	//Window.task_manager.core.event();
};

window.task_manager.action = {};

window.task_manager.action.init = function() {
	window.task_manager.action.event();
};

window.task_manager.action.event = function() {
  jQuery( document ).on( 'click', '.action-input', window.task_manager.action.exec_input );
  jQuery( document ).on( 'click', '.action-attribute', window.task_manager.action.exec_attribute );
  jQuery( document ).on( 'click', '.wp-digi-action-delete', window.task_manager.action.delete );
};

window.task_manager.action.exec_input = function( event ) {
  var element = jQuery( this );
	var parent_element = element;

	if ( element.data( 'parent' ) ) {
			parent_element = element.closest( '.' + element.data( 'parent' ) );
	}

	if ( !element[0].getAttribute(' disabled' ) ) {
		element[0].setAttribute( 'disabled', true );
		element.closest( '.wp-digi-bloc-loader' ).addClass( 'wp-digi-bloc-loading' );

		var list_input = window.eoxia_lib.array_form.get_input( parent_element );
		var data = {};
		for (var i = 0; i < list_input.length; i++) {
			if ( list_input[i].name ) {
				data[list_input[i].name] = list_input[i].value;
			}
		}

    window.task_manager.request.send( element, data );
	}
};

window.task_manager.action.exec_attribute = function(event) {
  var element = jQuery( this );

	if ( !element[0].getAttribute(' disabled' ) ) {
		element[0].setAttribute( 'disabled', true );

		if ( jQuery( this ).data( 'confirm' ) ) {
			if ( window.confirm( jQuery( this ).data( 'confirm' ) ) ) {
				element.get_data( function ( data ) {
					element.closest( '.wp-digi-bloc-loader' ).addClass( 'wp-digi-bloc-loading' );
					window.task_manager.request.send( element, data );
				} );
			}
		}
		else {
			element.get_data( function ( data ) {
				element.closest( '.wp-digi-bloc-loader' ).addClass( 'wp-digi-bloc-loading' );
				window.task_manager.request.send( element, data );
			} );
		}
	}
};

window.task_manager.action.delete = function(event) {
  var element = jQuery( this );

	if ( !element[0].getAttribute( 'disabled' ) ) {
  	if ( window.confirm( window.digi_confirm_delete ) ) {
			element[0].setAttribute( 'disabled', true );
	    element.get_data( function ( data ) {
				element.closest( '.wp-digi-bloc-loader' ).addClass( 'wp-digi-bloc-loading' );
	      window.task_manager.request.send( element, data );
	    } );
	  }
	}
};

window.eoxia_lib.array_form = {};

window.eoxia_lib.array_form.init = function() {
	window.eoxia_lib.array_form.event();
};

window.eoxia_lib.array_form.event = function() {
	jQuery( document ).on( 'click', '.wp-digi-action-edit', window.eoxia_lib.array_form.send_form );
};

window.eoxia_lib.array_form.get_input = function( parent ) {
	return parent.find('input, textarea');
};

window.eoxia_lib.array_form.get_input_value = function( input ) {
	switch( input.getAttribute( 'type' ) ) {
		case "checkbox":
			return input.checked;
			break;
		default:
			return input.value;
			break;
	}
}

window.eoxia_lib.array_form.send_form = function( event ) {
	event.preventDefault();

	var element = jQuery( this );
	element.closest( '.wp-digi-bloc-loader' ).addClass( 'wp-digi-bloc-loading' );
	var parent = element.closest( '.wp-digi-list-item' );
	var list_input = window.eoxia_lib.array_form.get_input( parent );

	var data = {};
	for (var i = 0; i < list_input.length; i++) {
		if ( list_input[i].name ) {
			data[list_input[i].name] = window.eoxia_lib.array_form.get_input_value( list_input[i] );
		}
	}

	window.task_manager.request.send( element, data );
};

jQuery.fn.get_data = function( cb ) {
  this.each( function() {
    var data = {};

    for ( var i = 0; i <  jQuery( this )[0].attributes.length; i++ ) {
      var localName = jQuery( this )[0].attributes[i].localName;
      if (  localName.substr(0, 4) == 'data' ||
            localName == 'action') {

        localName = localName.substr(5);

        if ( localName == 'nonce' ) localName = '_wpnonce';
        localName = localName.replace( '-', '_' );
        data[localName] =  jQuery( this )[0].attributes[i].value;
      }
    }

    cb( data );
  } );
};

window.task_manager.date = {};

window.task_manager.date.init = function() {
	jQuery( document ).on( 'click', '.eva-date', function(e) {
		jQuery( this ).datepicker( {
			dateFormat: 'dd/mm/yy',
		} );
		jQuery( this ).datepicker( "show" );
	} );
};

window.task_manager.form = {};

window.task_manager.form.init = function() {
    window.task_manager.form.event();
};
window.task_manager.form.event = function() {
    jQuery( document ).on( 'click submit_form', '.submit-form, *[class*="submit-form-"]', window.task_manager.form.sumbit_form );
};

window.task_manager.form.sumbit_form = function( event ) {
	var element = jQuery( this );
	var callback = element.attr( 'class' ).match( /submit-form-.*?[^ ]+/g );
    event.preventDefault();
	if ( callback ) {
		callback = callback[0].split( '-' );
		if ( callback[2] && callback[3] && window.task_manager[callback[2]][callback[3]] ) {
			window.task_manager[callback[2]][callback[3]]( element );
		}
	}
    element.closest( 'form' ).ajaxSubmit({
        success: function( response ) {
			if ( response && response.data.module && response.data.callback ) {
				window.task_manager[response.data.module][response.data.callback]( element, response );
			}
            if ( response && response.success ) {
                if ( response.data.module && response.data.callback_success ) {
                    window.task_manager[response.data.module][response.data.callback_success]( element, response );
                }
            } else {
                alert( 'error' );
                if ( response.data.module && response.data.callback_error ) {
                    window.task_manager[response.data.module][response.data.callback_error]( element, response );
                }
            }
        }
    });
};

window.task_manager.global = {};

window.task_manager.global.init = function() {}


window.task_manager.global.download_file = function( url_to_file, filename ) {
	var url = jQuery('<a href="' + url_to_file + '" download="' + filename + '"></a>');
	jQuery('.wrap').append(url);
	url[0].click();
	url.remove();
};

window.task_manager.global.remove_diacritics = function( input ) {
	var output = "";

	var normalized = input.normalize("NFD");
	var i=0;
	var j=0;

	while (i<input.length)
	{
		output += normalized[j];

		j += (input[i] == normalized[j]) ? 1 : 2;
		i++;
	}

	return output;
};

window.task_manager.popup = {};

window.task_manager.popup.init = function() {
	window.task_manager.popup.event();
};

window.task_manager.popup.event = function() {
  jQuery( document ).on( 'click', '.open-popup', window.task_manager.popup.open );
  jQuery( document ).on( 'click', '.open-popup-ajax', window.task_manager.popup.open_ajax );
  jQuery( document ).on( 'click', '.popup .container, .digi-popup-propagation', window.task_manager.popup.stop );
  jQuery( document ).on( 'click', '.popup .container .button-primary', window.task_manager.popup.confirm );
  jQuery( document ).on( 'click', '.popup .container .button-secondary, .popup .close', window.task_manager.popup.close );
  jQuery( document ).on( 'click', 'body', window.task_manager.popup.close );
};

window.task_manager.popup.open = function( event ) {
	var triggered_element = jQuery( this );
  // Récupères la box de destination mis dans l'attribut du popup
  var target = triggered_element.closest(  "." + triggered_element.data( 'parent' ) ).find( "." + triggered_element.data( 'target' ) );
	target.toggle();

	if ( target.is( ":visible" ) && triggered_element.data( 'cb-object' ) && triggered_element.data( 'cb-func' ) ) {
		var callback_object = triggered_element.data( 'cb-object' );
		var callback_func = triggered_element.data( 'cb-func' );

		// On récupères les "data" sur l'élement en tant qu'args.
		triggered_element.get_data( function( data ) {
			window.task_manager[callback_object][callback_func]( triggered_element, target, event, data );
		} );
	}

  event.stopPropagation();
};

/**
 * Ouvre la popup en envoyant une requête AJAX.
 * Les paramètres de la requête doivent être configurer directement sur l'élement
 * Ex: data-action="load-workunit" data-id="190"
 *
 * @param  {[type]} event [description]
 * @return {[type]}       [description]
 */
window.task_manager.popup.open_ajax = function( event ) {
	var element = jQuery( this );

  // Récupères la box de destination mis dans l'attribut du popup
  var target = jQuery( this ).closest(  "." + jQuery( this ).data( 'parent' ) ).find( "." + jQuery( this ).data( 'target' ) );
	target.toggle();


	jQuery( this ).get_data( function( data ) {
		delete data.parent;
		delete data.target;
		window.task_manager.request.send( element, data );
	});

  event.stopPropagation();
};

window.task_manager.popup.confirm = function( event ) {
	var triggered_element = jQuery( this );
	jQuery( '.popup' ).hide();

	if ( triggered_element.data( 'cb-object' ) && triggered_element.data( 'cb-func' ) ) {
		var callback_object = triggered_element.data( 'cb-object' );
		var callback_func = triggered_element.data( 'cb-func' );

		// On récupères les "data" sur l'élement en tant qu'args.
		triggered_element.get_data( function( data ) {
			window.task_manager[callback_object][callback_func]( triggered_element, event, data );
		} );
	}
}

window.task_manager.popup.stop = function( event ) {
	event.stopPropagation();
};

window.task_manager.popup.close = function( event ) {
  jQuery( '.popup' ).hide();
  jQuery( '.digi-popup' ).hide();
}

"use strict";

var regex = {
	validateEmail: function(email) {
	    var re = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
	    return re.test(email);
	}
};

window.task_manager.render = {};

window.task_manager.render.init = function() {
	window.task_manager.render.event();
};

window.task_manager.render.event = function() {
};

window.task_manager.render.call_render_changed = function() {
	for ( var key in window.task_manager ) {
		if (window.task_manager[key].render_changed) {
			window.task_manager[key].render_changed();
		}
	}
}

window.task_manager.request = {};

window.task_manager.request.init = function() {};

window.task_manager.request.send = function( element, data ) {
  jQuery.post( window.ajaxurl, data, function( response ) {
		element.closest( '.wp-digi-bloc-loader' ).removeClass( 'wp-digi-bloc-loading' );

    if ( response && response.success ) {
      if ( response.data.module && response.data.callback_success ) {
        window.task_manager[response.data.module][response.data.callback_success]( element, response );
      }
    }
    else {
      if ( response.data.module && response.data.callback_error ) {
        window.task_manager[response.data.module][response.data.callback_error]( element, response );
      }
    }
  }, "json" );
};

window.task_manager.request.get = function( url, data ) {
  jQuery.get( url, data, function( response ) {

    if ( response && response.success ) {
      if ( response.data.module && response.data.callback_success ) {
        window.task_manager[response.data.module][response.data.callback_success]( response );
      }
    }
    else {
      if ( response.data.module && response.data.callback_error ) {
        window.task_manager[response.data.module][response.data.callback_error]( response );
      }
    }
  }, "json" );
};

window.task_manager.tab = {};

window.task_manager.tab.init = function() {
	window.task_manager.tab.event();
};

window.task_manager.tab.event = function() {
  jQuery( document ).on( 'click', '.wp-digi-global-sheet-tab li, .tab', window.task_manager.tab.load );
};

window.task_manager.tab.load = function( event ) {
  event.preventDefault();
  var a = jQuery( this );

  jQuery( ".wp-digi-global-sheet-tab li.active" ).removeClass( "active" );
  a.addClass( "active" );

  jQuery( ".wp-digi-content" ).addClass( "wp-digi-bloc-loading" );

  var data = {
    action:           "load_tab_content",
    _wpnonce:         a.data( 'nonce' ),
    tab_to_display:   a.data( "action" ),
    element_id :      a.closest( '.wp-digi-sheet' ).data( 'id' ),
  };

  jQuery.post( window.ajaxurl, data, function( response ) {
    jQuery( ".wp-digi-content" ).replaceWith( response.data.template );

		window.task_manager.tab.call_tab_changed();
  } );
};

window.task_manager.tab.call_tab_changed = function() {
	for ( var key in window.task_manager ) {
		if (window.task_manager[key].tab_changed) {
			window.task_manager[key].tab_changed();
		}
	}
}

window.task_manager.toggle = {};

window.task_manager.toggle.init = function() {
	window.task_manager.toggle.event();
};

window.task_manager.toggle.event = function() {
  jQuery( document ).on( 'click', 'toggle', window.task_manager.toggle.open );
  jQuery( document ).on( 'click', 'body', window.task_manager.toggle.close );
};

window.task_manager.toggle.open = function( event ) {
	var target = undefined;
  // Récupères la box de destination mis dans l'attribut du toggle
  if ( jQuery( this ).data( 'parent' ) ) {
	  target = jQuery( this ).closest( '.' + jQuery( this ).data( 'parent' ) ).find( "." + jQuery( this ).data( 'target' ) );
	}
	else {
		target = jQuery( "." + jQuery( this ).data( 'target' ) );
	}

	if ( target ) {
	  target.toggle();
	  event.stopPropagation();
	}
};

window.task_manager.toggle.close = function ( event ) {
	jQuery( '.toggle-content' ).hide();
}

window.task_manager.point = {};

window.task_manager.point.init = function() {
	window.task_manager.point.event();
};

window.task_manager.point.event = function() {
	jQuery( document ).on( 'blur click keyup paste keydown', '.wpeo-add-point .wpeo-point-new-contenteditable', window.task_manager.point.add_point );
	jQuery( document ).on( 'blur paste', '.wpeo-edit-point .wpeo-point-contenteditable', window.task_manager.point.edit_point );
	jQuery( document ).on( 'click', '.wpeo-send-point-to-trash', window.task_manager.point.delete_point );
	jQuery( '.wpeo-project-wrap .wpeo-task-point-sortable' ).sortable( {
		handle: '.dashicons-screenoptions',
		items: '.wpeo-edit-point',
		update: function( event, ui ) {
			window.task_manager.point.edit_point_order( ui.item, jQuery( this ).find( '.wpeo-edit-point' ).index( ui.item ) );
		}
	} );
};

window.task_manager.point.add_point = function( event ) {
	var element = jQuery( this );
	var parentBloc = element.closest( '.wpeo-add-point' );
	var taskBloc = element.closest( '.wpeo-project-task' );
	var newPointInput = parentBloc.find( '*[name="point[content]"]' );
	var btnNewPoint = parentBloc.find( '.wpeo-point-new-btn' );
	var placeholderNewPoint = parentBloc.find( '.wpeo-point-new-placeholder' );
	var point = window.task_manager.point;
	newPointInput.val( element.html() );
	if ( 0 == element.text().length ) {
		placeholderNewPoint.show();
		if ( 'undefined' == typeof point.add_point_opacity_btn ) {
			point.add_point_opacity_btn = btnNewPoint.css( 'opacity' );
		} else {
			btnNewPoint.css( 'opacity', point.add_point_opacity_btn );
		}
		btnNewPoint.removeClass( 'submit-form-point-add_point_callback' );
	} else {
		placeholderNewPoint.hide();
		btnNewPoint.css( 'opacity', 1 );
		btnNewPoint.addClass( 'submit-form-point-add_point_callback' );
		if ( 13 == event.which && point.add_point_ctrl_hold ) {
			btnNewPoint.click();
		}
	}
	if ( 17 == event.which ) {
		point.add_point_ctrl_hold = true;
	} else {
		point.add_point_ctrl_hold = false;
	}
};

window.task_manager.point.add_point_callback = function( element ) {
	var parentBloc = element.closest( '.wpeo-add-point' );
	var contentEditable = parentBloc.find( '.wpeo-point-new-contenteditable' );
	contentEditable.html( '' );
};

window.task_manager.point.add_point_callback_success = function( element, response ) {
	var blocTask = element.closest( '.wpeo-project-task' );
	blocTask.find( '.wpeo-task-point:first' ).append( response.data.template );
	blocTask.find( '.wpeo-task-li-point:last' ).css( { 'opacity': 0, 'left': -20 } ).animate( {
		opacity: 1,
		left: 0
	}, 300 );
};

window.task_manager.point.edit_point = function( event ) {
	var element = jQuery( this );
	var parentBloc = element.closest( '.wpeo-edit-point' );
	var editPointInput = parentBloc.find( 'input[name="point[content]"]' );
	var editPointBtn = parentBloc.find( '*[class*="submit-form"]' );
	editPointInput.val( element.html() );
	editPointBtn.trigger( 'submit_form' );
};

window.task_manager.point.edit_point_order = function( element, index ) {
	var parentBloc = element.closest( '.wpeo-edit-point' );
	var input = document.createElement( 'input' );
	input.type = 'hidden';
	input.name = 'point[order]';
	input.value = index;
	parentBloc.append( input );
	parentBloc.find( '.wpeo-point-contenteditable' ).each( window.task_manager.point.edit_point );
	jQuery( input ).remove();
};

window.task_manager.point.delete_point = function( event ) {
	var element = jQuery( this );
	var pointBloc = element.closest( '.wpeo-task-li-point' );
	// TODO Add translated text
	if ( confirm( 'Delete point' ) ) {
		window.task_manager.request.send( this, element.data() );
		pointBloc.animate( {
			opacity: 0,
			left: '-20'
		}, 300, function() {
			pointBloc.remove();
		} );
	}
};

window.task_manager.task = {};

window.task_manager.task.init = function() {
	window.task_manager.task.event();
};

window.task_manager.task.event = function() {
	jQuery( '.wpeo-project-wrap' ).on( 'blur', '.wpeo-project-task-title', window.task_manager.task.edit_title );
};

window.task_manager.task.edit_title = function( event ) {
	var taskId = jQuery( this ).closest( '.wpeo-project-task' ).data( 'id' );
	var data = {
		action: 'edit_title',
		_wpnonce: jQuery( this ).data( 'nonce' ),
		task_id: taskId,
		title: jQuery( this ).val()
	};

	window.task_manager.request.send( this, data );
};

window.task_manager.task.create_task_success = function( element, response ) {
	jQuery( '.list-task' ).prepend( response.data.template );
};

window.task_manager.task.archive_task_success = function( element, response ) {
	jQuery( element ).closest( '.wpeo-project-task' ).fadeOut();
};

window.task_manager.task.delete_task_success = function( element, response ) {
	jQuery( element ).closest( '.wpeo-project-task' ).fadeOut();
};
