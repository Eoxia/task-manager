'use strict';

window.eoxiaJS = {};
window.task_manager = {};

window.eoxiaJS.init = function() {
	window.eoxiaJS.load_list_script();
	window.eoxiaJS.init_array_form();
};

window.eoxiaJS.load_list_script = function() {
	for ( var key in window.task_manager ) {
		window.task_manager[key].init();
	}
};

window.eoxiaJS.init_array_form = function() {
	 window.eoxiaJS.arrayForm.init();
};

window.eoxiaJS.refresh = function() {
	for ( var key in window.task_manager ) {
		if ( window.task_manager[key].refresh ) {
			window.task_manager[key].refresh();
		}
	}
};

jQuery(document).ready(window.eoxiaJS.init);

window.task_manager.core = {};

window.task_manager.core.init = function() {
	//Window.task_manager.core.event();
};

window.task_manager.action = {};

window.task_manager.action.init = function() {
	window.task_manager.action.event();
};

window.task_manager.action.event = function() {
	jQuery( document ).on( 'click', '.action-input:not(.no-action)', window.task_manager.action.execInput );
	jQuery( document ).on( 'click', '.action-attribute:not(.no-action)', window.task_manager.action.execAttribute );
	jQuery( document ).on( 'click', '.action-delete:not(.no-action)', window.task_manager.action.execDelete );
};

window.task_manager.action.execInput = function( event ) {
	var element = jQuery( this );
	var parentElement = element;
	var loaderElement = element;
	var listInput = undefined;
	var data = {};
	var i = 0;
	var doAction = true;
	var key = undefined;

	event.preventDefault();

	if ( element.data( 'loader' ) ) {
		loaderElement = element.closest( '.' + element.data( 'loader' ) );
	}

	if ( element.data( 'parent' ) ) {
		parentElement = element.closest( '.' + element.data( 'parent' ) );
	}

	/** Méthode appelée avant l'action */
	if ( element.data( 'module' ) && element.data( 'before-method' ) ) {
		doAction = false;
		doAction = window.task_manager[element.data( 'module' )][element.data( 'before-method' )]( element );
	}

	if ( element.hasClass( '.grey' ) ) {
		doAction = false;
	}

	if ( doAction ) {
		loaderElement.addClass( 'loading' );

		listInput = window.eoxiaJS.arrayForm.getInput( parentElement );
		for ( i = 0; i < listInput.length; i++ ) {
			if ( listInput[i].name ) {
				data[listInput[i].name] = listInput[i].value;
			}
		}

		element.get_data( function( attrData ) {
			for ( key in attrData ) {
				data[key] = attrData[key];
			}

			window.task_manager.request.send( element, data );
		} );
	}
};

window.task_manager.action.execAttribute = function( event ) {
  var element = jQuery( this );
	var doAction = true;
	var loaderElement = element;

	event.preventDefault();

	if ( element.data( 'loader' ) ) {
		loaderElement = element.closest( '.' + element.data( 'loader' ) );
	}

	/** Méthode appelée avant l'action */
	if ( element.data( 'module' ) && element.data( 'before-method' ) ) {
		doAction = false;
		doAction = window.task_manager[element.data( 'module' )][element.data( 'before-method' )]( element );
	}

	if ( element.hasClass( '.grey' ) ) {
		doAction = false;
	}

	if ( doAction ) {
		if ( jQuery( this ).data( 'confirm' ) ) {
			if ( window.confirm( jQuery( this ).data( 'confirm' ) ) ) {
				element.get_data( function( data ) {
					loaderElement.addClass( 'loading' );
					window.task_manager.request.send( element, data );
				} );
			}
		} else {
			element.get_data( function( data ) {
				loaderElement.addClass( 'loading' );
				window.task_manager.request.send( element, data );
			} );
		}
	}

	event.stopPropagation();
};

window.task_manager.action.execDelete = function( event ) {
  var element = jQuery( this );
	var doAction = true;
	var loaderElement = element;

	event.preventDefault();

	if ( element.data( 'loader' ) ) {
		loaderElement = element.closest( '.' + element.data( 'loader' ) );
	}

	/** Méthode appelée avant l'action */
	if ( element.data( 'module' ) && element.data( 'before-method' ) ) {
		doAction = false;
		doAction = window.task_manager[element.data( 'module' )][element.data( 'before-method' )]( element );
	}

	if ( element.hasClass( '.grey' ) ) {
		doAction = false;
	}

	if ( doAction ) {
		if ( window.confirm( element.data( 'message-delete' ) ) ) {
			element.get_data( function( data ) {
				loaderElement.addClass( 'loading' );
				window.task_manager.request.send( element, data );
			} );
		}
	}
};

window.eoxiaJS.arrayForm = {};

window.eoxiaJS.arrayForm.init = function() {
	window.eoxiaJS.arrayForm.event();
};

window.eoxiaJS.arrayForm.event = function() {
	jQuery( document ).on( 'click', '.submit-fake-form', window.eoxiaJS.arrayForm.sendForm );
};

window.eoxiaJS.arrayForm.getInput = function( parent ) {
	return parent.find( 'input, textarea, select' );
};

window.eoxiaJS.arrayForm.getInputValue = function( input ) {
	switch ( input.getAttribute( 'type' ) ) {
		case 'checkbox':
			return input.checked;
			break;
		default:
			return input.value;
			break;
	}
};

window.eoxiaJS.arrayForm.sendForm = function( event ) {
	var element = jQuery( this );
	var parent = element.closest( '.form' );
	var listInput = window.eoxiaJS.arrayForm.getInput( parent );
	var data = {};
	var i = 0;

	event.preventDefault();

	for ( i = 0; i < listInput.length; i++ ) {
		if ( listInput[i].name ) {
			data[listInput[i].name] = window.eoxiaJS.arrayForm.getInputValue( listInput[i] );
		}
	}

	window.digirisk.request.send( element, data );
};

jQuery.fn.get_data = function( cb ) {
  this.each( function() {
    var data = {};
	var i, localName;

    for ( i = 0; i <  jQuery( this )[0].attributes.length; i++ ) {
      localName = jQuery( this )[0].attributes[i].localName;
      if (  'data' == localName.substr( 0, 4 ) ||
            'action' == localName ) {

        localName = localName.substr( 5 );

        localName = ( 'nonce' == localName ) ? '_wpnonce' : localName;
        localName = localName.replace( '-', '_' );
        data[localName] =  jQuery( this )[0].attributes[i].value;
      }
    }

    cb( data );
  } );
};

window.task_manager.date = {};

window.task_manager.date.init = function() {
	jQuery( document ).on( 'click', 'input.date', function( e ) {
		jQuery( this ).datepicker( {
			dateFormat: 'dd/mm/yy'
		} );

		jQuery( this ).datepicker( 'show' );
	} );
};

window.task_manager.form = {};

window.task_manager.form.init = function() {
    window.task_manager.form.event();
};
window.task_manager.form.event = function() {
    jQuery( document ).on( 'click', '.submit-form', window.task_manager.form.sumbit_form );
};

window.task_manager.form.sumbit_form = function( event ) {
	var element = jQuery( this );
	var doAction = true;

	event.preventDefault();
	/** Méthode appelée avant l'action */
	if ( element.data( 'module' ) && element.data( 'before-method' ) ) {
		doAction = false;
		doAction = window.task_manager[element.data( 'module' )][element.data( 'before-method' )]( element );
	}

	if ( doAction ) {
    element.closest( 'form' ).ajaxSubmit({
        success: function( response ) {
			if ( response && response.data.module && response.data.callback ) {
				window.task_manager[response.data.module][response.data.callback]( element, response );
			}
            if ( response && response.success ) {
                if ( response.data.module && response.data.callback_success ) {
                    window.task_manager[response.data.module][response.data.callback_success]( element, response );
                }
            } else {
                alert( 'error' );
                if ( response.data.module && response.data.callback_error ) {
                    window.task_manager[response.data.module][response.data.callback_error]( element, response );
                }
            }
        }
    });
	}
};

window.task_manager.global = {};

window.task_manager.global.init = function() {}


window.task_manager.global.download_file = function( url_to_file, filename ) {
	var url = jQuery('<a href="' + url_to_file + '" download="' + filename + '"></a>');
	jQuery('.wrap').append(url);
	url[0].click();
	url.remove();
};

window.task_manager.global.remove_diacritics = function( input ) {
	var output = "";

	var normalized = input.normalize("NFD");
	var i=0;
	var j=0;

	while (i<input.length)
	{
		output += normalized[j];

		j += (input[i] == normalized[j]) ? 1 : 2;
		i++;
	}

	return output;
};

window.task_manager.global.uniqid = function() {
	var ts=String(new Date().getTime()), i = 0, out = '';
    for(i=0;i<ts.length;i+=2) {
       out+=Number(ts.substr(i, 2)).toString(36);
    }
    return ('d'+out);
};

window.task_manager.popup = {};

window.task_manager.popup.init = function() {
	window.task_manager.popup.event();
};

window.task_manager.popup.event = function() {
	jQuery( document ).on( 'keyup', window.task_manager.popup.keyup );
  jQuery( document ).on( 'click', '.open-popup, .open-popup i', window.task_manager.popup.open );
  jQuery( document ).on( 'click', '.open-popup-ajax', window.task_manager.popup.openAjax );
  jQuery( document ).on( 'click', '.popup .container, .digi-popup-propagation', window.task_manager.popup.stop );
  jQuery( document ).on( 'click', '.popup .container .button.green', window.task_manager.popup.confirm );
  jQuery( document ).on( 'click', '.popup .close', window.task_manager.popup.close );
  jQuery( document ).on( 'click', 'body', window.task_manager.popup.close );
};

window.task_manager.popup.keyup = function( event ) {
	if ( 27 === event.keyCode ) {
		jQuery( '.popup .close' ).click();
	}
};

window.task_manager.popup.open = function( event ) {
	var triggeredElement = jQuery( this );

	if ( triggeredElement.is( 'i' ) ) {
		triggeredElement = triggeredElement.parents( '.open-popup' );
	}

	var target = triggeredElement.closest(  '.' + triggeredElement.data( 'parent' ) ).find( '.' + triggeredElement.data( 'target' ) );
	var cbObject, cbFunc = undefined;
	target.addClass( 'active' );

	if ( target.is( ':visible' ) && triggeredElement.data( 'cb-object' ) && triggeredElement.data( 'cb-func' ) ) {
		cbObject = triggeredElement.data( 'cb-object' );
		cbFunc = triggeredElement.data( 'cb-func' );

		// On récupères les "data" sur l'élement en tant qu'args.
		triggeredElement.get_data( function( data ) {
			window.task_manager[cbObject][cbFunc]( triggeredElement, target, event, data );
		} );
	}

  event.stopPropagation();
};

/**
 * Ouvre la popup en envoyant une requête AJAX.
 * Les paramètres de la requête doivent être configurer directement sur l'élement
 * Ex: data-action="load-workunit" data-id="190"
 *
 * @param  {[type]} event [description]
 * @return {[type]}       [description]
 */
window.task_manager.popup.openAjax = function( event ) {
	var element = jQuery( this );
	var target = jQuery( this ).closest(  '.' + jQuery( this ).data( 'parent' ) ).find( '.' + jQuery( this ).data( 'target' ) );
	target.addClass( 'active' );

	if ( jQuery( this ).data( 'title' ) ) {
		target.find( '.title' ).text( jQuery( this ).data( 'title' ) );
	}

	jQuery( this ).get_data( function( data ) {
		delete data.parent;
		delete data.target;
		window.task_manager.request.send( element, data );
	});

	event.stopPropagation();
};

window.task_manager.popup.confirm = function( event ) {
	var triggeredElement = jQuery( this );
	var cbObject, cbFunc = undefined;

	if ( ! jQuery( '.popup' ).hasClass( 'no-close' ) ) {
		jQuery( '.popup' ).removeClass( 'active' );

		if ( triggeredElement.attr( 'data-cb-object' ) && triggeredElement.attr( 'data-cb-func' ) ) {
			cbObject = triggeredElement.attr( 'data-cb-object' );
			cbFunc = triggeredElement.attr( 'data-cb-func' );

			// On récupères les "data" sur l'élement en tant qu'args.
			triggeredElement.get_data( function( data ) {
				window.task_manager[cbObject][cbFunc]( triggeredElement, event, data );
			} );
		}
	}
};

window.task_manager.popup.stop = function( event ) {
	event.stopPropagation();
};

window.task_manager.popup.close = function( event ) {
	jQuery( '.popup:not(.no-close)' ).removeClass( 'active' );
	jQuery( '.digi-popup:not(.no-close)' ).removeClass( 'active' );
};

"use strict";

var regex = {
	validateEmail: function(email) {
	    var re = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
	    return re.test(email);
	}
};

window.task_manager.render = {};

window.task_manager.render.init = function() {
	window.task_manager.render.event();
};

window.task_manager.render.event = function() {
};

window.task_manager.render.call_render_changed = function() {
	for ( var key in window.task_manager ) {
		if (window.task_manager[key].render_changed) {
			window.task_manager[key].render_changed();
		}
	}
}

window.task_manager.request = {};

window.task_manager.request.init = function() {};

window.task_manager.request.send = function( element, data ) {
	jQuery.post( window.ajaxurl, data, function( response ) {
		element.closest( '.loading' ).removeClass( 'loading' );

		if ( response && response.success ) {
			if ( response.data.module && response.data.callback_success ) {
				window.task_manager[response.data.module][response.data.callback_success]( element, response );
			}
		} else {
			if ( response.data.module && response.data.callback_error ) {
				window.task_manager[response.data.module][response.data.callback_error]( element, response );
			}
		}
	}, 'json' );
};

window.task_manager.request.get = function( url, data ) {
	jQuery.get( url, data, function( response ) {
		if ( response && response.success ) {
			if ( response.data.module && response.data.callback_success ) {
				window.task_manager[response.data.module][response.data.callback_success]( response );
			}
		} else {
			if ( response.data.module && response.data.callback_error ) {
				window.task_manager[response.data.module][response.data.callback_error]( response );
			}
		}
	}, 'json' );
};

window.task_manager.tab = {};

window.task_manager.tab.init = function() {
	window.task_manager.tab.event();
};

window.task_manager.tab.event = function() {
  jQuery( document ).on( 'click', '.wp-digi-global-sheet-tab li, .tab', window.task_manager.tab.load );
};

window.task_manager.tab.load = function( event ) {
  event.preventDefault();
  var a = jQuery( this );

  jQuery( ".wp-digi-global-sheet-tab li.active" ).removeClass( "active" );
  a.addClass( "active" );

  jQuery( ".wp-digi-content" ).addClass( "wp-digi-bloc-loading" );

  var data = {
    action:           "load_tab_content",
    _wpnonce:         a.data( 'nonce' ),
    tab_to_display:   a.data( "action" ),
    element_id :      a.closest( '.wp-digi-sheet' ).data( 'id' ),
  };

  jQuery.post( window.ajaxurl, data, function( response ) {
    jQuery( ".wp-digi-content" ).replaceWith( response.data.template );

		window.task_manager.tab.call_tab_changed();
  } );
};

window.task_manager.tab.call_tab_changed = function() {
	for ( var key in window.task_manager ) {
		if (window.task_manager[key].tab_changed) {
			window.task_manager[key].tab_changed();
		}
	}
}

window.task_manager.toggle = {};

window.task_manager.toggle.init = function() {
	window.task_manager.toggle.event();
};

window.task_manager.toggle.event = function() {
  jQuery( document ).on( 'click', '.toggle:not(.disabled), .toggle:not(.disabled) i', window.task_manager.toggle.open );
  jQuery( document ).on( 'click', 'body', window.task_manager.toggle.close );
};

window.task_manager.toggle.open = function( event ) {
	var target = undefined;
	var data = {};
	var i = 0;
	var listInput = undefined;
	var key = undefined;
	var elementToggle = jQuery( this );

	if ( elementToggle.is( 'i' ) ) {
		elementToggle = elementToggle.parents( '.toggle' );
	}

	jQuery( '.toggle .content.active' ).removeClass( 'active' );

	if ( elementToggle.data( 'parent' ) ) {
		target = elementToggle.closest( '.' + elementToggle.data( 'parent' ) ).find( '.' + elementToggle.data( 'target' ) );
	} else {
		target = jQuery( '.' + elementToggle.data( 'target' ) );
	}

	if ( target ) {
	  target.toggleClass( 'active' );
	  event.stopPropagation();
	}

	if ( elementToggle.data( 'action' ) ) {
		elementToggle.addClass( 'loading' );

		listInput = window.eoxiaJS.arrayForm.getInput( elementToggle );
		for ( i = 0; i < listInput.length; i++ ) {
			if ( listInput[i].name ) {
				data[listInput[i].name] = listInput[i].value;
			}
		}

		elementToggle.get_data( function( attrData ) {
			for ( key in attrData ) {
				data[key] = attrData[key];
			}

			window.task_manager.request.send( elementToggle, data );
		} );
	}
};

window.task_manager.toggle.close = function( event ) {
	jQuery( '.toggle .content' ).removeClass( 'active' );
	event.stopPropagation();
};

/**
 * Initialise l'objet "comment" ainsi que la méthode "init" obligatoire pour la bibliothèque EoxiaJS.
 *
 * @since 1.0.0.0
 * @version 1.0.0.0
 */
window.task_manager.comment = {};

/**
 * La méthode obligatoire pour la biblotèque EoxiaJS.
 *
 * @return {void}
 *
 * @since 1.0.0.0
 * @version 1.0.0.0
 */
window.task_manager.comment.init = function() {
	window.task_manager.comment.event();
};

/**
 * Initialise tous les évènements liés au comment de Task Manager.
 *
 * @return {void}
 *
 * @since 1.0.0.0
 * @version 1.0.0.0
 */
window.task_manager.comment.event = function() {
	jQuery( document ).on( 'keyup', '.comment.edit input[name="content"]', window.task_manager.comment.triggerCreate );
};

window.task_manager.comment.triggerCreate = function( event ) {
	if ( event.ctrlKey && 13 === event.keyCode ) {
		jQuery( this ).closest( '.comment' ).find( '.action-input' ).click();
	}
};

/**
 * Avant de charger les commentaires, change la dashicons.
 *
 * @param  {HTMLSpanElement} triggeredElement L'élément HTML déclenchant l'action.
 * @return void
 *
 * @since 1.3.6.0
 * @version 1.3.6.0
 */
window.task_manager.comment.beforeLoadComments = function( triggeredElement ) {
	triggeredElement.toggleClass( 'dashicons-arrow-right-alt2 dashicons-arrow-down-alt2' );

	triggeredElement.closest( 'div.point' ).find( '.comments' ).toggleClass( 'hidden' );

	return true;
};

/**
 * Le callback en cas de réussite à la requête Ajax "load_comments".
 * Met le contenu dans la div.comments.
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.0.0.0
 * @version 1.0.0.0
 */
window.task_manager.comment.loadedCommentsSuccess = function( triggeredElement, response ) {
	jQuery( triggeredElement ).closest( 'div.point' ).find( '.comments' ).html( response.data.view );
	window.eoxiaJS.refresh();
};

/**
 * Le callback en cas de réussite à la requête Ajax "edit_comment".
 * Met le contenu dans la div.comments.
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.0.0.0
 * @version 1.0.0.0
 */
window.task_manager.comment.addedCommentSuccess = function( triggeredElement, response ) {
	jQuery( triggeredElement ).closest( '.comments' ).children( '.comment.new' ).after( response.data.view );
	jQuery( triggeredElement ).closest( 'form' )[0].reset();
	jQuery( triggeredElement ).closest( '.wpeo-project-task' ).find( '.wpeo-task-time-manage .elapsed' ).text( response.data.time.task );
	jQuery( triggeredElement ).closest( '.comments' ).prev( 'form' ).find( '.wpeo-time-in-point' ).text( response.data.time.point );
	window.eoxiaJS.refresh();
};

/**
 * Le callback en cas de réussite à la requête Ajax "edit_comment".
 * Remplace la ligne courante du commentaire.
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.0.0.0
 * @version 1.0.0.0
 */
window.task_manager.comment.editedCommentSuccess = function( triggeredElement, response ) {
	jQuery( triggeredElement ).closest( '.wpeo-project-task' ).find( '.wpeo-task-time-manage .elapsed' ).text( response.data.time.task );
	jQuery( triggeredElement ).closest( '.comments' ).prev( 'form' ).find( '.wpeo-time-in-point' ).text( response.data.time.point );

	jQuery( triggeredElement ).closest( '.comment.edit' ).replaceWith( response.data.view );
	window.eoxiaJS.refresh();
};

/**
 * Le callback en cas de réussite à la requête Ajax "delete_comment".
 * Supprimes la ligne.
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.0.0.0
 * @version 1.0.0.0
 */
window.task_manager.comment.deletedCommentSuccess = function( triggeredElement, response ) {
	jQuery( triggeredElement ).closest( '.comment' ).fadeOut();

	jQuery( triggeredElement ).closest( '.wpeo-project-task' ).find( '.wpeo-task-time-manage .elapsed' ).text( response.data.time.task );
	jQuery( triggeredElement ).closest( '.comments' ).prev( 'form' ).find( '.wpeo-time-in-point' ).text( response.data.time.point );

	window.eoxiaJS.refresh();
};

/**
 * Le callback en cas de réussite à la requête Ajax "load_edit_view_comment".
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.0.0.0
 * @version 1.0.0.0
 */
window.task_manager.comment.loadedEditViewComment = function( triggeredElement, response ) {
	jQuery( triggeredElement ).closest( '.comment' ).replaceWith( response.data.view );
};

/**
 * Initialise l'objet "point" ainsi que la méthode "follower" obligatoire pour la bibliothèque EoxiaJS.
 *
 * @since 1.0.0.0
 * @version 1.0.0.0
 */
window.task_manager.follower = {};

window.task_manager.follower.init = function() {
	window.task_manager.follower.event();
};

window.task_manager.follower.event = function() { };

/**
 * Le callback en cas de réussite à la requête Ajax "load_followers".
 * Remplaces le contenu de l'element cliqué par la vue reçu dans la réponse AJAX.
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.0.0.0
 * @version 1.0.0.0
 */
window.task_manager.follower.loadedFollowersSuccess = function( element, response ) {
	element.closest( '.wpeo-ul-users' ).replaceWith( response.data.view );
	window.eoxiaJS.refresh();
};

/**
 * Le callback en cas de réussite à la requête Ajax "close_followers_edit_mode".
 * Remplaces le contenu de l'element cliqué par la vue reçu dans la réponse AJAX.
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.0.0.0
 * @version 1.0.0.0
 */
window.task_manager.follower.closedFollowersEditMode = function( element, response ) {
	element.closest( '.wpeo-ul-users' ).replaceWith( response.data.view );
	window.eoxiaJS.refresh();
};

/**
 * Cette méthode est appelé automatiquement lors du clique sur une catégorie a affecter.
 *
 * @param  {HTMLUListElement} element L'élément déclenchant la méthode au clique.
 * @return {void}
 *
 * @since 1.0.0.0
 * @version 1.3.6.0
 */
window.task_manager.follower.beforeAffectFollower = function( element ) {
	element.addClass( 'active' );

	return true;
};

/**
 * Cette méthode est appelé automatiquement lors du clique sur une catégorie a désaffecter.
 *
 * @param  {HTMLUListElement} element L'élément déclenchant la méthode au clique.
 * @return {void}
 *
 * @since 1.0.0.0
 * @version 1.3.6.0
 */
window.task_manager.follower.beforeUnaffectFollower = function( element ) {
	element.removeClass( 'active' );

	return true;
};

/**
 * Initialise l'objet "historyTime" ainsi que la méthode "init" obligatoire pour la bibliothèque EoxiaJS.
 *
 * @since 1.0.0.0
 * @version 1.0.0.0
 */
window.task_manager.historyTime = {};

/**
 * La méthode obligatoire pour la biblotèque EoxiaJS.
 *
 * @return {void}
 *
 * @since 1.0.0.0
 * @version 1.0.0.0
 */
window.task_manager.historyTime.init = function() {
	window.task_manager.historyTime.event();
};

/**
 * Initialise tous les évènements liés au historyTime de Task Manager.
 *
 * @return {void}
 *
 * @since 1.0.0.0
 * @version 1.0.0.0
 */
window.task_manager.historyTime.event = function() {
};

/**
 * Le callback en cas de réussite à la requête Ajax "load_history_time".
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.0.0.0
 * @version 1.0.0.0
 */
window.task_manager.historyTime.loadedTimeHistorySuccess = function( element, response ) {
	jQuery( element ).closest( '.wpeo-project-task' ).find( '.popup .content' ).html( response.data.view );
};

/**
 * Le callback en cas de réussite à la requête Ajax "create_history_time".
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.0.0.0
 * @version 1.0.0.0
 */
window.task_manager.historyTime.createdHistoryTime = function( element, response ) {
	jQuery( element ).closest( '.wpeo-project-task' ).find( '.popup .content .history-time-container' ).replaceWith( response.data.history_time_view );
	jQuery( 'div[data-id="' + response.data.task_id + '"]' ).find( 'ul.wpeo-task-time-manage' ).replaceWith( response.data.task_header_view );
};

/**
 * Le callback en cas de réussite à la requête Ajax "delete_history_time".
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.0.0.0
 * @version 1.0.0.0
 */
window.task_manager.historyTime.deletedHistoryTime = function( element, response ) {
	jQuery( element ).closest( '.list-element' ).fadeOut();
};

/**
 * Initialise l'objet "point" ainsi que la méthode "navigation" obligatoire pour la bibliothèque EoxiaJS.
 *
 * @since 1.0.0.0
 * @version 1.0.0.0
 */
window.task_manager.navigation = {};

window.task_manager.navigation.init = function() {
	window.task_manager.navigation.event();
};

window.task_manager.navigation.event = function() {
	jQuery( document ).on( 'keyup', '.wpeo-header-bar input[name="term"]', window.task_manager.navigation.triggerSearch );

	jQuery( document ).on( 'click', '.wpeo-header-bar .more-search-options', window.task_manager.navigation.toggleMoreOptions );
	jQuery( document ).on( 'click', '.wpeo-tag-search', window.task_manager.navigation.selectTag );
};

window.task_manager.navigation.triggerSearch = function( event ) {
	if ( 13 === event.keyCode ) {
		jQuery( '.wpeo-header-search .action-input' ).click();
	}
};

/**
 * Toggle le barre de recherche avancée.
 *
 * @return void
 *
 * @since 1.0.0.0
 * @version 1.3.6.0
 */
window.task_manager.navigation.toggleMoreOptions = function() {
	jQuery( '.wpeo-header-search' ).toggle();
};

/**
 * Le callback en cas de réussite à la requête Ajax "load_my_task".
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.0.0.0
 * @version 1.3.6.0
 */
window.task_manager.navigation.loadedMyTask = function( triggeredElement, response ) {
	jQuery( '.list-task' ).replaceWith( response.data.view );
	window.task_manager.task.offset = 0;
	window.task_manager.task.canLoadMore = true;

	jQuery( '.wpeo-header-bar li.active' ).removeClass( 'active' );
	jQuery( triggeredElement ).addClass( 'active' );
	window.eoxiaJS.refresh();
};

/**
 * Toggle la classe "active" à l'élement cliqué.
 *
 * @return {void}
 *
 * @since 1.0.0.0
 * @version 1.3.6.0
 */
window.task_manager.navigation.selectTag = function() {
	jQuery( this ).toggleClass( 'active' );
};

/**
 * Vérifies les données pour la recherche avant d'exécuter la requête.
 *
 * @param  {HTMLSpanElement} triggeredElement L'élement déclenchant l'action.
 * @return {void}
 *
 * @since 1.0.0.0
 * @version 1.3.6.0
 */
window.task_manager.navigation.checkDataBeforeSearch = function( triggeredElement ) {
	var categoriesIdSelected = [];

	jQuery( '.tag-search .tags li.active' ).each( function( key, item ) {
		categoriesIdSelected.push( parseInt( jQuery( item ).attr( 'data-tag-id' ) ) );
	} );

	jQuery( 'input[name="categories_id_selected"] ' ).val( categoriesIdSelected.join( ',' ) );

	return true;
};

/**
 * Le callback en cas de réussite à la requête Ajax "search".
 * Remplaces le contenu des tâches du dashboard et affiches la div contenant le résultat de la recherche.
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.0.0.0
 * @version 1.3.6.0
 */
window.task_manager.navigation.searchedSuccess = function( triggeredElement, response ) {
	jQuery( '.list-task' ).replaceWith( response.data.view.tasks );
	jQuery( '.search-results' ).replaceWith( response.data.view.search_result );
	window.eoxiaJS.refresh();
};

/**
 * Initialise l'objet "user" ainsi que la méthode "init" obligatoire pour la bibliothèque EoxiaJS.
 *
 * @since 1.0.0.0
 * @version 1.3.6.0
 */
window.task_manager.owner = {};

window.task_manager.owner.init = function() {
	window.task_manager.owner.event();
};

/**
 * Initialise les évènements des utilisateurs
 *
 * @return {void}
 *
 * @since 1.3.6.0
 * @version 1.3.6.0
 */
window.task_manager.owner.event = function() {};


/**
 * Callback en cas de réussite de la requête Ajax "load_edit_mode_owner"
 * Remplaces le template de .users pour afficher les utilisateurs.
 *
 * @param  {HTMLSpanElement} triggeredElement   L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}        response             Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 0.1
 * @version 1.3.6.0
 */
window.task_manager.owner.loadedEditModeOwnerSuccess = function( triggeredElement, response ) {
	triggeredElement.removeClass( 'loading' );
	jQuery( triggeredElement ).find( '.content' ).html( response.data.view );
};

/**
 * Callback en cas de réussite de la requête Ajax "switch_owner"
 * Remplaces le template du responsable
 *
 * @param  {HTMLSpanElement} triggeredElement   L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}        response             Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 0.1
 * @version 1.3.6.0
 */
window.task_manager.owner.switchedOwnerSuccess = function( triggeredElement, response ) {
	jQuery( triggeredElement ).closest( '.toggle' ).replaceWith( response.data.view );
};

/**
 * Initialise l'objet "point" ainsi que la méthode "init" obligatoire pour la bibliothèque EoxiaJS.
 *
 * @since 1.0.0.0
 * @version 1.0.0.0
 */
window.task_manager.point = {};

/**
 * La méthode obligatoire pour la biblotèque EoxiaJS.
 *
 * @return {void}
 *
 * @since 1.0.0.0
 * @version 1.0.0.0
 */
window.task_manager.point.init = function() {
	window.task_manager.point.event();
	window.task_manager.point.refresh();
};

/**
 * Initialise tous les évènements liés au point de Task Manager.
 *
 * @return {void}
 *
 * @since 1.0.0.0
 * @version 1.0.0.0
 */
window.task_manager.point.event = function() {
	jQuery( document ).on( 'keyup', '.point:not(.edit) .wpeo-point-new-contenteditable', window.task_manager.point.triggerCreate );

	jQuery( document ).on( 'click', '.point.edit .wpeo-point-new-contenteditable', window.task_manager.point.activePoint );
	jQuery( document ).on( 'blur keyup paste keydown click', '.point .wpeo-point-new-contenteditable', window.task_manager.point.updateHiddenInput );
	jQuery( document ).on( 'blur paste', '.point.edit .wpeo-point-new-contenteditable', window.task_manager.point.editPoint );
	jQuery( document ).on( 'click', 'form .completed-point', window.task_manager.point.completePoint );

};

window.task_manager.point.triggerCreate = function( event ) {
	if ( event.ctrlKey && 13 === event.keyCode ) {
		jQuery( this ).closest( '.point' ).find( '.wpeo-point-new-btn' ).click();
	}
};

window.task_manager.point.activePoint = function( event ) {
	jQuery( '.point.active' ).removeClass( 'active' );

	jQuery( this ).closest( '.point' ).addClass( 'active' );
};

/**
 * Cette méthode est appelé automatiquement lors de l'appel à la méthode window.task_manager.refresh().
 *
 * @return void
 *
 * @since 1.0.0.0
 * @version 1.3.6.0
 */
window.task_manager.point.refresh = function() {
	jQuery( '.wpeo-project-wrap .points.sortable' ).sortable( {
		handle: '.dashicons-screenoptions',
		items: 'div.point.edit',
		update: window.task_manager.point.editOrder
	} );
};

/**
 * Met à jour le champ caché contenant le texte du point écris dans la div "contenteditable".
 *
 * @param  {MouseEvent} event L'évènement de la souris lors de l'action.
 * @return {void}
 *
 * @since 1.0.0.0
 * @version 1.3.6.0
 */
window.task_manager.point.updateHiddenInput = function( event ) {
	if ( 0 < jQuery( this ).text().length ) {
		jQuery( this ).closest( '.point' ).find( '.wpeo-point-new-btn' ).css( 'opacity', 1 );
		jQuery( this ).closest( '.point' ).find( '.wpeo-point-new-placeholder' ).addClass( 'hidden' );
	} else {
		jQuery( this ).closest( '.point' ).find( '.wpeo-point-new-btn' ).css( 'opacity', 0.4 );
		jQuery( this ).closest( '.point' ).find( '.wpeo-point-new-placeholder' ).removeClass( 'hidden' );
	}

	jQuery( this ).closest( '.point' ).find( 'input[name="content"]' ).val( jQuery( this ).html() );
};

/**
 * Le callback en cas de réussite à la requête Ajax "create_point".
 * Ajoutes le point avant le formulaire pour ajouter un point dans le ul.wpeo-task-point-sortable
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.0.0.0
 * @version 1.0.0.0
 */
window.task_manager.point.addedPointSuccess = function( triggeredElement, response ) {
	var totalPoint = jQuery( triggeredElement ).closest( '.wpeo-project-task' ).find( '.total-point' ).text();
	totalPoint++;
	jQuery( triggeredElement ).closest( '.wpeo-project-task' ).find( '.total-point' ).text( totalPoint );

	triggeredElement.closest( '.form' ).find( '.wpeo-point-new-contenteditable' ).text( '' );
	triggeredElement.closest( '.form' ).find( 'input[name="content"]' ).html( '' );

	jQuery( triggeredElement ).closest( '.wpeo-project-task' ).find( '.points.sortable .point:last' ).before( response.data.view );

	window.eoxiaJS.refresh();
};

/**
 * Le callback en cas de réussite à la requête Ajax "create_point".
 * Ajoutes le point avant le formulaire pour ajouter un point dans le ul.wpeo-task-point-sortable
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.0.0.0
 * @version 1.0.0.0
 */
window.task_manager.point.editedPointSuccess = function( triggeredElement, response ) {};

/**
 * Met à jour un point en cliquant sur le bouton pour envoyer le formulaire.
 *
 * @return void
 *
 * @since 1.0.0.0
 * @version 1.0.0.0
 */
window.task_manager.point.editPoint = function() {
	jQuery( this ).closest( 'form' ).find( '.submit-form' ).click();
};

/**
 * Supprimes la ligne du point.
 *
 * @param  {HTMLSpanElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {object} response                   Les données renvoyées par la requête Ajax.
 * @return void
 * @since 1.0.0.0
 * @version 1.0.0.0
 */
window.task_manager.point.deletedPointSuccess = function( triggeredElement, response ) {
	var totalPoint = jQuery( triggeredElement ).closest( '.wpeo-project-task' ).find( '.total-point' ).text();
	var totalCompletedPoint = jQuery( triggeredElement ).closest( '.wpeo-project-task' ).find( '.point-completed' ).text();
	totalPoint--;
	jQuery( triggeredElement ).closest( '.wpeo-project-task' ).find( '.total-point' ).text( totalPoint );

	if ( jQuery( triggeredElement ).closest( '.point' ).find( '.completed-point' ).is( ':checked' ) ) {
		totalCompletedPoint--;
		jQuery( triggeredElement ).closest( '.wpeo-project-task' ).find( '.point-completed' ).text( totalCompletedPoint );
	}

	jQuery( triggeredElement ).closest( '.wpeo-project-task' ).find( '.wpeo-task-time-manage .elapsed' ).text( response.data.time );

	jQuery( triggeredElement ).closest( 'div.point.edit' ).fadeOut( 400, function() {
		window.eoxiaJS.refresh();
	} );
};

/**
 * Envoie une requête pour passer le point en compléter ou décompléter.
 * Déplace le point vers la liste à puce "compléter" ou "décompléter".
 *
 * @return void
 *
 * @since 1.0.0.0
 * @version 1.0.0.0
 */
window.task_manager.point.completePoint = function() {
	var totalCompletedPoint = jQuery( this ).closest( '.wpeo-project-task' ).find( '.point-completed' ).text();

	var data = {
		action: 'complete_point',
		_wpnonce: jQuery( this ).data( 'nonce' ),
		point_id: jQuery( this ).closest( 'form' ).find( 'input[name="id"]' ).val(),
		complete: jQuery( this ).is( ':checked' )
	};

	if ( jQuery( this ).is( ':checked' ) ) {
		totalCompletedPoint++;
		jQuery( this ).closest( '.wpeo-project-task' ).find( '.points.completed' ).append( jQuery( this ).closest( 'div.point' ) );
	} else {
		totalCompletedPoint--;
		jQuery( this ).closest( '.wpeo-project-task' ).find( '.points.sortable div.point:last' ).before( jQuery( this ).closest( 'div.point' ) );
	}

	jQuery( this ).closest( '.wpeo-project-task' ).find( '.point-completed' ).text( totalCompletedPoint );

	window.eoxiaJS.refresh();
	window.task_manager.request.send( jQuery( this ), data );
};

/**
 * Avant de charger les points complétés, toggle la classe de la dashicons.
 *
 * @param  {HTMLSpanElement} triggeredElement L'élément HTML déclenchant l'action.
 * @return {void}
 *
 * @since 1.0.0.0
 * @version 1.3.6.0
 */
window.task_manager.point.beforeLoadCompletedPoint = function( triggeredElement ) {
	jQuery( triggeredElement ).closest( '.wpeo-task-point-use-toggle' ).find( '.dashicons' ).toggleClass( 'dashicons-minus dashicons-plus' );
	jQuery( triggeredElement ).closest( '.wpeo-task-point-use-toggle' ).find( '.points.completed' ).toggleClass( 'hidden' );
	window.eoxiaJS.refresh();
	return true;
};

/**
 * Le callback en cas de réussite à la requête Ajax "load_completed_point".
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.0.0.0
 * @version 1.0.0.0
 */
window.task_manager.point.loadedCompletedPoint = function( triggeredElement, response ) {
	jQuery( triggeredElement ).closest( '.wpeo-project-task' ).find( '.points.completed' ).html( response.data.view );
	window.eoxiaJS.refresh();
};

/**
 * Récupères les ID des points dans l'ordre de l'affichage et les envoies à l'action "edit_order_point".
 *
 * @return void
 *
 * @since 1.0.0.0
 * @version 1.3.6.0
 */
window.task_manager.point.editOrder = function() {
	var orderPointId = [];
	var objectId = jQuery( this ).closest( '.wpeo-project-task' ).data( 'id' );
	var data = {};

	jQuery( this ).find( '.point.edit' ).each( function() {
		orderPointId.push( jQuery( this ).data( 'id' ) );
	} );

	data.action = 'edit_order_point';
	data.task_id = objectId;
	data.order_point_id = orderPointId;

	window.task_manager.request.send( jQuery( this ), data );
};

/**
 * Le callback en cas de réussite à la requête Ajax "load_point_properties".
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.0.0.0
 * @version 1.3.6.0
 */
window.task_manager.point.loadedPointProperties = function( triggeredElement, response ) {
	jQuery( triggeredElement ).closest( '.wpeo-project-task' ).find( '.popup .content' ).html( response.data.view );

	jQuery( '.search-task' ).autocomplete( {
		'source': 'admin-ajax.php?action=search_task',
		'appendTo': '.list-tasks',
		'select': function( event, ui ) {
			jQuery( 'input[name="to_task_id"]' ).val( ui.item.id );
		}
	} );
};

/**
 * Le callback en cas de réussite à la requête Ajax "move_point_to".
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.0.0.0
 * @version 1.3.6.0
 */
window.task_manager.point.movedPointTo = function( triggeredElement, response ) {

	// Met à jour le temps.
	jQuery( '.wpeo-project-task[data-id=' + response.data.current_task.id + ']' ).find( '.wpeo-task-time-manage .elapsed' ).text( response.data.current_task.time_info.elapsed );
	jQuery( '.wpeo-project-task[data-id=' + response.data.to_task.id + ']' ).find( '.wpeo-task-time-manage .elapsed' ).text( response.data.to_task.time_info.elapsed );

	// Met à jour le contenu.
	jQuery( '.wpeo-project-task[data-id=' + response.data.to_task.id + ']' ).find( '.points div.point:last' ).before( jQuery( '.point.edit[data-id=' + response.data.point.id + ']' ) );

	window.eoxiaJS.refresh();
};

/**
 * Initialise l'objet "point" ainsi que la méthode "tag" obligatoire pour la bibliothèque EoxiaJS.
 *
 * @since 1.0.0.0
 * @version 1.0.0.0
 */
window.task_manager.tag = {};

window.task_manager.tag.init = function() {
	window.task_manager.tag.event();
};

window.task_manager.tag.event = function() { };

/**
 * Lorsqu'on clique sur la barre des tags, avant de lancer l'action on ajoute une classe permettant de bloquer les actions futures tant que cette action n'est pas terminée
 *
 * @param  {HTMLUListElement} element  The element clicked where to display tags.
 */
window.task_manager.tag.before_load_tags = function( element ) {
	element.addClass( 'no-action' );

	return true;
};

/**
 * Le callback en cas de réussite à la requête Ajax "archive_task".
 * Remplaces le contenu de list-task.
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.0.0.0
 * @version 1.0.0.0
 */
window.task_manager.tag.archivedTaskSuccess = function( triggeredElement, response ) {
	jQuery( triggeredElement ).closest( '.wpeo-project-task' ).remove();
	window.eoxiaJS.refresh();
};

/**
 * Le callback en cas de réussite à la requête Ajax "unarchive_task".
 * Remplaces le contenu de list-task.
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.0.0.0
 * @version 1.0.0.0
 */
window.task_manager.tag.unarchivedTaskSuccess = function( triggeredElement, response ) {
	jQuery( triggeredElement ).closest( '.wpeo-project-task' ).remove();
	window.eoxiaJS.refresh();
};

/**
 * Le callback en cas de réussite à la requête Ajax "load_tags".
 * Remplaces le contenu de ".wpeo-tag-wrap" par la vue reçu dans la réponse AJAX.
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.0.0.0
 * @version 1.0.0.0
 */
window.task_manager.tag.loadedTagSuccess = function( element, response ) {
	element.closest( '.wpeo-tag-wrap' ).replaceWith( response.data.view );
	window.eoxiaJS.refresh();
};

/**
 * Le callback en cas de réussite à la requête Ajax "close_tag_edit_mode".
 * Remplaces le contenu de ".wpeo-tag-wrap" par la vue reçu dans la réponse AJAX.
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.0.0.0
 * @version 1.0.0.0
 */
window.task_manager.tag.closedTagEditMode = function( element, response ) {
	element.closest( '.wpeo-tag-wrap' ).replaceWith( response.data.view );
	window.eoxiaJS.refresh();
};

/**
 * Le callback en cas de réussite à la requête Ajax "load_archived_task".
 * Remplaces le contenu de list-task.
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.0.0.0
 * @version 1.0.0.0
 */
window.task_manager.tag.loadedArchivedTask = function( triggeredElement, response ) {
	jQuery( '.list-task' ).replaceWith( response.data.view );
	window.task_manager.task.offset = 0;
	window.task_manager.task.canLoadMore = true;

	jQuery( '.wpeo-header-bar li.active' ).removeClass( 'active' );
	jQuery( triggeredElement ).addClass( 'active' );
	window.eoxiaJS.refresh();
};

/**
 * Cette méthode est appelé automatiquement lors du clique sur une catégorie a affecter.
 *
 * @param  {HTMLUListElement} element L'élément déclenchant la méthode au clique.
 * @return {void}
 *
 * @since 1.0.0.0
 * @version 1.3.6.0
 */
window.task_manager.tag.beforeAffectTag = function( element ) {
	element.addClass( 'wpeo-tag-tag-selected' );

	return true;
};

/**
 * Cette méthode est appelé automatiquement lors du clique sur une catégorie a désaffecter.
 *
 * @param  {HTMLUListElement} element L'élément déclenchant la méthode au clique.
 * @return {void}
 *
 * @since 1.0.0.0
 * @version 1.3.6.0
 */
window.task_manager.tag.beforeUnaffectTag = function( element ) {
	element.removeClass( 'wpeo-tag-tag-selected' );

	return true;
};

/**
 * Le callback en cas de réussite à la requête Ajax "create_tag".
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.0.0.0
 * @version 1.3.6.0
 */
window.task_manager.tag.createdTagSuccess = function( triggeredElement, response ) {
	jQuery( '.wpeo-tag-title' ).after( response.data.view );
	jQuery( 'input[name="tag_name"]' ).val( '' );
};

/**
 * Initialise l'objet "task" ainsi que la méthode "init" obligatoire pour la bibliothèque EoxiaJS.
 *
 * @since 1.0.0.0
 * @version 1.3.6.0
 */
window.task_manager.task = {};
window.task_manager.task.offset = 0;
window.task_manager.task.canLoadMore = true;

window.task_manager.task.init = function() {
	window.task_manager.task.event();
	jQuery( '.list-task' ).masonry( {
		itemSelector: '.wpeo-project-task'
	} );
};

window.task_manager.task.refresh = function() {
	jQuery( '.list-task' ).masonry();
};

window.task_manager.task.event = function() {
	jQuery( '.wpeo-project-wrap' ).on( 'blur', '.wpeo-project-task-title', window.task_manager.task.editTitle );
	jQuery( window ).scroll( window.task_manager.task.onScrollLoadMore );
};

window.task_manager.task.onScrollLoadMore = function() {
	var data = {};

	if ( 1 !== jQuery( '#poststuff' ).length ) {
		if ( ( jQuery( window ).scrollTop() == jQuery( document ).height() - jQuery( window ).height() ) && window.task_manager.task.canLoadMore ) {
			window.task_manager.task.offset += parseInt( window.task_manager_posts_per_page );
			window.task_manager.task.canLoadMore = false;

			data.action = 'load_more_task';
			data.offset = window.task_manager.task.offset;
			data.posts_per_page = window.task_manager_posts_per_page;
			data.term = jQuery( '.wpeo-header-bar input[name="term"]' ).val();
			data.users_id = ( 'load_my_task' == jQuery( '.wpeo-header-bar li.active' ).data( 'action' ) ) ? jQuery( 'input.user-id' ).val() : jQuery( '.wpeo-header-search select[name="follower_id_selected"]' ).val();
			data.status = ( 'load_archived_task' == jQuery( '.wpeo-header-bar li.active' ).data( 'action' ) ) ? 'archive' : 'publish';

			window.task_manager.navigation.checkDataBeforeSearch( undefined );

			data.categories_id = jQuery( '.wpeo-header-search input[name="categories_id_selected"]' ).val();

			jQuery( '.load-more' ).addClass( 'loading' );
			window.task_manager.request.send( jQuery( '.load-more' ), data );
		}
	}
};

/**
 * Le callback en cas de réussite à la requête Ajax "load_more_task".
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.0.0.0
 * @version 1.3.6.0
 */
window.task_manager.task.loadedMoreTask = function( triggeredElement, response ) {
	var element = jQuery( response.data.view );
	jQuery( '.list-task' ).append( element ).masonry( 'appended', element );
	window.task_manager.task.canLoadMore = true;
	window.eoxiaJS.refresh();
};

window.task_manager.task.editTitle = function( event ) {
	var data = {
		action: 'edit_title',
		_wpnonce: jQuery( this ).data( 'nonce' ),
		task_id: jQuery( this ).closest( '.wpeo-project-task' ).data( 'id' ),
		title: jQuery( this ).val()
	};

	jQuery( this ).closest( '.wpeo-task-header' ).addClass( 'loading' );

	window.task_manager.request.send( jQuery( this ), data );
};

/**
 * Le callback en cas de réussite à la requête Ajax "create_task".
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.0.0.0
 * @version 1.3.6.0
 */
window.task_manager.task.createdTaskSuccess = function( element, response ) {
	var element = jQuery( response.data.view );
	window.task_manager.task.offset++;
	jQuery( '.list-task' ).prepend( element ).masonry( 'prepended', element );
	window.eoxiaJS.refresh();
};

/**
 * Le callback en cas de réussite à la requête Ajax "delete_task".
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.0.0.0
 * @version 1.3.6.0
 */
window.task_manager.task.deletedTaskSuccess = function( element, response ) {
	jQuery( element ).closest( '.wpeo-project-task' ).fadeOut( 400, function() {
		jQuery( element ).closest( '.wpeo-project-task' ).remove();
		window.eoxiaJS.refresh();
	} );
};

/**
 * Avant d'envoyer la requête pour changer la tâche de couleur.
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant l'action.
 * @param  {Object}         data          		Les données du l'action.
 * @return {void}
 *
 * @since 1.0.0.0
 * @version 1.3.6.0
 */
window.task_manager.task.beforeChangeColor = function( triggeredElement, data ) {
	jQuery( triggeredElement ).closest( '.wpeo-project-task' ).removeClass( 'red yellow purple white blue green' );
	jQuery( triggeredElement ).closest( '.wpeo-project-task' ).addClass( jQuery( triggeredElement ).data( 'color' ) );

	return true;
};

/**
 * Le callback en cas de réussite à la requête Ajax "load_all_task".
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.0.0.0
 * @version 1.3.6.0
 */
window.task_manager.task.loadedAllTask = function( triggeredElement, response ) {
	jQuery( '.list-task' ).replaceWith( response.data.view );
	window.task_manager.task.offset = 0;
	window.task_manager.task.canLoadMore = true;

	jQuery( '.wpeo-header-bar li.active' ).removeClass( 'active' );
	jQuery( triggeredElement ).addClass( 'active' );
	window.eoxiaJS.refresh();
};

/**
 * Le callback en cas de réussite à la requête Ajax "load_task_properties".
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.0.0.0
 * @version 1.3.6.0
 */
window.task_manager.task.loadedTaskProperties = function( triggeredElement, response ) {
	jQuery( triggeredElement ).closest( '.wpeo-project-task' ).find( '.popup .content' ).html( response.data.view );

	jQuery( '.search-parent' ).autocomplete( {
		'source': 'admin-ajax.php?action=search_parent',
		'appendTo': '.list-posts',
		'select': function( event, ui ) {
			jQuery( 'input[name="to_element_id"]' ).val( ui.item.id );
		}
	} );
};

/**
 * Le callback en cas de réussite à la requête Ajax "move_task_to".
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.0.0.0
 * @version 1.3.6.0
 */
window.task_manager.task.movedTaskTo = function( triggeredElement, response ) {
	jQuery( triggeredElement ).closest( '.wpeo-project-task' ).hide();
	window.eoxiaJS.refresh();
};
