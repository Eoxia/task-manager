window.eoxiaJS.taskManager = {};
window.eoxiaJS.taskManagerFrontend = {};

/**
 * Initialise l'objet "activity" ainsi que la méthode "init" obligatoire pour la bibliothèque EoxiaJS.
 *
 * @since 1.5.0
 * @version 1.5.0
 */
window.eoxiaJS.taskManagerFrontend.activity = {};

/**
 * Méthode 'init' obligatoire.
 *
 * @since 1.5.0
 * @version 1.5.0
 *
 * @return {void}
 */
window.eoxiaJS.taskManagerFrontend.activity.init = function() {
	window.eoxiaJS.taskManagerFrontend.activity.event();
};

/**
 * Méthode 'event'.
 *
 * @since 1.5.0
 * @version 1.5.0
 *
 * @return {void}
 */
window.eoxiaJS.taskManagerFrontend.activity.event = function() {
	jQuery( '.tm-wrap' ).on( 'click', '.tm-task-display-method-buttons .list-display', window.eoxiaJS.taskManagerFrontend.activity.switchViewToLine );
};

/**
 * Réaffiches les points lors du clic.
 *
 * @since 1.5.0
 * @version 1.5.0
 *
 * @param  {ClickEvent} event         L'état de l'évènement lors du 'click'.
 * @return {void}
 */
window.eoxiaJS.taskManagerFrontend.activity.switchViewToLine = function( event ) {
	var taskElement = jQuery( this ).closest( '.wpeo-project-task' );
	taskElement.find( '.tm-task-display-method-buttons .wpeo-button.active' ).removeClass( 'active' );
	jQuery( this ).addClass( 'active' );
	taskElement.find( '.bloc-activities' ).hide();
	taskElement.find( '.points.sortable' ).show();
	window.eoxiaJS.refresh();
};

/**
 * Le callback en cas de réussite à la requête Ajax "load_last_activity".
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.5.0
 * @version 1.6.0
 */
window.eoxiaJS.taskManagerFrontend.activity.loadedLastActivity = function( triggeredElement, response ) {
	if ( triggeredElement.closest( '.wpeo-project-task' ).length ) {
		var taskElement = triggeredElement.closest( '.wpeo-project-task' );
		triggeredElement.addClass( 'active' );
		triggeredElement.closest( '.tm-task-display-method-buttons' ).find( '.list-display.active' ).removeClass( 'active' );
		taskElement.find( '.points' ).hide();
		taskElement.find( '.bloc-activities' ).html( response.data.view ).show();
	} else {
		jQuery( '.wpeo-modal.last-activity .modal-content' ).html( response.data.view );
	}

	window.eoxiaJS.refresh();
};

/**
 * Initialise l'objet "comment" ainsi que la méthode "init" obligatoire pour la bibliothèque EoxiaJS.
 *
 * @since 1.0.0
 * @version 1.6.0
 */
window.eoxiaJS.taskManagerFrontend.comment = {};

/**
 * La méthode obligatoire pour la biblotèque EoxiaJS.
 *
 * @return {void}
 *
 * @since 1.0.0
 * @version 1.0.0
 */
window.eoxiaJS.taskManagerFrontend.comment.init = function() {
	window.eoxiaJS.taskManagerFrontend.comment.event();
};

/**
 * Initialise tous les évènements liés au comment de Task Manager.
 *
 * @return {void}
 *
 * @since 1.0.0
 * @version 1.5.0
 */
window.eoxiaJS.taskManagerFrontend.comment.event = function() {
	jQuery( document ).on( 'keyup', '.comment div[contenteditable="true"], .comment input[name="time"]', window.eoxiaJS.taskManagerFrontend.comment.triggerCreate );
	jQuery( document ).on( 'blur keyup paste keydown click', '.comments .comment .content', window.eoxiaJS.taskManagerFrontend.comment.updateHiddenInput );
	jQuery( document ).on( 'click', '.point.edit .point-container', window.eoxiaJS.taskManagerFrontend.comment.loadComments );
};

/**
 * Fermes les points.active ainsi que leurs commentaires
 *
 * @since 1.5.0
 * @version 1.5.0
 *
 * @return {void}
 */
window.eoxiaJS.taskManagerFrontend.comment.closePoint = function( event ) {
	jQuery( '.point.active' ).removeClass( 'active' );
	if ( jQuery( 'div.point' ).find( '.comments' ).is( ':visible' ) ) {
		jQuery( 'div.point .comments:visible' ).slideUp( 400, function() {
			window.eoxiaJS.refresh();
		} );
	}
};

/**
 * Stop propagation afin d'éviter la fermeture du point.
 *
 * @since 1.5.0
 * @version 1.5.0
 *
 * @return {void}
 */
window.eoxiaJS.taskManagerFrontend.comment.preventClosePoint = function( event ) {
	event.stopPropagation();
};

window.eoxiaJS.taskManagerFrontend.comment.triggerCreate = function( event ) {
	if ( event.ctrlKey && 13 === event.keyCode ) {
		jQuery( this ).closest( '.comment' ).find( '.action-input' ).click();
	}
};

/**
 * Met à jour le champ caché contenant le texte du comment écris dans la div "contenteditable".
 *
 * @param  {MouseEvent} event L'évènement de la souris lors de l'action.
 * @return {void}
 *
 * @since 1.0.0
 * @version 1.6.0
 */
window.eoxiaJS.taskManagerFrontend.comment.updateHiddenInput = function( event ) {
	if ( 0 < jQuery( this ).text().length ) {
		jQuery( this ).closest( '.comment' ).find( '.placeholder' ).addClass( 'hidden' );
		jQuery( this ).closest( '.comment' ).removeClass( 'add' ).addClass( 'edit' );
		// window.eoxiaJS.taskManagerFrontend.core.initSafeExit( true );
	} else {
		jQuery( this ).closest( '.comment' ).find( '.placeholder' ).removeClass( 'hidden' );
		jQuery( this ).closest( '.comment' ).removeClass( 'edit' ).addClass( 'add' );
		// window.eoxiaJS.taskManagerFrontend.core.initSafeExit( false );
	}

	jQuery( this ).closest( '.comment' ).find( 'input[name="content"]' ).val( jQuery( this ).html() );

	window.eoxiaJS.refresh();
};

/**
 * Charges les commentaires au clic sur le content editable.
 *
 * @param  {MouseEvent} event L'évènement du clic
 * @return {void}
 *
 * @since 1.3.6.0
 * @version 1.3.6.0
 */
window.eoxiaJS.taskManagerFrontend.comment.loadComments = function( event ) {
	var data = {};

	data.action   = 'load_comments';
	data.task_id  = jQuery( this ).closest( '.wpeo-project-task' ).data( 'id' );
	data.point_id = jQuery( this ).closest( '.point' ).data( 'id' );
	data.frontend = true;

	if ( ! jQuery( this ).closest( 'div.point' ).find( '.comments' ).is( ':visible' ) ) {
		jQuery( 'div.point .comments:visible' ).slideUp( 400, function() {
			window.eoxiaJS.refresh();
		} );

		window.eoxiaJS.loader.display( jQuery( this ) );
		window.eoxiaJS.request.send( jQuery( this ), data );
	}
};

/**
 * Le callback en cas de réussite à la requête Ajax "load_comments".
 * Met le contenu dans la div.comments.
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.0.0.0
 * @version 1.0.0.0
 */
window.eoxiaJS.taskManagerFrontend.comment.loadedCommentsSuccess = function( triggeredElement, response ) {
	jQuery( triggeredElement ).closest( 'div.point' ).find( '.comments' ).html( response.data.view );

	triggeredElement.removeClass( 'loading' );
	triggeredElement.closest( 'div.point' ).find( '.comments' ).slideDown( 400, function() {
		window.eoxiaJS.refresh();
	} );
};

/**
 * Le callback en cas de réussite à la requête Ajax "edit_comment".
 * Met le contenu dans la div.comments.
 *
 * @since 1.0.0
 * @version 1.5.0
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 */
window.eoxiaJS.taskManagerFrontend.comment.addedCommentSuccess = function( triggeredElement, response ) {
	triggeredElement.closest( '.comment' ).find( 'div.content' ).html( '' );

	triggeredElement.closest( '.wpeo-project-task' ).find( '.wpeo-task-time-info .elapsed' ).text( response.data.time.task );
	triggeredElement.closest( '.comments' ).prev( '.form' ).find( '.wpeo-time-in-point' ).text( response.data.time.point );

	triggeredElement.closest( 'div.point' ).find( '.comments' ).html( response.data.view );

	jQuery( '.wpeo-project-task[data-id="' + response.data.comment.post_id + '"] .point[data-id="' + response.data.comment.parent_id + '"] .comment.new div.content' ).focus();

	window.eoxiaJS.refresh();
	window.eoxiaJS.taskManagerFrontend.core.initSafeExit( false );
};
/**
 * Initialise l'objet "point" ainsi que la méthode "init" obligatoire pour la bibliothèque EoxiaJS.
 *
 * @since 1.0.0
 * @version 1.7.0
 */
window.eoxiaJS.taskManagerFrontend.point = {};
/**
 * La méthode obligatoire pour la biblotèque EoxiaJS.
 *
 * @return {void}
 *
 * @since 1.0.0
 * @version 1.0.0
 */
window.eoxiaJS.taskManagerFrontend.point.init = function() {
	window.eoxiaJS.taskManagerFrontend.point.event();
};

/**
 * Initialise tous les évènements liés au point de Task Manager.
 *
 * @return {void}
 *
 * @since 1.0.0
 * @version 1.0.0
 */
window.eoxiaJS.taskManagerFrontend.point.event = function() {
	jQuery( document ).on( 'click', '.point-type-display-buttons button.active', window.eoxiaJS.taskManagerFrontend.point.undisplayPoint );
	
};

/**
 * Le callback en cas de réussite à la requête Ajax "load_completed_point".
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.0.0
 * @version 1.6.0
 */
window.eoxiaJS.taskManagerFrontend.point.loadedPoint = function( triggeredElement, response ) {
	jQuery( triggeredElement ).addClass( 'active' ).removeClass( 'action-input' );
	jQuery( triggeredElement ).closest( '.wpeo-project-task' ).find( '.points' ).append( response.data.view );
	window.eoxiaJS.refresh();
};

/**
 * Méthode appelée lors du clic sur les boutons de hoix du type de points affichés dans une tâche.
 *
 * @since 1.8.0
 *
 * @param  {type} event  L'événement lancé lors de l'action.
 */
window.eoxiaJS.taskManagerFrontend.point.undisplayPoint = function( event ) {
	var pointState = jQuery( this ).attr( 'data-point-state' );
	event.preventDefault();
	jQuery( this ).removeClass( 'active' ).addClass( 'action-input' );
	jQuery( this ).closest( '.wpeo-project-task-container' ).find( '.points .point.edit[data-point-state="' + pointState + '"]' ).remove();

	window.eoxiaJS.refresh();
};

window.eoxiaJS.taskManagerFrontend.frontendSupport = {};

window.eoxiaJS.taskManagerFrontend.frontendSupport.init = function() {
	window.eoxiaJS.taskManagerFrontend.frontendSupport.event();
};

window.eoxiaJS.taskManagerFrontend.frontendSupport.event = function() {
	jQuery( document ).on( 'click', '.wpeo-ask-task', window.eoxiaJS.taskManagerFrontend.frontendSupport.slideAskTask );
	jQuery( document ).on( 'keyup', '.wps-section-content .task-search', window.eoxiaJS.taskManagerFrontend.frontendSupport.searchKey );
	jQuery( document ).on( 'click', '.wps-section-content .search-button', window.eoxiaJS.taskManagerFrontend.frontendSupport.searchIn );
	jQuery( document ).on( 'click', '.wps-section-content .button.blue', window.eoxiaJS.taskManagerFrontend.frontendSupport.closePopup );
	jQuery( document ).on( 'keydown', '.wps-section-content .popup input', window.eoxiaJS.taskManagerFrontend.frontendSupport.preventDefaultForm );
};

window.eoxiaJS.taskManagerFrontend.frontendSupport.slideAskTask = function( event ) {
	event.preventDefault();
	jQuery( '#wpeo-window-ask-task' ).slideToggle();
};

window.eoxiaJS.taskManagerFrontend.frontendSupport.searchKey = function( event ) {
	if ( 13 === event.keyCode ) {
		jQuery( '.wps-section-content .search-button' ).click();
	}
};

window.eoxiaJS.taskManagerFrontend.frontendSupport.searchIn = function( event ) {
	var element = jQuery( this );
	if ( 0 == jQuery( this ).closest( '.wps-section-content' ).find( '.task-search' ).val().length ) {
		jQuery( '.list-task .wpeo-project-task' ).show();
	} else {
		jQuery( '.list-task .wpeo-project-task:visible' ).each( function() {
			var synthesis_task = '';
			synthesis_task += jQuery( this ).text();
			jQuery( this ).find( 'input' ).each( function() {
				synthesis_task += jQuery( this ).val() + ' ';
			} );
			synthesis_task = synthesis_task.replace( /\s+\s/g, ' ' ).trim();

			if ( synthesis_task.search( new RegExp( jQuery( element ).closest( '.wps-section-content' ).find( '.task-search' ).val(), 'i' ) ) == -1 ) {
				jQuery( this ).hide();
			}
		} );
	}
};

window.eoxiaJS.taskManagerFrontend.frontendSupport.createdTicket = function( triggeredElement, response ) {
	if ( response.data.edit ) {
		triggeredElement.closest( '.wpeo-project-wrap' ).find( '.tm-list-ticket .tm-project[data-id="' + response.data.project_id + '"]  .project-header' ).after( response.data.task_view );
	} else {
		triggeredElement.closest( '.wpeo-project-wrap' ).find( '.tm-list-ticket h3').after( response.data.project_view );
		triggeredElement.closest( '.wpeo-project-wrap' ).find( '.tm-list-ticket .tm-project[data-id="' + response.data.project_id + '"]  .project-header' ).after( response.data.task_view );
	}
	//jQuery( '.wpeo-modal .modal-container .modal-content' ).html( response.data.success_view );
};

/**
 * Le callback en cas de réussite à la requête Ajax "open_popup_create_ticket".
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.2.0
 * @version 1.2.0
 */
window.eoxiaJS.taskManagerFrontend.frontendSupport.openedPopupCreateTicket = function( triggeredElement, response ) {
	jQuery( '.wpeo-project-wrap .popup .container.loading' ).removeClass( 'loading' );
	jQuery( '.wpeo-project-wrap .popup .container .content' ).html( response.data.view );
};

/**
 * Fermes la popup
 *
 * @since 1.2.0
 * @version 1.2.0
 *
 * @return {void}
 */
window.eoxiaJS.taskManagerFrontend.frontendSupport.closePopup = function() {
	jQuery( '.wpeo-project-wrap .popup.active' ).removeClass( 'active' );
};

/**
 * Empèches l'évènement de la touche 'entrer' dans le formulaire de la popup pour faire une demande.
 *
 * @since 1.2.0
 * @version 1.2.0
 *
 * @param  {KeyEvent} event L'état du clavier.
 * @return {void}
 */
window.eoxiaJS.taskManagerFrontend.frontendSupport.preventDefaultForm = function( event ) {
	if ( 13 === event.keyCode ) {
		event.preventDefault();
	}

	if ( event.ctrlKey && 13 === event.keyCode ) {
		jQuery( this ).closest( '.popup' ).find( '.action-input' ).click();
	}
};

/**
 * Les dernières activitéés faites sur le support.
 *
 * @since 1.2.0
 * @version 1.2.0
 *
 * @param  {SpanElement} triggeredElement L'élément déclenchant la requête Ajax.
 * @param  {Object} response              les données renvoyées par la requêtes Ajax.
 * @return {[type]}
 */
window.eoxiaJS.taskManagerFrontend.frontendSupport.loadedLastActivity = function( triggeredElement, response ) {
	jQuery( '.wps-section-content .popup .content' ).html( response.data.view );
	jQuery( '.wps-section-content .popup .container' ).removeClass( 'loading' );
	jQuery( '.wps-section-content .popup .title' ).html( response.data.title_popup );
	jQuery( '.wps-section-content .popup .load-more-history' ).show();
	jQuery( '.wps-section-content .popup .offset-event' ).val( response.data.offset );
	jQuery( '.wps-section-content .popup .last-date' ).val( response.data.last_date );
};

window.eoxiaJS.taskManagerFrontend.frontendSupport.sendedResponseToSupport = function( triggeredElement, response ) {
	triggeredElement.closest( '.wpeo-project-wrap' ).find( '.comment-new' ).after( response.data.view );
	triggeredElement.closest( '.wpeo-project-wrap' ).find( '.comment-new textarea' ).val( '' );
};

/**
 * Initialise l'objet "task" ainsi que la méthode "init" obligatoire pour la bibliothèque EoxiaJS.
 *
 * @since 1.0.0
 * @version 1.5.0
 */
window.eoxiaJS.taskManagerFrontend.task = {};

window.eoxiaJS.taskManagerFrontend.task.init = function() {
	// jQuery( '.list-task' ).colcade( {
	//items: '.wpeo-project-task',
	//	columns: '.grid-col'
	// } );
};

window.eoxiaJS.taskManagerFrontend.task.refresh = function() {
};
