window.eoxiaJS.taskManager = {};
window.eoxiaJS.taskManagerFrontend = {};

/**
 * Initialise l'objet "core" ainsi que la méthode "init" obligatoire pour la bibliothèque EoxiaJS.
 *
 * @since 1.0.0
 * @version 1.0.0
 */

window.eoxiaJS.taskManager.core = {};

/**
 * La méthode appelée automatiquement par la bibliothèque EoxiaJS.
 *
 * @return {void}
 *
 * @since 1.0.0
 * @version 1.0.0
 */
window.eoxiaJS.taskManager.core.init = function() {
	window.eoxiaJS.taskManager.core.event();
};

/**
 * La méthode contenant tous les évènements pour la core.
 *
 * @since 1.0.0
 * @version 1.0.0
 *
 * @return {void}
 */
window.eoxiaJS.taskManager.core.event = function() {
	jQuery( document ).on( 'click', '.tm-wrap .notification.patch-note.active', window.eoxiaJS.taskManager.core.openPopup );
	jQuery( document ).on( 'click', '.tm-wrap .notification.patch-note .close', window.eoxiaJS.taskManager.core.closeNotification );
};

/**
 * Ajoutes la classe 'active' dans l'élement 'popup.path-note'.
 *
 * @since 1.0.0
 * @version 1.0.0
 *
 * @param  {MouseEvent} event Les attributs de l'évènement.
 * @return {void}
 */
window.eoxiaJS.taskManager.core.openPopup = function( event ) {
	event.stopPropagation();
	jQuery( '.tm-wrap .popup.patch-note' ).addClass( 'active' );
};

/**
 * Ajoutes la classe 'active' dans l'élement 'popup.path-note'.
 *
 * @since 1.0.0
 * @version 1.0.0
 *
 * @param  {MouseEvent} event Les attributs de l'évènement.
 * @return {void}
 */
window.eoxiaJS.taskManager.core.closeNotification = function( event ) {
	event.stopPropagation();
	jQuery( this ).closest( '.notification' ).removeClass( 'active' );
};

/**
 * Actives ou désactive l'évènement unload pour le "safeExit".
 *
 * @since 1.6.0
 * @version 1.6.0
 *
 * @param  {boolean} add True active, false désactive l'évènement.
 * @return {void}
 */
window.eoxiaJS.taskManager.core.initSafeExit = function( add ) {
	if ( add ) {
		window.addEventListener( 'beforeunload', window.eoxiaJS.taskManager.core.safeExit );
	} else {
		window.removeEventListener( 'beforeunload', window.eoxiaJS.taskManager.core.safeExit );

	}
}
/**
 * Ajoutes une popup si l'utilisateur essai de quitter la page.
 *
 * @since 1.6.0
 * @version 1.6.0
 *
 * @return {void}
 */
window.eoxiaJS.taskManager.core.safeExit = function() {
	var confirmationMessage = 'The changes you have made will not be saved.';

	event.returnValue = confirmationMessage;
	return confirmationMessage;
}

window.eoxiaJS.taskManager.core.selectContentEditable = function( cell ) {
	cell = cell[0] ? cell[0] : cell;
	// select all text in contenteditable
	// see http://stackoverflow.com/a/6150060/145346
	var range, selection;
	if (document.body.createTextRange) {
		range = document.body.createTextRange();
		range.moveToElementText(cell);
		range.select();
	} else if (window.getSelection) {
		selection = window.getSelection();
		range = document.createRange();
		range.selectNodeContents(cell);
		selection.removeAllRanges();
		selection.addRange(range);
	}
};

window.eoxiaJS.taskManager.input = {};

window.eoxiaJS.taskManager.input.init = function() {
	window.eoxiaJS.taskManager.input.event();
};

window.eoxiaJS.taskManager.input.event = function() {
  jQuery( document ).on( 'keyup', '.tm-wrap .form-element input, .tm-wrap .form-element textarea', window.eoxiaJS.taskManager.input.keyUp );
};

window.eoxiaJS.taskManager.input.keyUp = function( event ) {
	if ( 0 < jQuery( this ).val().length ) {
		jQuery( this ).closest( '.form-element' ).addClass( 'form-active' );
	} else {
		jQuery( this ).closest( '.form-element' ).removeClass( 'form-active' );
	}
};

/**
 * Initialise l'objet "comment" ainsi que la méthode "init" obligatoire pour la bibliothèque EoxiaJS.
 *
 * @since 1.0.0
 * @version 1.6.0
 */
window.eoxiaJS.taskManager.parseContent = {};
window.eoxiaJS.taskManager.parseContent.currentInput;
window.eoxiaJS.taskManager.parseContent.currentSuggest;
window.eoxiaJS.taskManager.parseContent.parseContent;
window.eoxiaJS.taskManager.parseContent.startPos;
window.eoxiaJS.taskManager.parseContent.endPos;

/**
 * La méthode obligatoire pour la biblotèque EoxiaJS.
 *
 * @return {void}
 *
 * @since 1.0.0
 * @version 1.0.0
 */
window.eoxiaJS.taskManager.parseContent.init = function() {
	window.eoxiaJS.taskManager.parseContent.event();

	wp.heartbeat.enqueue( 'refresh-index' );
};

/**
 * Initialise tous les évènements liés au comment de Task Manager.
 *
 * @return {void}
 *
 * @since 1.0.0
 * @version 1.5.0
 */
window.eoxiaJS.taskManager.parseContent.event = function() {
	jQuery( document ).on( 'blur keyup paste keydown click', '.comments .comment .content, .wpeo-point-new-contenteditable', window.eoxiaJS.taskManager.parseContent.parse );
	jQuery( document ).on( 'keydown', window.eoxiaJS.taskManager.parseContent.navigate );
	jQuery( document ).on( 'click', '.suggest li', window.eoxiaJS.taskManager.parseContent.selectSuggested );

	jQuery( document ).on( 'heartbeat-tick.refresh-index', function( event, data ) {
		taskManager.data = data.task_manager_data;
	} );
};

window.eoxiaJS.taskManager.parseContent.navigate = function( event ) {
	if ( window.eoxiaJS.taskManager.parseContent.currentSuggest ) {
		if ( window.eoxiaJS.taskManager.parseContent.currentSuggest.hasClass( 'dropdown-active' ) ) {
			switch (event.keyCode) {
				case 40: // BAS
					var next = window.eoxiaJS.taskManager.parseContent.currentSuggest.find( 'li.focus' ).next();

					if (next.length == 0 ) {
						next = window.eoxiaJS.taskManager.parseContent.currentSuggest.find( 'li:first' );
					}

					window.eoxiaJS.taskManager.parseContent.currentSuggest.find( 'li.focus' ).removeClass( 'focus' );
					next.addClass( 'focus' );

					event.preventDefault();
				break;
				case 38: // HAUT
					var prev = window.eoxiaJS.taskManager.parseContent.currentSuggest.find( 'li.focus' ).prev();

					if (prev.length == 0 ) {
						prev = window.eoxiaJS.taskManager.parseContent.currentSuggest.find( 'li:last' );
					}

					window.eoxiaJS.taskManager.parseContent.currentSuggest.find( 'li.focus' ).removeClass( 'focus' );
					prev.addClass( 'focus' );

					event.preventDefault();
				break;
				case 13:
				case 9:
					window.eoxiaJS.taskManager.parseContent.selectSuggested();
					event.preventDefault();
				break;
			}
		}
	}
}

window.eoxiaJS.taskManager.parseContent.selectSuggested = function() {
	var text = window.eoxiaJS.taskManager.parseContent.currentInput.text();
	var startText = text.substr( 0, window.eoxiaJS.taskManager.parseContent.startPos );
	var endText = undefined;
	if ( window.eoxiaJS.taskManager.parseContent.endPos > -1 ) {
		endText = text.substr( window.eoxiaJS.taskManager.parseContent.startPos + window.eoxiaJS.taskManager.parseContent.parseContent.length );
	}
	var replacedText = window.eoxiaJS.taskManager.parseContent.parseContent;

	replacedText = replacedText.replace( replacedText, window.eoxiaJS.taskManager.parseContent.currentSuggest.find( 'li.focus' ).data( 'value' ) );

	if ( endText ) {
		text = startText + replacedText + endText;
	} else {
		text = startText + replacedText;
	}

	var lengthText = startText + replacedText;

	window.eoxiaJS.taskManager.parseContent.currentInput.text( text );

	var el = window.eoxiaJS.taskManager.parseContent.currentInput[0];
	var range = document.createRange();
	var sel = window.getSelection();
	sel.collapse(el.firstChild, lengthText.length);

	window.eoxiaJS.taskManager.parseContent.currentSuggest.removeClass( 'dropdown-active' );
}

/**
 * Met à jour le champ caché contenant le texte du comment écris dans la div "contenteditable".
 *
 * @param  {MouseEvent} event L'évènement de la souris lors de l'action.
 * @return {void}
 *
 * @since 1.0.0
 * @version 1.6.0
 */
window.eoxiaJS.taskManager.parseContent.parse = function( event ) {
	if ( 'keyup' == event.type && (event.which <= 90 && event.which >= 48 ) || event.which == 32 || event.which == 37 || event.which == 39 || ( event.which >= 96 && event.which <= 105 ) || event.which == 8 ) {
		window.eoxiaJS.taskManager.parseContent.currentInput = jQuery( this );
		var x = getSelectionCoords().x;
		var position = jQuery( this ).offset();

		var foundHashtag = false;
		var endPos = getCaretPosition(jQuery( this )[0]);
		var startPos = -1;
		var stringToParse = '';
		var currentText = jQuery( this ).text();

		// Cherche fin de la chaine de caractère

		var i = endPos;
		while ( ( i - 1 ) >= 0 ) {
			if ( currentText[ i - 1 ].match(/\s/g)) {
				foundHashtag = false;
				startPos = -1;
				break;
			} else if ( currentText[ i - 1 ] != '#' ) {
				i--;
			} else {
				foundHashtag = true;
				startPos = i;
				break;
			}
		}

		i = startPos;

		if ( i < - 1 ) {
			i = 0;
		}

		while (true) {
			if ( currentText[i] ) {
				if ( currentText[i].match(/\s/g)) {
					endPos = i;
					break;
				}
			} else {
				endPos = -1;
				break;
			}
			i++;
		}

		if ( foundHashtag ) {
			if ( endPos != - 1 && startPos != -1 ) {
				stringToParse = currentText.substr( startPos, endPos - startPos );
			} else if (endPos != -1 && startPos == -1) {
				stringToParse = currentText.substr(0, endPos);
			} else if( endPos == -1 && startPos != -1) {
				stringToParse = currentText.substr(startPos);
			} else {
				stringToParse = currentText;
			}
		}

		window.eoxiaJS.taskManager.parseContent.startPos = startPos;
		window.eoxiaJS.taskManager.parseContent.endPos = endPos;

		window.eoxiaJS.taskManager.parseContent.currentSuggest = jQuery( this ).closest( 'li' ).find( '.suggest' );

		if ( foundHashtag ) {
			window.eoxiaJS.taskManager.parseContent.parseContent = stringToParse;
			window.eoxiaJS.taskManager.parseContent.currentSuggest.addClass( 'dropdown-active' );
			window.eoxiaJS.taskManager.parseContent.currentSuggest.css( {
				'left': (x - position.left) + 'px',
				'top': 20,
			} );
		} else {
			window.eoxiaJS.taskManager.parseContent.currentSuggest.removeClass( 'dropdown-active' );
		}

		var list = {};

		var output = '';


		if ( stringToParse ) {
			list = window.eoxiaJS.taskManager.getResultsFromParsedContent( list, stringToParse, true );
			list = window.eoxiaJS.taskManager.getResultsFromParsedContent( list, stringToParse );
		} else {
			for (var key in taskManager.data.last) {

				var content  = taskManager.data.last[key].content;
				var type     = taskManager.data.last[key].type;
				var id       = taskManager.data.last[key].id;
				var id_index = taskManager.data.last[key].id_index;

				list[id_index] = {
					id: id,
					content: content,
					type: type
				};
			}
		}

		var first = true;

		for (var key in list ) {
			var type_value = '';

			if ( list[key].type == 'point' ) {
				type_value = 'P';
			} else if( list[key].type == 'comment' ) {
				type_value = 'C';
			} else {
				type_value = 'T';
			}

			if ( first ) {
				output += '<li class="dropdown-item navigation focus" data-value="' + key + '" data-type="' + list[key].type + '" data-id="' + list[key].id + '"><span class="id">#' + key + '</span>' + list[key].content + '</li>';
				first = false;
			} else {
				output += '<li class="dropdown-item navigation" data-value="' + key + '" data-type="' + list[key].type + '" data-id="' + list[key].id + '"><span class="id">#' + key + '</span>' + list[key].content + '</li>';
			}
		}

		if ( 0 === Object.keys( list ).length ) {
				window.eoxiaJS.taskManager.parseContent.currentSuggest.removeClass( 'dropdown-active' );
		}

		window.eoxiaJS.taskManager.parseContent.currentSuggest.find( '.dropdown-content' ).html( output );
	}
};

window.eoxiaJS.taskManager.getResultsFromParsedContent = function( list, stringToParse, priorityID ) {
	if ( 5 <= Object.keys( list ).length ) {
		return list;
	}

	for (var key in taskManager.data.list) {
		if ( 5 <= Object.keys( list ).length ) {
			break;
		}

		var content = taskManager.data.list[key].content;
		var type    = taskManager.data.list[key].type;
		var id      = taskManager.data.list[key].id;

		if ( priorityID && stringToParse == id ) {
			list[key] = {
				id: id,
				content: content,
				type: type
			};
		} else if( !priorityID && ( stringToParse == key || content.indexOf( stringToParse ) != - 1 ) ) {
			list[key] = {
				id: id,
				content: content,
				type: type
			};
		}
	}

	return list;
};

function getSelectionCoords() {
	var sel = document.selection, range, rect;
	var x = 0, y = 0;
	if ( sel ) {
		if ( sel.type != "Control" ) {
			range = sel.createRange();
			range.collapse( true );
			x = range.boundingLeft;
			y = range.boundingTop;
		}
	} else if ( window.getSelection ) {
		sel = window.getSelection();
		if ( sel.rangeCount ) {
			range = sel.getRangeAt( 0 ).cloneRange();
			if ( range.getClientRects ) {
				range.collapse( true );
				if ( range.getClientRects().length > 0 ) {
					rect = range.getClientRects()[0];
					x = rect.left;
					y = rect.top;
				}
			}

			if ( x == 0 && y == 0 ) {

				var span = document.createElement( "span" );
				if ( span.getClientRects ) {
					span.appendChild( document.createTextNode( "\u200b" ) );
					range.insertNode( span );
					rect = span.getClientRects()[0];
					x = rect.left;
					y = rect.top;
					var spanParent = span.parentNode;
					spanParent.removeChild( span );

					spanParent.normalize();
				}
			}
		}
	}

	return { x: x, y: y };
}

function setCursorPosition( obj, pos ) {

	if(obj != null) {
		if(obj.createTextRange) {
			var range = obj.createTextRange();
			range.move('character', pos);
			range.select();
		} else {
			if(obj.selectionStart) {
				obj.focus();
				obj.setSelectionRange(pos, pos);
			} else {
				obj.focus();
			}
		}
	}
}

function getCaretPosition( editableDiv ) {
	var caretPos = 0,
	sel, range;
	if ( window.getSelection ) {
		sel = window.getSelection();
		if ( sel.rangeCount ) {
			range = sel.getRangeAt( 0 );
			if ( range.commonAncestorContainer.parentNode == editableDiv ) {
				caretPos = range.endOffset;
			}
		}
	} else if ( document.selection && document.selection.createRange ) {
		range = document.selection.createRange();
		if ( range.parentElement() == editableDiv ) {
			var tempEl = document.createElement( "span" );
			editableDiv.insertBefore( tempEl, editableDiv.firstChild );
			var tempRange = range.duplicate();
			tempRange.moveToElementText( tempEl );
			tempRange.setEndPoint( "EndToEnd", range );
			caretPos = tempRange.text.length;
		}
	}
	return caretPos;
}

/**
 * Initialise l'objet "activity" ainsi que la méthode "init" obligatoire pour la bibliothèque EoxiaJS.
 *
 * @since 1.5.0
 * @version 1.5.0
 */
window.eoxiaJS.taskManager.activity = {};

/**
 * Méthode 'init' obligatoire.
 *
 * @since 1.5.0
 * @version 1.5.0
 *
 * @return {void}
 */
window.eoxiaJS.taskManager.activity.init = function() {
	window.eoxiaJS.taskManager.activity.event();
};

/**
 * Méthode 'event'.
 *
 * @since 1.5.0
 * @version 1.5.0
 *
 * @return {void}
 */
window.eoxiaJS.taskManager.activity.event = function() {
	jQuery( document ).on( 'click', '.activities .load-more-history', window.eoxiaJS.taskManager.activity.loadMoreHistory );

	jQuery( '.tm-wrap' ).on( 'click', '.tm-task-display-method-buttons .list-display', window.eoxiaJS.taskManager.activity.switchViewToLine );
};

/**
 * Réaffiches les points lors du clic.
 *
 * @since 1.5.0
 * @version 1.5.0
 *
 * @param  {ClickEvent} event         L'état de l'évènement lors du 'click'.
 * @return {void}
 */
window.eoxiaJS.taskManager.activity.switchViewToLine = function( event ) {
	var taskElement = jQuery( this ).closest( '.wpeo-project-task' );
	taskElement.find( '.tm-task-display-method-buttons .wpeo-button.active' ).removeClass( 'active' );
	jQuery( this ).addClass( 'active' );
	taskElement[0].querySelector( '.bloc-activities' ).style.display = 'none';
	this.closest( '.wpeo-project-task' ).querySelector( '.points.sortable' ).style.display = 'block';
};

/**
 * Envoie une requête pour charger plus d'évènement dans l'historique.
 *
 * @since 1.5.0
 * @version 1.6.0
 *
 * @return void
 */
window.eoxiaJS.taskManager.activity.loadMoreHistory = function( event ) {
	var element = jQuery( this );
	var data = {
		action: 'load_last_activity',
		_wpnonce: element.closest( '.wpeo-project-task' ).find( '.dashicons-screenoptions' ).data( 'nonce' ),
		tasks_id: element.closest( '.wpeo-project-task' ).data( 'id' ),
		offset: element.closest( '.activities' ).find( '.offset-event' ).val(),
		last_date: element.closest( '.activities' ).find( '.last-date' ).val()
	};
	window.eoxiaJS.loader.display( element );

	if ( element.closest( '.popup.last-activity' ).length ) {
		data.term = jQuery( '.wpeo-general-search input[type="text"]' ).val();
		data.follower_id_selected = jQuery( '.wpeo-header-search .follower_id_selected' ).val();
		data.categories_id_selected = jQuery( 'input[name="categories_id_selected"]' ).val();
	}

	jQuery.post( ajaxurl, data, function( response ) {
		element.closest( '.activities' ).find( '.offset-event' ).val( response.data.offset );
		element.closest( '.activities' ).find( '.content:first' ).append( response.data.view );
		element.closest( '.activities' ).find( '.last-date' ).val( response.data.last_date );

		if ( response.data.end ) {
			element.closest( '.activities' ).find( '.load-more-history' ).hide();
		} else {
			element.closest( '.activities' ).find( '.load-more-history' ).show();
		}

		window.eoxiaJS.loader.remove( element.closest( '.activities' ).find( '.load-more-history' ) );
	} );
};

/**
 * Récupères les critères de recherche dans la navigation avant d'ouvrir la POPUP des dernières activitées.
 *
 * @since 1.5.0
 * @version 1.5.0
 *
 * @param  {Element} element L'élément déclenchant l'ouverture de la POPUP.
 * @return {Object}
 */
window.eoxiaJS.taskManager.activity.getDataBeforeOpenPopup = function( element ) {
	return {
		term: jQuery( '.wpeo-general-search input[type="text"]' ).val(),
		follower_id_selected: jQuery( '.wpeo-header-search .follower_id_selected' ).val(),
		categories_id_selected: jQuery( 'input[name="categories_id_selected"]' ).val()
	};
};

/**
 * Le callback en cas de réussite à la requête Ajax "load_last_activity".
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.5.0
 * @version 1.6.0
 */
window.eoxiaJS.taskManager.activity.loadedLastActivity = function( triggeredElement, response ) {

	if ( triggeredElement.closest( '.wpeo-project-task' ).length ) {
		var taskElement = triggeredElement.closest( '.wpeo-project-task' );
		triggeredElement.addClass( 'active' );
		triggeredElement.closest( '.tm-task-display-method-buttons' ).find( '.list-display.active' ).removeClass( 'active' );
		triggeredElement[0].closest( '.wpeo-project-task' ).querySelector( '.points' ).style.display = 'none';
		taskElement.find( '.bloc-activities' ).html( response.data.view ).show();
	} else{
		var element = triggeredElement.closest( '.inside' );
		element.html( response.data.view ).show();
		// jQuery( '#tm-indicator-activity .inside' ).html( response.data.view ); // 28/03/2019 Inutilisé ?
	};

	if( response.data.data_indicator != null && response.data.data_indicator != '' ){
		window.eoxiaJS.taskManager.activity.loadIndicatorActivity( response.data.data_indicator );
	}
};

window.eoxiaJS.taskManager.activity.loadIndicatorActivity = function( data ){

	if( document.getElementById( "tm_activity_post_indicator_doghnut_" + data[ 'task_id' ][ 0 ] ) !== null  ){
		jQuery( "#tm_activity_post_indicator_doghnut_" + data[ 'task_id' ][ 0 ] ).html( '<canvas id="tm_activity_post_indicator_doghnut' + data[ 'task_id' ][ 0 ] + '" class="wpeo-modal-event" ></canvas>' );

		var canvasDonut = document.getElementById( "tm_activity_post_indicator_doghnut" + data[ 'task_id' ][ 0 ] ).getContext('2d');

		var data_canvas_doghnut = {
			labels : [ window.indicatorString.completed, window.indicatorString.uncompleted ],
			datasets: [
					{
						backgroundColor: [ "#005387", "#ee6123" ],
						data: [ data[ 'count_completed_points' ], data[ 'count_uncompleted_points' ] ],
					}
				],
		};

		new Chart( canvasDonut, {
	    type: 'doughnut',
	    data: data_canvas_doghnut,
	    options: ''
		});
	}

};

/**
 * Le callback de la requête ajax "export_activity".
 *
 * @param  {HTMLButtonElement} triggeredElement L'élement HTML déclenchant la requête Ajax.
 * @param  {Object} response                    Les données renvoyées par la requête Ajax.
 *
 * @since 1.7.1
 */
window.eoxiaJS.taskManager.activity.exportedActivity = function( triggeredElement, response ) {
	window.eoxiaJS.global.downloadFile( response.data.url_to_file, response.data.filename );
};

/**
 * Initialise l'objet "task" ainsi que la méthode "init" obligatoire pour la bibliothèque EoxiaJS.
 *
 * @since 1.0.0
 * @version 1.5.0
 */
window.eoxiaJS.taskManager.audit = {};

window.eoxiaJS.taskManager.audit.init = function() {
	window.eoxiaJS.taskManager.audit.event();
	window.eoxiaJS.taskManager.audit.initAutoComplete();

	jQuery( '.tm_client_audit_list_task' ).colcade( {
		items: '.wpeo-project-task',
		columns: '.grid-col'
	} );

	window.eoxiaJS.taskManager.task.initAutoComplete();

};

window.eoxiaJS.taskManager.audit.refresh = function() {
	window.eoxiaJS.taskManager.task.initAutoComplete();
	window.eoxiaJS.taskManager.audit.initAutoComplete();
};


window.eoxiaJS.taskManager.audit.event = function() {
	jQuery( document ).on( 'click', '#tm_client_audit_backtomain', window.eoxiaJS.taskManager.audit.clientAuditBackToMain );
	jQuery( document ).on( 'click change', '.audit-search-customers', window.eoxiaJS.taskManager.audit.initAutoComplete );

	jQuery( document ).on( 'change keyup paste', '#tm_client_audit_title_new', window.eoxiaJS.taskManager.audit.checkIfTitleIsOk );
	jQuery( document ).on( 'change', '#tm_audit_client_date_deadline', window.eoxiaJS.taskManager.audit.checkIfDateIsOk );

	// jQuery( document ).on( 'click', '#tm_audit_client_button_accesstotask', window.eoxiaJS.taskManager.audit.accessToTaskView );

	jQuery( document ).on( 'click', '.tm-import-add-keyword-audit > .wpeo-button', window.eoxiaJS.taskManager.audit.addKeywordToTextarea );

	jQuery( document ).on( 'click', '#wpeo-task-metabox-auditlist h2 span .action-attribute', window.eoxiaJS.taskManager.audit.preventDefaultHeader );

	jQuery( document ).on( 'click', '#tm_audit_selector_search .dropdown-item', window.eoxiaJS.taskManager.audit.updateSearchSelect );

	jQuery( document ).on( 'click', '.tm-audit .audit-container .audit-header', window.eoxiaJS.taskManager.audit.displayInputAuditToEdit );

	jQuery( document ).on( 'click', '.tm-unlink-audit-parent', window.eoxiaJS.taskManager.audit.unlinkAuditParent );

	jQuery( document ).on( 'click', '.update-to-edit-view-audit', window.eoxiaJS.taskManager.audit.updateToEditViewAudit );

	// jQuery( document ).on( 'click', '.update-to-edit-view-audit .tm-valid-edit', )
};

window.eoxiaJS.taskManager.audit.initAutoComplete = function() {
	jQuery( '.audit-search-customers' ).autocomplete( {
		source: 'admin-ajax.php?action=search_client_for_audit',
		delay: 0,
		select: function( event, ui ) {
			var data = {
				action: 'customer_is_valid',
				customer_id: ui.item.id
			};

			jQuery( 'input[name="task_id"]' ).val( ui.item.id );
			jQuery( '.audit_search-customers-id' ).val( ui.item.id );

			event.stopPropagation();

			// window.eoxiaJS.request.send( jQuery( this ).closest( '.form' ), data );
			//jQuery( '#tm_client_audit_buttonsavetitle' ).removeClass( 'button-disable' );
		}
	} );
};


window.eoxiaJS.taskManager.audit.settingRefreshedPoint = function( triggeredElement, response ) {
	triggeredElement.closest( '.form' ).find( 'select' ).html( response.data.view );
};

window.eoxiaJS.taskManager.audit.startNewAudit = function( triggeredElement, response ){

	jQuery( '.tm_client_audit_main' ).css( 'display', 'none' );
	jQuery( '.tm_client_audit_edit' ).css( 'display', 'block' );

	jQuery( '.tm_client_audit_edit' ).html( response.data.view );

}

window.eoxiaJS.taskManager.audit.updateMainPage = function( triggeredElement, response ){
	jQuery( '.tm_client_audit_main' ).css( 'display', 'block' );
	jQuery( '.tm_client_audit_edit' ).css( 'display', 'none' );

	jQuery( '#tm_client_audit_listauditmain' ).html( response.data.view );
}

window.eoxiaJS.taskManager.audit.clientAuditBackToMain = function ( trigerredElement ){
	jQuery( '.tm_client_audit_main' ).css( 'display', 'block' );
	jQuery( '.tm_client_audit_edit' ).css( 'display', 'none' );
}

window.eoxiaJS.taskManager.audit.checkIfTitleIsOk = function( event ){ // If title and date

	var element = jQuery( '#tm_client_audit_title_new' );

	if( element.val() != jQuery( '#tm_client_audit_title_old' ).val() && element.val() != "" ){
		jQuery( '#tm_client_audit_buttonsavetitle' ).removeClass( 'button-disable' );
	}else{
		jQuery( '#tm_client_audit_buttonsavetitle' ).addClass( 'button-disable' );
	}
}

window.eoxiaJS.taskManager.audit.checkIfDateIsOk = function( event ){ // If title and date
	jQuery( '#tm_client_audit_buttonsavetitle' ).removeClass( 'button-disable' );
}

window.eoxiaJS.taskManager.audit.updateTitle = function( element, response ){
	//jQuery( '#tm_client_audit_title_old' ).val( response.data.title );
	//window.eoxiaJS.taskManager.audit.checkIfTitleIsOk();

	jQuery( element ).closest( '.audit-container' ).find( '.tm-audit-display-editmode' ).html( response.data.editview );
	jQuery( element ).closest( '.audit-container' ).find( '.tm-audit-display-readonly' ).html( response.data.readonlyview );

	jQuery( element ).closest( '.audit-container' ).find( '.tm-audit-display-editmode' ).hide();
	jQuery( element ).closest( '.audit-container' ).find( '.tm-audit-display-readonly' ).show();
	// window.eoxiaJS.loader.display( jQuery( this ).closest( '.audit-container' ) );
	window.eoxiaJS.loader.remove( jQuery( element ).closest( '.audit-container' ) );

}

window.eoxiaJS.taskManager.audit.displayShortcodeTask = function( element, response ){

	var elements = jQuery( response.data.view );

	jQuery( '#tm_audit_client_generate_tasklink' ).html( response.data.view );

}

window.eoxiaJS.taskManager.audit.viewMainPage = function( element, response ){
	jQuery( '.tm_client_audit_main' ).replaceWith( response.data.view );
	jQuery( '.tm_client_audit_edit' ).css( 'display', 'none' );
}

window.eoxiaJS.taskManager.audit.generateAuditIndicator = function( task_id, complet_point, uncomplet_point, audit_id, task_title ){

	jQuery( "#audit_client_indicator_" + audit_id ).append( '<div class="audit-chart-item wpeo-tooltip-event" aria-label="' + task_title +'"><canvas id="audit_client_indicator_task_' + task_id + '" class="wpeo-modal-event alignright" style=""></canvas></div>' );

	var canvasDonut = document.getElementById( "audit_client_indicator_task_" + task_id ).getContext('2d');

	if( complet_point == 0 && uncomplet_point == 0 ){
		var data_canvas_doghnut = {
			labels : [ window.indicatorString.taskempty, window.indicatorString.taskempty ],
			datasets: [
					{
						backgroundColor: [ '#D3D3D3', 'D3D3D3' ],
						data: [ 1, 0 ]
					}
				],
		};

	}else{

		var data_canvas_doghnut = {
			labels : [ window.indicatorString.completed, window.indicatorString.uncompleted ],
			datasets: [
					{
						backgroundColor: [ "#0099FF", "#5A5A5A" ],
						data: [ complet_point, uncomplet_point ],
					}
				],
		};
	}

	var option = {
		title: {
			display: true,
			text: '#' + task_id,
			position: 'bottom',
		},
		tooltips: {
			custom: function(tooltip) {
	    }
		},
		legend: {
      display: false
	   },


	};

	canvasDonut.canvas.width = 100;
	canvasDonut.canvas.height = 100;

	new Chart( canvasDonut, {
    type: 'doughnut',
    data: data_canvas_doghnut,
    options: option
	});
}


window.eoxiaJS.taskManager.audit.addKeywordToTextarea = function( event ) {
	var importContent = jQuery( this ).closest( '.tm-audit-import.modal-active' ).find( 'textarea' );
	var keyword       = '%' + jQuery( this ).attr( 'data-type' ) + '%';
	importContent.val( importContent.val() + '\r\n' + keyword );
};

window.eoxiaJS.taskManager.audit.createdAuditTaskSuccess = function ( trigerredElement, response ){
	jQuery( '#tm_audit_client_generate_tasklink .list-task' ).prepend( response.data.view );
}

window.eoxiaJS.taskManager.audit.importAuditTaskSuccess = function ( trigerredElement, response ){
	jQuery( '#tm_audit_client_generate_tasklink .list-task' ).prepend( response.data.view );
	jQuery( trigerredElement ).closest( '.modal-active' ).removeClass( 'modal-active' );

	if( response.data.category_info.length != 0 ){
		if( jQuery( '#tm_audit_client_generate_tasklink' ) ){
			jQuery.each( response.data.category_info, function( index, val ) {
				var content = "";
				var notice_content_start  = '<div class="wpeo-notice notice-warning" style="margin: 0 5em" data-taskid="' + val[ 'id' ] + '" data-tagname="' + val[ 'line' ] + '"><div class="notice-content"><div class="notice-title">';
				var notice_content_title  = window.indicatorString.cat_head;
				var notice_content_middle = '</div><div class="notice-subtitle">';
				var notice_content_body   = window.indicatorString.cat_body + '"<b>'+ val[ 'line' ] + '</b>" ' + window.indicatorString.cat_question;
				var notice_content_button = '<div class="tm-alert-category-not-found" style="float : right"> <div class="wpeo-button button-red" style="margin-right: 10px" data-doaction="delete" >' + window.indicatorString.cat_nothing + '</div>';
				notice_content_button     += '<div class="wpeo-button button-green" data-doaction="create">' + window.indicatorString.cat_create + '</div></div>';
				var notice_content_end    = '</div></div><div class="notice-close"><i class="fas fa-times"></i></div></div>';

				var content = notice_content_start + notice_content_title + notice_content_middle + notice_content_body + notice_content_button + notice_content_end;

			  jQuery( "#tm_audit_client_generate_tasklink" ).prepend( content );
			});
		}else{
			console.log( 'audit/asset/js/audit.backend.js : L.230' );
		}
	}
}

window.eoxiaJS.taskManager.audit.searchAuditFilter = function ( trigerredElement, response ){
	var data = response.data.list_audit;

	for( var i = 0; i < data.length; i ++ ){
		if( data[ i ][ 'valid' ] ){
			jQuery( '.tm_audit_item_' + data[ i ][ 'id' ] ).show();
		}else{
			jQuery( '.tm_audit_item_' + data[ i ][ 'id' ] ).hide();
		}
	}
}

window.eoxiaJS.taskManager.audit.preventDefaultHeader = function( event ){

	jQuery( '#wpeo-task-metabox-auditlist' ).removeClass( 'closed' );
}

window.eoxiaJS.taskManager.audit.updateSearchSelect = function( event ){
	jQuery( '#tm_audit_button_search' ).attr( 'data-modification', 'true' );
	var value = jQuery( this ).closest( '.dropdown-item' ).find( 'input[type="hidden"]').val();

	jQuery( this ).closest( '.wpeo-dropdown' ).find( '.tm_audit_search_hidden' ).val( value );
	jQuery( this ).closest( '.wpeo-dropdown' ).find( '.display-text-audit' ).html( jQuery( this ).html() );
}

window.eoxiaJS.taskManager.audit.displayInputAuditToEdit = function( event ){

}

window.eoxiaJS.taskManager.audit.unlinkAuditParent = function( event ){
	if( confirm( window.indicatorString.delink_audit ) ){
		var data = {
			action: jQuery( this ).data( 'action' ), // delink_parent_to_audit
			id : jQuery( this ).data( 'id' ),
			_wpnonce : jQuery( this ).data( 'nonce' )
		};

		window.eoxiaJS.loader.display( jQuery( this ).closest( '.audit-summary' ) );
		window.eoxiaJS.request.send( jQuery( this ), data );
	}
}

window.eoxiaJS.taskManager.audit.updateToEditViewAudit = function( event ){
	var edit_element = jQuery( this ).closest( '.audit-container' ).find( '.tm-audit-display-editmode' );
	var readonly_element = jQuery( this ).closest( '.audit-container' ).find( '.tm-audit-display-readonly' );
	if( jQuery( this ).data( 'editmode' ) == '0' ){
		jQuery( this ).data( 'editmode' ,'1' );
		jQuery( this ).find( '.tm-main-mode' ).hide();
		jQuery( this ).find( '.tm-valid-edit' ).show();

		jQuery( this ).closest( '.audit-container' ).find( '.tm-audit-display-readonly' ).hide();
		jQuery( this ).closest( '.audit-container' ).find( '.tm-audit-display-editmode' ).show();

	}else{
		jQuery( this ).data( 'editmode' ,'0' );
		jQuery( this ).find( '.tm-main-mode' ).show();
		jQuery( this ).find( '.tm-valid-edit' ).hide();

	  window.eoxiaJS.loader.display( jQuery( this ).closest( '.audit-container' ) );

		/*jQuery( this ).closest( '.audit-container' ).find( '.tm-audit-display-editmode' ).hide();
		jQuery( this ).closest( '.audit-container' ).find( '.tm-audit-display-readonly' ).show();*/
	}
}

window.eoxiaJS.taskManager.audit.delinkAuditParent = function( element, response ){
	jQuery( element ).closest( '.audit-summary' ).find( '.tm-display-audit-parent-link' ).hide();
	jQuery( element ).closest( '.audit-summary' ).find( '.tm-define-customer-to-audit' ).show();
}

window.eoxiaJS.taskManager.audit.audit_is_created = function( element, response ){
	jQuery( '#tm_client_audit_listauditmain' ).prepend( response.data.view );
}

window.eoxiaJS.taskManager.audit.deleteAudit = function( element, response ){
	var parent = jQuery( element ).closest( '.tm-audit' );
	parent.hide();
	console.log( parent );
}

/**
 * Initialise l'objet "task" ainsi que la méthode "init" obligatoire pour la bibliothèque EoxiaJS.
 *
 * @since 1.5.1
 * @version 1.6.0
 */
window.eoxiaJS.taskManager.taskExport = {};

window.eoxiaJS.taskManager.taskExport.init = function() {
	window.eoxiaJS.taskManager.taskExport.event();
};

window.eoxiaJS.taskManager.taskExport.event = function() {
	jQuery( document ).on( 'change', 'input[name=export_type]', window.eoxiaJS.taskManager.taskExport.displayDateForExport );
};

/**
 * Le callback en cas de réussite à la requête Ajax "load_export_popup".
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.6.0
 * @version 1.6.0
 */
window.eoxiaJS.taskManager.taskExport.loadedExportPopup = function( triggeredElement, response ) {
	jQuery( triggeredElement ).closest( '.wpeo-project-task' ).find( '.popup.popup-export .content' ).html( response.data.view );
	jQuery( triggeredElement ).closest( '.wpeo-project-task' ).find( '.popup.popup-export .container' ).removeClass( 'loading' );
};

/**
 * [description]
 * @method
 * @param  {[type]} $input [description]
 * @return {[type]}        [description]
 */
window.eoxiaJS.taskManager.taskExport.afterTriggerChangeDate = function( $input ) {
	$input.closest( '.group-date' ).find( '.date-display' ).html( $input.val() );
};

/**
 * [description]
 * @method
 * @param  {[type]} triggeredElement [description]
 * @return {[type]}                  [description]
 */
window.eoxiaJS.taskManager.taskExport.displayDateForExport = function( triggeredElement ) {
	if ( 'by_date' == jQuery( this ).val() ) {
		jQuery( '.tm_export_date_container' ).show();
	} else {
		jQuery( '.tm_export_date_container' ).hide();
	}
};

/**
 * Le callback en cas de réussite à la requête Ajax "export_task".
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.3.6
 * @version 1.6.0
 */
window.eoxiaJS.taskManager.taskExport.exportedTask = function( triggeredElement, response ) {
	jQuery( '.tm_export_result_container' ).find( 'textarea' ).html( response.data.content );
	jQuery( triggeredElement ).closest( '.wpeo-modal' ).find( '.modal-footer' ).html( response.data.time );
};

/**
 * Initialise l'objet "comment" ainsi que la méthode "init" obligatoire pour la bibliothèque EoxiaJS.
 *
 * @since 1.0.0
 * @version 1.6.0
 */
window.eoxiaJS.taskManager.comment = {};

/**
 * La méthode obligatoire pour la biblotèque EoxiaJS.
 *
 * @return {void}
 *
 * @since 1.0.0
 * @version 1.0.0
 */
window.eoxiaJS.taskManager.comment.init = function() {
	window.eoxiaJS.taskManager.comment.event();
};

/**
 * Initialise tous les évènements liés au comment de Task Manager.
 *
 * @return {void}
 *
 * @since 1.0.0
 * @version 1.5.0
 */
window.eoxiaJS.taskManager.comment.event = function() {
	jQuery( document ).on( 'keyup', '.comment div[contenteditable="true"], .comment input[name="time"]', window.eoxiaJS.taskManager.comment.triggerCreate );
	jQuery( document ).on( 'blur keyup paste keydown click', '.comments .comment .content', window.eoxiaJS.taskManager.comment.updateHiddenInput );
	jQuery( document ).on( 'click', '.point.edit', window.eoxiaJS.taskManager.comment.loadComments );

	jQuery( document ).on( 'click', '.wpeo-pagination.pagination-comment .pagination-element', window.eoxiaJS.taskManager.comment.paginationUpdateComments );

	jQuery( document ).on( 'change keyup input', '.comment .comment-container .comment-content-text div[contenteditable="true"]', window.eoxiaJS.taskManager.comment.autoCompleteWithFollowers );

	jQuery( document ).on( 'keydown', '.comment .comment-container .comment-content-text div[contenteditable="true"]', window.eoxiaJS.taskManager.comment.autoCompleteBlockEnter );
	jQuery( document ).on( 'click keyup', '.wpeo-tag ul .tm_list_administrator', window.eoxiaJS.taskManager.comment.choseFollowerAdmin );

	jQuery( document ).on( 'click', '.comment-container .comment-action .tm_register_comment', window.eoxiaJS.taskManager.comment.editComment );

	/*jQuery( document ).on( 'click', function( e ){
		if ( ! jQuery( event.target).closest( ".wpeo-project-task" ).length) {
			jQuery( '.point.edit' ).each( function (){
				if ( jQuery( this ).closest( 'div.point' ).find( '.comments' ).is( ':visible' ) ) {
					var element = jQuery( this ).closest( 'div.point' ).find( '.comments .comment-content-text input[type="hidden"]' ).val().trim();
					element = element.replace(/\s/g,"-");
					if( jQuery( this ).closest( 'div.point' ).find( '.comments .comment-content-text input[type="hidden"]' ).val().trim() != "" ){ // L'utilisateur est entrain d'écrire
						if( confirm( window.indicatorString.delete_text ) ){
							jQuery( 'div.point .comments:visible' ).slideUp( 400, function() {
								window.eoxiaJS.refresh();
							});
						}else{
							var div = jQuery( this ).closest( 'div.point' ).find( '.comments .comment-content-text div' );
							setTimeout(function() {
							    div.focus();
							}, 0);
						}
					}else{
						jQuery( 'div.point .comments:visible' ).slideUp( 400, function() {
							window.eoxiaJS.refresh();
						});
					}
				}
			})
    }
	} );*/
};

/**
 * Fermes les points.active ainsi que leurs commentaires
 *
 * @since 1.5.0
 * @version 1.5.0
 *
 * @return {void}
 */
window.eoxiaJS.taskManager.comment.closePoint = function( event ) {
	jQuery( '.point.active' ).removeClass( 'active' );
	if ( jQuery( 'div.point' ).find( '.comments' ).is( ':visible' ) ) {
		jQuery( 'div.point .comments:visible' ).slideUp( 400, function() {
			window.eoxiaJS.refresh();
		} );
	}
};

/**
 * Stop propagation afin d'éviter la fermeture du point.
 *
 * @since 1.5.0
 * @version 1.5.0
 *
 * @return {void}
 */
window.eoxiaJS.taskManager.comment.preventClosePoint = function( event ) {
	event.stopPropagation();
};

window.eoxiaJS.taskManager.comment.triggerCreate = function( event ) {
	if ( event.ctrlKey && 13 === event.keyCode ) {
		jQuery( this ).closest( '.comment' ).find( '.comment-container .comment-action .tm_register_comment' ).trigger( "click" );
	}
};

/**
 * Met à jour le champ caché contenant le texte du comment écris dans la div "contenteditable".
 *
 * @param  {MouseEvent} event L'évènement de la souris lors de l'action.
 * @return {void}
 *
 * @since 1.0.0
 * @version 1.6.0
 */
window.eoxiaJS.taskManager.comment.updateHiddenInput = function( event ) {
	if ( 0 < jQuery( this ).text().length ) {
		if( event.type == "click" || event.type == "keyup" || event.type == "keydown" ){
			jQuery( this ).closest( '.comment' ).find( '.placeholder' ).addClass( 'hidden' );
			jQuery( this ).closest( '.comment' ).removeClass( 'add' ).addClass( 'edit' );
			window.eoxiaJS.taskManager.core.initSafeExit( true );
		}
	} else {
		jQuery( this ).closest( '.comment' ).find( '.placeholder' ).removeClass( 'hidden' );
		jQuery( this ).closest( '.comment' ).removeClass( 'edit' ).addClass( 'add' );
		window.eoxiaJS.taskManager.core.initSafeExit( false );
	}

	jQuery( this ).closest( '.comment' ).find( 'input[name="content"]' ).val( jQuery( this ).html() );
};

/**
 * Charges les commentaires au clic sur le content editable.
 *
 * @param  {MouseEvent} event L'évènement du clic
 * @return {void}
 *
 * @since 1.3.6.0
 * @version 1.3.6.0
 */
window.eoxiaJS.taskManager.comment.loadComments = function( event ) {
	var data = {};

	data.action = 'load_comments';
	data.task_id = jQuery( this ).closest( '.wpeo-project-task' ).data( 'id' );
	data.point_id = jQuery( this ).closest( '.point' ).data( 'id' );

	if ( ! jQuery( this ).closest( 'div.point' ).find( '.comments' ).is( ':visible' ) ) {
		jQuery( 'div.point .comments:visible' ).slideUp( 400, function() {
			window.eoxiaJS.refresh();
		} );

		window.eoxiaJS.loader.display( jQuery( this ) );
		window.eoxiaJS.request.send( jQuery( this ), data );
	}
};

window.eoxiaJS.taskManager.comment.blurHideComments = function( event ){
	if ( jQuery( this ).closest( 'div.point' ).find( '.comments' ).is( ':visible' ) ) {
		jQuery( 'div.point .comments:visible' ).slideUp( 400, function() {
			window.eoxiaJS.refresh();
		} );
	}

}

/**
 * Le callback en cas de réussite à la requête Ajax "load_comments".
 * Met le contenu dans la div.comments.
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.0.0.0
 * @version 1.0.0.0
 */
window.eoxiaJS.taskManager.comment.loadedCommentsSuccess = function( triggeredElement, response ) {
	jQuery( triggeredElement ).closest( 'div.point' ).find( '.comments' ).html( response.data.view );
	jQuery( triggeredElement ).closest( 'div.point' ).find( '.comments .comment-container .auto-complete-user' ).html( response.data.follower_view );

	triggeredElement.removeClass( 'loading' );
	triggeredElement.closest( 'div.point' ).find( '.comments' ).slideDown( 400, function() {
		window.eoxiaJS.refresh();
	} );
};

/**
 * Le callback en cas de réussite à la requête Ajax "edit_comment".
 * Met le contenu dans la div.comments.
 *
 * @since 1.0.0
 * @version 1.5.0
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 */
window.eoxiaJS.taskManager.comment.addedCommentSuccess = function( triggeredElement, response ) {
	triggeredElement.closest( '.comment' ).find( 'div.content' ).html( '' );

	triggeredElement.closest( '.wpeo-project-task' ).find( '.wpeo-task-time-info .elapsed' ).text( response.data.time.task );
	triggeredElement.closest( '.comments' ).prev( '.form' ).find( '.wpeo-time-in-point' ).text( response.data.time.point );

	triggeredElement.closest( 'div.point' ).find( '.comments' ).html( response.data.view );
	jQuery( '.wpeo-project-task[data-id="' + response.data.comment.data.post_id + '"] .point[data-id="' + response.data.comment.data.parent_id + '"] .comment.new div.content' ).focus();
	jQuery( '.wpeo-project-task[data-id="' + response.data.comment.data.post_id + '"] .point[data-id="' + response.data.comment.data.parent_id + '"] .wpeo-point-summary .number-comments' ).html( response.data.point.data.count_comments );

	window.eoxiaJS.refresh();
	window.eoxiaJS.taskManager.core.initSafeExit( false );
};

/**
 * Le callback en cas de réussite à la requête Ajax "delete_comment".
 * Supprimes la ligne.
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.0.0
 * @version 1.5.0
 */
window.eoxiaJS.taskManager.comment.deletedCommentSuccess = function( triggeredElement, response ) {
	triggeredElement.closest( '.table-row' ).fadeOut();

	const comment = response.data.comment;

	jQuery( '.table-type-project[data-id=' + comment.data.post_id + '] .project-time .elapsed' ).text( response.data.time.task );
	jQuery( '.table-type-task[data-id=' + comment.data.parent_id + '] .task-time .elapsed' ).text( response.data.time.point );
	jQuery( '.table-type-task[data-id=' + comment.data.parent_id + '] .number-comments' ).text( response.data.comment.data.point.data.count_comments );

};

/**
 * Le callback en cas de réussite à la requête Ajax "load_edit_view_comment".
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.0.0.0
 * @version 1.0.0.0
 */
window.eoxiaJS.taskManager.comment.loadedEditViewComment = function( triggeredElement, response ) {
	jQuery( triggeredElement ).closest( '.comment' ).replaceWith( response.data.view );
	jQuery( '.wpeo-project-task.mask' ).removeClass( 'mask' );
};

window.eoxiaJS.taskManager.comment.afterTriggerChangeDate = function( $input ) {
	$input.closest( '.group-date' ).find( 'input[name="value_changed"]' ).val( 1 );
	$input.closest( '.group-date' ).find( 'div' ).attr( 'aria-label', $input.val() );
	$input.closest( '.group-date' ).find( 'span' ).css( 'background', '#389af6' );
};

window.eoxiaJS.taskManager.comment.paginationUpdateComments = function( event ) {
	var data = {};

	var pagination_parent = jQuery( this ).parent();

	data.action   = 'pagination_update_commments';
	data.page     = pagination_parent.data( 'page' );
	data.point_id = pagination_parent.data( 'point-id' );
	data.next     = jQuery( this ).data( 'pagination' );

	window.eoxiaJS.loader.display( jQuery( this ).parent() );
	window.eoxiaJS.request.send( jQuery( this ), data );
}

window.eoxiaJS.taskManager.comment.position_actual = 0;
window.eoxiaJS.taskManager.comment.autoCompleteWithFollowers = function( event ){
	if( jQuery( this ).html() != "" ){
	 	var position =  window.eoxiaJS.taskManager.comment.caretPositionIndex( event );

		var fullcontent = jQuery( this ).html().trim();
		var fullcontent_replace = fullcontent.replace(/<\/div>/g, "");
		fullcontent_replace = fullcontent_replace.replace(/&nbsp;/g, ' ');
		fullcontent_replace = fullcontent_replace.replace(/<br>/g, '');

		var fullcontent_array = fullcontent_replace.split('<div>');

	 	var mot_focus = window.eoxiaJS.taskManager.comment.getFocusWordContentEditableAutocomplete(fullcontent_array, position);
		var ashtag = "#";
		if( mot_focus.substr( 0, 1 ) == "@" && ! ashtag.includes(mot_focus) ){

			window.eoxiaJS.taskManager.comment.position_actual = position;
			var list = jQuery( this ).closest( '.comment-content' ).find( '.auto-complete-user .wpeo-tag ul' );
			if( event.keyCode == 13 ){ // Si la personne appuie sur entré
				if( list.find(".active").find( '.content-text' ) && list.find(".active" ).is(':visible') ){
					jQuery( list.find(".active") );
					id = list.find(".active").attr('data-id');
					if ( id !== undefined ){
						follower = list.find(".active").find( '.content-text' ).html().trim() + "#" + id;
					}else{
						follower = list.find(".active").find( '.content-text' ).html().trim();
					}
					var content = window.eoxiaJS.taskManager.comment.updateContentEditableAutocomplete( follower, fullcontent_array, position );

					window.eoxiaJS.taskManagerGlobal.quickTime.focusElementWhenPageLoad( jQuery( this ).html( content ) );
					jQuery( this ).closest( '.comment-content' ).find( '.auto-complete-user .wpeo-tag' ).hide();
					// window.eoxiaJS.taskManager.comment.searchFollowerInContentEditable( jQuery( this ) );
				}
				return;
			}

			jQuery( this ).closest( '.comment-content' ).find( '.auto-complete-user .wpeo-tag' ).show(); // Affiche l'auto complete
			var mot_focus = mot_focus.substr( 1 ); // Recupere le mot (sans le @)
			list.find("li:first").focus().addClass("active"); // Premier élement -> update de la couleur
			mot_focus = mot_focus.toLowerCase();

			var first_element = false;
			list.find( 'li' ).each( function(e){ // Pour chaque follower
				var element = jQuery( this ).find( '.content-text' ).html().trim();
				element = element.toLowerCase();
				if( element.includes(mot_focus) ){
					if( ! first_element ){
						first_element = true;
						jQuery( this ).addClass( 'active' );
					}else{
						jQuery( this ).removeClass( 'active' );
					}
					jQuery( this ).show();
				}else{
					jQuery( this ).removeClass( 'active' );
					jQuery( this ).hide();
				}
			});
		}else{
			jQuery( this ).closest( '.comment-content' ).find( '.auto-complete-user .wpeo-tag' ).hide();
		}
	}else{
		jQuery( this ).closest( '.comment-content' ).find( '.auto-complete-user .wpeo-tag' ).hide();
	}
}
window.eoxiaJS.taskManager.comment.getFocusWordContentEditableAutocomplete = function( fullcontent_array, position){
	var taille = 0;
	var mot_focus = "";
	for( var i = 0; i < fullcontent_array.length; i++){
	  if( fullcontent_array[i].length + taille >= position){
			position-= taille;
	    var mot = fullcontent_array[i].substring(0, position);
	    var mymot = mot.lastIndexOf(" ");
	    var mot_focus = mot.substring(mymot + 1);
	    break;
	  }else{
	    taille += fullcontent_array[i].length;
	  }
	}

	if( fullcontent_array[0] == ""){
		fullcontent_array.splice(0,1);
	}
	return mot_focus;
}
window.eoxiaJS.taskManager.comment.updateContentEditableAutocomplete = function( follower = "", content_array = [], position = 0 ){

	var taille = 0;
	for( var i = 0; i < content_array.length; i++){
	  if( content_array[i].length + taille >= position){
	    position-= taille;
	    var positionelement  = content_array[i].substring(0, position);
	    var index = positionelement.lastIndexOf(" ");

	    var preventelement = positionelement.substring(0, index) == "" ? "" : positionelement.substring(0, index) + "&nbsp;";
	    var nextelement = content_array[i].substring( position );

	    content_array[i] = preventelement + "@" + follower + "&nbsp;" + nextelement;
	    break;
	  }else{
	    taille += content_array[i].length;
	  }
	}

 var content = "";
	for( var i = 0; i < content_array.length; i++){
	  content += "<div>";
	  if ( content_array[i].length == "" ){
	    content += "<br>";
	  }else{
	    content += content_array[i];
	  }
	  content += "</div>";
	}

	return content;
}


window.eoxiaJS.taskManager.comment.autoCompleteBlockEnter = function( event ){
	if( event.keyCode == 13 ){
		var list = jQuery( this ).closest( '.comment-content' ).find( '.auto-complete-user .wpeo-tag' );
		if( list.is(':visible') && list.find(".active" ).is(':visible')){
			console.log( 'visible' );
			return false;
		}
	}
}

window.eoxiaJS.taskManager.comment.choseFollowerAdmin = function( event ){

	var content_element = jQuery( this ).closest( '.comment-content' ).find( '.comment-content-text div[contenteditable="true"]' );

	position = window.eoxiaJS.taskManager.comment.position_actual;

	var fullcontent = jQuery( content_element ).html().trim();
	var fullcontent_replace = fullcontent.replace(/<\/div>/g, "");
	fullcontent_replace = fullcontent_replace.replace(/&nbsp;/g, ' ');
	fullcontent_replace = fullcontent_replace.replace(/<br>/g, '');

	var fullcontent_array = fullcontent_replace.split('<div>');

	var mot_focus = window.eoxiaJS.taskManager.comment.getFocusWordContentEditableAutocomplete(fullcontent_array, position);
	mot_focus.substr( 0, 1 );

	if( jQuery( this ).find( '.content-text' ) ){
		id = jQuery( this ).attr('data-id');
		if ( id !== undefined ){
			follower = jQuery( this ).find( '.content-text' ).html().trim() + "#" + id;
		}else{
			follower = jQuery( this ).find( '.content-text' ).html().trim();
		}

		var content = window.eoxiaJS.taskManager.comment.updateContentEditableAutocomplete( follower, fullcontent_array, position );

		window.eoxiaJS.taskManagerGlobal.quickTime.focusElementWhenPageLoad( jQuery( content_element ).html( content ) );
		jQuery( this ).closest( '.wpeo-tag' ).hide(); // Cache l'auto complete
	}
}

window.eoxiaJS.taskManager.comment.searchFollowerInContentEditable = function( element ){
	var content = jQuery( element ).html();
	var fullcontent_replace = content.replace(/<\/div>/g, "");
	fullcontent_replace = fullcontent_replace.replace(/&nbsp;/g, ' ');
	var fullcontent = fullcontent_replace.replace(/<br>/g, '');

	var ul_element = jQuery( element ).closest( '.comment-content' ).find( '.auto-complete-user .wpeo-tag ul' );

	var list_notif = [];
	if( fullcontent.trim().includes('@everyone') ){ // Si everyone est tag, pas besoin de rechercher chaque personne
		list_notif.push( '-1' );
	}else{
		jQuery( ul_element.find( 'li' ) ).each( function( index ){
			var element_content = jQuery( this ).find( '.tm-user-data input[type="hidden"]' ).val().trim();
			var element_id = jQuery( this ).attr( 'data-id' );
			if( fullcontent.trim().includes(element_content.trim()) ){
				list_notif.push( element_id );
			}
		})
	}

	return list_notif;
}

window.eoxiaJS.taskManager.comment.editComment = function( event ){
	var data = {
		'mysql_date' : jQuery( this ).closest( '.comment-container' ).find( '.comment-meta .group-date .form-field-container .mysql-date' ).val(),
		'content' : jQuery( this ).closest( '.comment-container' ).find( '.comment-content-text input[type="hidden"]' ).val(),
		'post_id' : jQuery( this ).closest( '.comment' ).find( '[name=post_id]' ).val(),
		'parent_id' : jQuery( this ).closest( '.comment' ).find( '[name=parent_id]' ).val(),
		'comment_id' : jQuery( this ).closest( '.comment' ).find( '[name=comment_id]' ).val(),
		'time' : jQuery( this ).closest( '.comment-container' ).find( '.comment-meta input[name="time"]' ).val(),
		'parent' : 'comment',
		'action' : 'edit_comment'
	}

	var element = jQuery( this ).closest( '.comment-container' ).find( '.comment-content-text .content' );
	data.notif = window.eoxiaJS.taskManager.comment.searchFollowerInContentEditable( element );

	window.eoxiaJS.loader.display( jQuery( this ).closest( '.comment-container' ) );
	window.eoxiaJS.request.send( jQuery( this ), data );
}

window.eoxiaJS.taskManager.comment.caretPositionIndex = function( event ){
    const range = window.getSelection().getRangeAt(0);
    const { endContainer, endOffset } = range;

    // get contenteditableDiv from our endContainer node
    let contenteditableDiv;
    const contenteditableSelector = "div[contenteditable]";
    switch (endContainer.nodeType) {
      case Node.TEXT_NODE:
        contenteditableDiv = endContainer.parentElement.closest(contenteditableSelector);
        break;
      case Node.ELEMENT_NODE:
        contenteditableDiv = endContainer.closest(contenteditableSelector);
        break;
    }

    if (!contenteditableDiv) return '';

    const countBeforeEnd = countUntilEndContainer(contenteditableDiv, endContainer);
    if (countBeforeEnd.error ) return null;
    return countBeforeEnd.count + endOffset;

    function countUntilEndContainer(
    parent,
     endNode,
     countingState = {count: 0}
    ) {
      for (let node of parent.childNodes) {
        if (countingState.done) break;
        if (node === endNode) {
          countingState.done = true;
          return countingState;
        }
        if (node.nodeType === Node.TEXT_NODE) {
          countingState.count += node.length;
        } else if (node.nodeType === Node.ELEMENT_NODE) {
          countUntilEndContainer(node, endNode, countingState);
        } else {
          countingState.error = true;
        }
      }
      return countingState;
    }
  }

/**
 * Initialise l'objet "task" ainsi que la méthode "init" obligatoire pour la bibliothèque EoxiaJS.
 *
 * @since 1.0.0
 * @version 1.5.0
 */
window.eoxiaJS.taskManager.newComment = {};

window.eoxiaJS.taskManager.newComment.init = function() {
	window.eoxiaJS.taskManager.newComment.event();
};

window.eoxiaJS.taskManager.newComment.event = function() {
	jQuery( '.tm-wrap' ).on( 'blur', '.table-type-comment .comment-title', window.eoxiaJS.taskManager.newComment.editContent );
	jQuery( '.tm-wrap' ).on( 'blur', '.table-type-comment .comment-time', window.eoxiaJS.taskManager.newComment.editContent );
	jQuery( '.tm-wrap' ).on( 'blur', '.table-type-comment .group-date .date', window.eoxiaJS.taskManager.newComment.editContent );
};

window.eoxiaJS.taskManager.newComment.editContent = function() {
	var data = {};
	var element;

	if ( ! element ) {
		element = jQuery( this );
	}

	data.action     = 'edit_comment';
	data._wpnonce   = element.closest( '.table-row' ).data( 'nonce' );
	data.comment_id = element.closest( '.table-row' ).data( 'id' );
	data.post_id    = element.closest( '.table-row' ).data( 'post-id' );
	data.parent_id  = element.closest( '.table-row' ).data( 'parent-id' );
	data.time       = element.closest( '.table-row' ).find( '.comment-time' ).text();
	data.content    = element.closest( '.table-row' ).find( '.comment-title' ).html();
	data.mysql_date = element.closest( '.table-row' ).find( '.mysql-date' ).val();

	window.eoxiaJS.loader.display( element.closest( 'div' ) );
	window.eoxiaJS.request.send( element, data );
};

window.eoxiaJS.taskManager.newComment.addedCommentSuccess = function( triggeredElement, response ) {
	if ( ! response.data.toggle ) {
		this.loadedCommentsSuccess( triggeredElement, response );

		jQuery( '.table-type-task[data-id=' + response.data.point.data.id + '] .wpeo-util-hidden' ).removeClass( 'wpeo-util-hidden' );
		jQuery( '.table-type-task[data-id=' + response.data.point.data.id + '] .fas.fa-angle-right' ).removeClass( 'fa-angle-right' ).addClass( 'fa-angle-down' );
	} else {
		var tmp = jQuery( response.data.view );
		tmp.css({display: 'none'});
		jQuery( '.table-type-task[data-id=' + response.data.point.data.id + ']' ).after( tmp );
		tmp.slideDown(400);

		window.eoxiaJS.taskManager.core.selectContentEditable( tmp.find( '.comment-title' ) );
	}

	triggeredElement.closest( '.row-empty' ).remove();

	const comment = response.data.comment;

	jQuery( '.table-type-project[data-id=' + comment.data.post_id + '] .project-time .elapsed' ).text( response.data.time.task );
	jQuery( '.table-type-task[data-id=' + comment.data.parent_id + '] .task-time .elapsed' ).text( response.data.time.point );
	jQuery( '.table-type-task[data-id=' + comment.data.parent_id + '] .number-comments' ).text( response.data.point.data.count_comments );

	window.eoxiaJS.taskManager.newTask.stickyAction();
};

window.eoxiaJS.taskManager.newComment.editedCommentSuccess = function( triggeredElement, response ) {
	const comment = response.data.comment;

	jQuery( '.table-type-project[data-id=' + comment.data.post_id + '] .project-time .elapsed' ).text( response.data.time.task );
	jQuery( '.table-type-task[data-id=' + comment.data.parent_id + '] .task-time .elapsed' ).text( response.data.time.point );
};

/**
 * Le callback en cas de réussite à la requête Ajax "load_comments".
 * Met le contenu dans la div.comments.
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.0.0.0
 * @version 1.0.0.0
 */
window.eoxiaJS.taskManager.newComment.loadedCommentsSuccess = function( triggeredElement, response ) {
	var view = jQuery( response.data.view );
	view.css({display: 'none'});

	var row = triggeredElement.closest( '.table-row' );
	row.after(view);

	view.slideDown( 400 );

	triggeredElement.removeClass( 'loading' );

	if ( triggeredElement.hasClass( 'action-attribute' ) ) {
		triggeredElement.attr( 'data-toggle', true );
	}

	if ( 'addedCommentSuccess' == response.data.callback_success ) {
		window.eoxiaJS.taskManager.core.selectContentEditable( jQuery( '.table-type-comment[data-id=' + response.data.comment.data.id + '] .comment-title' ) );

	}

	window.eoxiaJS.taskManager.newTask.stickyAction();
};

/**
 * Initialise l'objet "point" ainsi que la méthode "follower" obligatoire pour la bibliothèque EoxiaJS.
 *
 * @since 1.0.0.0
 * @version 1.0.0.0
 */
window.eoxiaJS.taskManager.follower = {};

window.eoxiaJS.taskManager.follower.init = function() {
	window.eoxiaJS.taskManager.follower.event();
};

window.eoxiaJS.taskManager.follower.event = function() {
	jQuery( document ).on( 'click', '.showfullplanning', window.eoxiaJS.taskManager.follower.showfullplanning );

	jQuery( document ).on( 'hover', '.planninguser .tm-planning-add-row .table-cell', window.eoxiaJS.taskManager.follower.showMoreInformationAboutElement );

	jQuery( document ).on( 'hover', '.planninguser .wpeo-table .table-row .tm-action-delete-row-planning', window.eoxiaJS.taskManager.follower.showMoreInformationAboutElement );

	jQuery( document ).on( 'click', '.planninguser .tm-planning-add-row .table-cell .dropdown-content .dropdown-item', window.eoxiaJS.taskManager.follower.selectItemFromDropdownPlanning );

	jQuery( document ).on( 'click', '.planninguser .tm-planning-add-row .tm-planning-action', window.eoxiaJS.taskManager.follower.prepareRequestToAddRow );

	jQuery( document ).on( 'click', '.planninguser .tm-planning-add-row .tm-planning-period .dropdown-content .dropdown-item', window.eoxiaJS.taskManager.follower.selectItemFromDropdownAutoUpdateHour );

	jQuery( document ).on( 'click', '.planninguser .tm-expand-table', window.eoxiaJS.taskManager.follower.expandTableIndicator);

	jQuery( document ).on( 'click', '.planninguser .tm-modal-archive', window.eoxiaJS.taskManager.follower.modalArchiveRequest);

	jQuery( document ).on( 'click', '.planninguser .wpeo-table .table-row .tm-action-delete-row-planning', window.eoxiaJS.taskManager.follower.deleteActionRowPlanning );

	jQuery( document ).on( 'click', '.planninguser .tm-information-run-for-another-day .tm-information-notice-action > .wpeo-button', window.eoxiaJS.taskManager.follower.informationNoticeActionToRerunForAnotherDay );

	jQuery( document ).on( 'click', '.planninguser .tm-information-run-for-another-day .tm-information-notice-day > .wpeo-button', window.eoxiaJS.taskManager.follower.validThisDay );

	jQuery( document ).on( 'click', '.planninguser .tm-date-end-contract input[ type="radio"]', window.eoxiaJS.taskManager.follower.selectTypeDateEnd );

	jQuery( document ).on( 'click', '.planninguser .tm-display-new-contract', window.eoxiaJS.taskManager.follower.displayNewContract );


	jQuery( document ).on( 'click', '.planninguser .tm-date-end-contract .group-date input[ type="text"]', window.eoxiaJS.taskManager.follower.focusDateChamp );

	jQuery( document ).on( 'change', '.planninguser .tm-table-planning .tm-contract-planning-dynamic-update', window.eoxiaJS.taskManager.follower.updateHourPerDay );

 };

/**
 * Le callback en cas de réussite à la requête Ajax "load_followers".
 * Remplaces le contenu de l'element cliqué par la vue reçu dans la réponse AJAX.
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.0.0.0
 * @version 1.0.0.0
 */
window.eoxiaJS.taskManager.follower.loadedFollowersSuccess = function( element, response ) {
	element.closest( '.wpeo-ul-users' ).replaceWith( response.data.view );
	window.eoxiaJS.refresh();
};

/**
 * Le callback en cas de réussite à la requête Ajax "close_followers_edit_mode".
 * Remplaces le contenu de l'element cliqué par la vue reçu dans la réponse AJAX.
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.0.0.0
 * @version 1.0.0.0
 */
window.eoxiaJS.taskManager.follower.closedFollowersEditMode = function( element, response ) {
	element.closest( '.wpeo-ul-users' ).replaceWith( response.data.view );
	window.eoxiaJS.refresh();
	window.eoxiaJS.taskManager.newTask.clickUsers();
};

/**
 * Cette méthode est appelé automatiquement lors du clique sur une catégorie a affecter.
 *
 * @param  {HTMLUListElement} element L'élément déclenchant la méthode au clique.
 * @return {void}
 *
 * @since 1.0.0.0
 * @version 1.3.6.0
 */
window.eoxiaJS.taskManager.follower.beforeAffectFollower = function( element ) {
	element.addClass( 'active' );

	return true;
};

/**
 * Cette méthode est appelé automatiquement lors du clique sur une catégorie a désaffecter.
 *
 * @param  {HTMLUListElement} element L'élément déclenchant la méthode au clique.
 * @return {void}
 *
 * @since 1.0.0.0
 * @version 1.3.6.0
 */
window.eoxiaJS.taskManager.follower.beforeUnaffectFollower = function( element ) {
	element.removeClass( 'active' );

	return true;
};

/**
 * Le callback en cas de réussite à la requête Ajax "follower_affectation".
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.0.0.0
 * @version 1.0.0.0
 */
window.eoxiaJS.taskManager.follower.affectedFollowerSuccess = function( element, response ) {
	element.attr( 'data-action', 'follower_unaffectation' );
	element.attr( 'data-before-method', 'beforeUnaffectFollower' );
	element.attr( 'data-nonce', response.data.nonce );
};

/**
 * Le callback en cas de réussite à la requête Ajax "follower_unaffectation".
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.0.0.0
 * @version 1.0.0.0
 */
window.eoxiaJS.taskManager.follower.unaffectedFollowerSuccess = function( element, response ) {
	element.attr( 'data-action', 'follower_affectation' );
	element.attr( 'data-before-method', 'beforeAffectFollower' );
	element.attr( 'data-nonce', response.data.nonce );
};

window.eoxiaJS.taskManager.follower.showfullplanning = function( event ){
	jQuery( '.showfullplanning' ).css( 'display', 'none' );
}

window.eoxiaJS.taskManager.follower.reloadPlanningUser = function( element, response ){
	jQuery( '.planninguser' ).replaceWith( response.data.view );
}

window.eoxiaJS.taskManager.follower.showMoreInformationAboutElement = function( event ){
	var this_class= '.' + jQuery( this ).attr('data-class');

	jQuery( '.planninguser .tm-information-planning .tm-focus-element' ).hide();
	jQuery( '.planninguser .tm-information-planning .tm-focus-element' ).removeClass( 'tm-focus-element' );

	jQuery( '.planninguser .tm-information-planning ' + this_class ).show();
	jQuery( '.planninguser .tm-information-planning ' + this_class ).addClass( 'tm-focus-element' );
}

window.eoxiaJS.taskManager.follower.selectItemFromDropdownPlanning = function( event ){
	jQuery( this ).closest( '.table-cell' ).find( '.tm-planning-display-day' ).html( jQuery( this ).html() );
	jQuery( this ).closest( '.table-cell' ).find( 'input[ type="hidden"]' ).val( jQuery( this ).attr( 'data-select' ) );
}

window.eoxiaJS.taskManager.follower.selectItemFromDropdownAutoUpdateHour = function( event ){
	var from = '09:00';
	var to = '12:00';

	if( jQuery( this ).attr( 'data-select' ) == "afternoon" ){
		from = '14:00';
		to = '18:00';
	}

	jQuery( this ).closest( '.tm-planning-add-row' ).find( '.tm-planning-work-from input' ).val( from );
	jQuery( this ).closest( '.tm-planning-add-row' ).find( '.tm-planning-work-to input' ).val( to );
}

window.eoxiaJS.taskManager.follower.prepareRequestToAddRow = function( event ){
	var data = {};
	var valid = {};

	var name = jQuery( this ).closest( '.tm-planning-add-row' ).find( '.tm-planning-custom-name input[name="name"]' );
	valid[ 'name' ] = window.eoxiaJS.taskManager.follower.inputIsValid( name );

	var work_from = jQuery( this ).closest( '.tm-planning-add-row' ).find( '.tm-planning-work-from input[name="work_from"]' );
	valid[ 'work_from' ] = window.eoxiaJS.taskManager.follower.inputIsValid( work_from );

	var work_to = jQuery( this ).closest( '.tm-planning-add-row' ).find( '.tm-planning-work-to input[name="work_to"]' );
	valid[ 'work_to' ] = window.eoxiaJS.taskManager.follower.inputIsValid( work_to );

	var day_start = jQuery( this ).closest( '.tm-planning-add-row' ).find( '.tm-planning-day-start input[name="day_start"]' );
	valid[ 'day_start' ] = window.eoxiaJS.taskManager.follower.inputIsValid( day_start );

	if( valid[ 'name' ] && valid[ 'work_from' ] && valid[ 'work_to' ] && valid[ 'day_start' ] ){

		data.name      = jQuery( this ).closest( '.tm-planning-add-row' ).find( '.tm-planning-custom-name input[ name="name"]' ).val();
		data.day       = jQuery( this ).closest( '.tm-planning-add-row' ).find( '.tm-planning-dropdown-day input[ name="day"]' ).val();
		data.period    = jQuery( this ).closest( '.tm-planning-add-row' ).find( '.tm-planning-period input[ name="period"]' ).val();
		data.work_from = jQuery( this ).closest( '.tm-planning-add-row' ).find( '.tm-planning-work-from input[ name="work_from"]' ).val();
		data.work_to   = jQuery( this ).closest( '.tm-planning-add-row' ).find( '.tm-planning-work-to input[ name="work_to"]' ).val();
		data.day_start = jQuery( this ).closest( '.tm-planning-add-row' ).find( '.tm-planning-day-start input[ name="day_start"]' ).val();
		data.action    = jQuery( this ).attr( 'data-action' );
		data._wpnonce  = jQuery( this ).attr( 'data-wpnonce' );

		window.eoxiaJS.loader.display( jQuery( this ).closest( '.tm-planning-add-row' ) );
		window.eoxiaJS.request.send( jQuery( this ), data );
	}
}

window.eoxiaJS.taskManager.follower.inputIsValid = function( element ){
	if( element.val().trim() == "" ){
		element.css( {'border' : '2px solid #ff3232'} );
		return false;
	}
	return true;
}

window.eoxiaJS.taskManager.follower.reloadPlanningUserIndicator = function( element, response ){
	var information_element = jQuery( element ).closest( '.planninguser' ).find( '.tm-information-status-request .notice-success' );
	information_element.css( 'display', 'flex' );
	information_element.find( '.notice-title' ).html( response.data.action_text );

	if( response.data.view_rerun != "" ){
		jQuery( element ).closest( '.planninguser' ).find( '.tm-information-run-for-another-day' ).removeClass( 'wpeo-loader' ).show();
	}
	jQuery( element ).closest( '.planninguser' ).find( '.tm-information-run-for-another-day' ).html( response.data.view_rerun );
	var elm = jQuery( element ).closest( '.planninguser' ).find( '.tm-table-planning' );
	jQuery( element ).closest( '.planninguser' ).find( '.tm-table-planning' ).replaceWith( response.data.view );
}


window.eoxiaJS.taskManager.follower.expandTableIndicator = function( event ){
	if( jQuery( this ).attr( 'data-expand' ) == "true" ){
		jQuery( '.planninguser .wpeo-table.table-flex .table-cell' ).css( 'padding', '0.1em 0.6em' );
		jQuery( '.planninguser .wpeo-table.table-flex .tm-planning-add-row .table-cell' ).css( 'padding', '0.8em 0.6em' );
		jQuery( this ).attr( 'data-expand', 'false' );
		jQuery( this ).find( '.wpeo-button' ).removeClass( 'button-grey' ).addClass( 'button-blue');
	}else{
		jQuery( '.planninguser .wpeo-table.table-flex .table-cell' ).css( 'padding', '0.8em 0.6em' );
		jQuery( this ).attr( 'data-expand', 'true' );
		jQuery( this ).find( '.wpeo-button' ).removeClass( 'button-blue' ).addClass( 'button-grey');
	}
}

window.eoxiaJS.taskManager.follower.deleteActionRowPlanning = function ( event ){
	var default_color = jQuery( this ).closest( '.table-row' ).css( 'background-color' );
	jQuery( this ).closest( '.table-row' ).css( 'background-color', 'red' );
	var element = jQuery( this );

	setTimeout(function(){
		if ( window.confirm( element.attr( 'data-message-delete' ) ) ) {
			data = {};
			data.action   = 'delete_element_from_planning_user';
			data._wpnonce = element.attr( 'data-wpnonce' );
			data.day      = element.attr( 'data-day' );
			data.period   = element.attr( 'data-period' );
			window.eoxiaJS.loader.display( element.closest( '.table-row' ) );
			window.eoxiaJS.request.send( element, data );

		}else{
			element.closest( '.table-row' ).css( 'background-color', default_color );
		}
	}, 1);
}

window.eoxiaJS.taskManager.follower.informationNoticeActionToRerunForAnotherDay = function( event ){
	var action = jQuery( this ).attr( 'data-actionjs' );
	if( action == "hide" ){
		jQuery( this ).closest( '.tm-information-run-for-another-day' ).hide( '200' );
	}else if( action == "request" ){
		data = {};
		data.action   = jQuery( this ).attr( 'data-action' );
		data._wpnonce = jQuery( this ).attr( 'data-wpnonce' );

		var parent_element = jQuery( this ).closest( '.tm-information-run-for-another-day' ).find( '.tm-information-secret-element' );
		data.name      = parent_element.find( 'input[ name="name"]' ).val();
		data.period    = parent_element.find( 'input[ name="period"]' ).val();
		data.work_from = parent_element.find( 'input[ name="from"]' ).val();
		data.work_to   = parent_element.find( 'input[ name="to"]' ).val();
		data.day_start = parent_element.find( 'input[ name="daystart"]' ).val();

		data.day = [];
		var parent_button_element = jQuery( this ).closest( '.wpeo-notice' ).find( '.notice-subtitle .tm-information-notice-day' );
		parent_button_element.find( '.wpeo-button' ).each( function( e ){
			if( jQuery( this ).attr( 'data-valid' ) == "true" ){
				data.day.push( jQuery( this ).attr( 'data-day' ) );
			}
		})

		var element_focus =  jQuery( this ).closest( '.planninguser' ).find( '.tm-planning-add-row .tm-planning-action' );
		window.eoxiaJS.loader.display( jQuery( this ).closest( '.tm-information-run-for-another-day' ) );
		window.eoxiaJS.request.send( element_focus, data );
	}else{

	}
}

window.eoxiaJS.taskManager.follower.validThisDay = function(){
	if( jQuery( this ).attr( 'data-valid' ) == "true" ){
		jQuery( this ).attr( 'data-valid', 'false' );
		jQuery( this ).removeClass( 'button-blue' ).addClass( 'button-grey' );
		jQuery( this ).find( '.button-icon' ).removeClass( 'fa-check-square' ).addClass( 'fa-square' );
	}else{
		jQuery( this ).attr( 'data-valid', 'true' );
		jQuery( this ).removeClass( 'button-grey' ).addClass( 'button-blue' );
		jQuery( this ).find( '.button-icon' ).removeClass( 'fa-square' ).addClass( 'fa-check-square' );
	}
}

window.eoxiaJS.taskManager.follower.modalArchiveRequest = function( event ){
	data = {};
	data.action   = jQuery( this ).attr( 'data-action' );
	data._wpnonce = jQuery( this ).attr( 'data-wpnonce' );

	window.eoxiaJS.loader.display( jQuery( this ) );
	window.eoxiaJS.request.send( jQuery( this ), data );
}

window.eoxiaJS.taskManager.follower.displayAchiveUser = function( element, response ){
	element.closest( '.tm-modal-archive' ).find( '.tm-information-modal-view' ).html( response.data.view );
}

window.eoxiaJS.taskManager.follower.selectTypeDateEnd = function( event ){
	var input = jQuery( '#tm-date-end-value' );
	input.val( jQuery( this ).attr( 'data-type' ) );
}

window.eoxiaJS.taskManager.follower.reloadViewProfilePlanning = function( element, response ){
	element.closest( '.planninguser' ).replaceWith( response.data.info.view );
}

window.eoxiaJS.taskManager.follower.reloadViewProfilePlanningError = function( element, response ){
	var text_error = response.data.info.data.error;
	if( text_error != "" ){
		element.closest( '.planninguser' ).find( '.tm-user-add-contract-error' ).show( '200' );
		element.closest( '.planninguser' ).find( '.tm-user-add-contract-error .notice-title' ).html( text_error );
	}
}

window.eoxiaJS.taskManager.follower.displayNewContract = function( event ){
	jQuery( this ).closest( '.planninguser' ).find( '.tm-user-add-contract' ).show( '200' );
}

window.eoxiaJS.taskManager.follower.reloadViewProfileContract = function( element, response ){

	element.closest( '.planninguser' ).find( '.tm-list-contract-button .tm-table-edit' ).remove();
	element.closest( '.planninguser' ).find( '.tm-list-contract-button .tm-hidden-row' ).removeClass( 'tm-hidden-row' ).show();
	element.closest( '.planninguser' ).find( '.tm-user-add-contract' ).html( '' );

	element.closest( '.planninguser' ).find( '.tm-contract-info-empty' ).hide( '200' );
	if( response.data.id > 0 ){
		element.closest( '.planninguser' ).find( '.tm-list-contract-button .table-row[ data-id ="' + response.data.id + '"]' ).before( response.data.view );

		element.closest( '.planninguser' ).find( '.tm-list-contract-button .table-row[ data-id ="' + response.data.id + '"]' ).after( response.data.view_edit );

		element.closest( '.planninguser' ).find( '.tm-list-contract-button .table-row[ data-id ="' + response.data.id + '"]' ).addClass( 'tm-hidden-row' ).hide();
	}else{
		element.closest( '.planninguser' ).find( '.tm-user-add-contract' ).html( response.data.view );
	}
}

window.eoxiaJS.taskManager.follower.focusDateChamp = function( event ){
	jQuery( "#tm-radio-contract-date" ).prop("checked", true);
	jQuery( "#tm-radio-contract-actual" ).prop("checked", false);
	jQuery( '#tm-date-end-value' ).val( 'sql' );
}

window.eoxiaJS.taskManager.follower.updateHourPerDay = function( event ){

	var table_element = jQuery( this ).closest( '.tm-table-planning' );
	var day = jQuery( this ).parent().attr( 'data-day' );
	var element = jQuery( this ).val();

	var total_minute = 0;
	table_element.find( '.tm-contract-planning-from' ).each( function( e ){
		if( jQuery( this ).parent().attr( 'data-day' ) == day ){
			from = jQuery( this ).parent().find( '[data-work="from"]').val();
			to = jQuery( this ).parent().find( '[data-work="to"]').val();

			from = window.eoxiaJS.taskManager.follower.fromTimeToMinute( from );
			to = window.eoxiaJS.taskManager.follower.fromTimeToMinute( to );

			if( from > to ){
				from = jQuery( this ).parent().find( '[data-work="from"]').val( jQuery( this ).parent().find( '[data-work="to"]').val() );
				from = to;
			}
			var tempval = isNaN( to - from ) ? 0 : to - from;
			total_minute += tempval;
		}
	});

	table_element.find( '.table-header [data-title="' + day + '"] .tm-minute-per-day span' ).html( total_minute );

}

window.eoxiaJS.taskManager.follower.fromTimeToMinute = function fromTimeToMinute(time) {
  var timeArray = time.toString().split(':');
  var hours = parseInt(timeArray[0]);
  var minutes = parseInt(timeArray[1]);
  return (hours * 60) + minutes;
}

//
//
//
//
//
//
//
//
//
//
//
//
//

/**
 * Initialise l'objet "historyTime" ainsi que la méthode "init" obligatoire pour la bibliothèque EoxiaJS.
 *
 * @since 1.0.0
 * @version 1.0.0
 */
window.eoxiaJS.taskManager.historyTime = {};

/**
 * La méthode obligatoire pour la biblotèque EoxiaJS.
 *
 * @return {void}
 *
 * @since 1.0.0
 * @version 1.0.0
 */
window.eoxiaJS.taskManager.historyTime.init = function() {
	window.eoxiaJS.taskManager.historyTime.event();
};

/**
 * Initialise tous les évènements liés au historyTime de Task Manager.
 *
 * @return {void}
 *
 * @since 1.0.0
 * @version 1.6.0
 */
window.eoxiaJS.taskManager.historyTime.event = function() {};

/**
 * Le callback en cas de réussite à la requête Ajax "load_history_time".
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.0.0
 * @version 1.0.0
 */
window.eoxiaJS.taskManager.historyTime.loadedTimeHistorySuccess = function( element, response ) {
	jQuery( element ).closest( '.table-column' ).find( '.popup .content' ).html( response.data.view );
	jQuery( element ).closest( '.table-column' ).find( '.popup .container' ).removeClass( 'loading' );
};

/**
 * Le callback en cas de réussite à la requête Ajax "create_history_time".
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.0.0
 * @version 1.0.0
 */
window.eoxiaJS.taskManager.historyTime.createdHistoryTime = function( element, response ) {
	jQuery( 'body' ).find( '.wpeo-modal .modal-container .modal-content .history-time-container' ).replaceWith( response.data.history_time_view );

	jQuery( '.table-type-project[data-id=' + response.data.task_id + '] .table-cell.project-time' ).replaceWith( response.data.task_header_view );
};

/**
 * Le callback en cas de réussite à la requête Ajax "delete_history_time".
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.0.0
 * @version 1.0.0
 */
window.eoxiaJS.taskManager.historyTime.deletedHistoryTime = function( element, response ) {
	jQuery( element ).closest( '.list-element' ).fadeOut();
	jQuery( '.table-type-project[data-id=' + response.data.task_id + '] .table-cell.project-time' ).replaceWith( response.data.task_header_view );


};

/**
 * Initialise l'objet "import" ainsi que la méthode "init" obligatoire pour la bibliothèque EoxiaJS.
 *
 * @since 1.7.0
 * @version 1.7.0
 */
window.eoxiaJS.taskManager.import = {};

window.eoxiaJS.taskManager.import.init = function() {
	window.eoxiaJS.taskManager.import.event();
};

window.eoxiaJS.taskManager.import.event = function() {
	jQuery( document ).on( 'click', '.tm-import-add-keyword > .wpeo-button', window.eoxiaJS.taskManager.import.addKeywordToTextarea );
	jQuery( document ).on( 'click', '.tm-alert-category-not-found > .wpeo-button', window.eoxiaJS.taskManager.import.updateCategoryNotFound );
	jQuery( document ).on( 'click', '.wpeo-notice .notice-close', window.eoxiaJS.taskManager.import.hideThisWpeoNotice );
	jQuery( document ).on( 'keyup', '.tm-import-add-keyword .tm-info-import-link input', window.eoxiaJS.taskManager.import.updateImportTextFromUrl );

};

/**
 * Callback de l'import des tâches.
 *
 * @return void
 */
window.eoxiaJS.taskManager.import.importSuccess = function( element, response ) {
	if( response.data.category_info.length != 0 ){
		if( jQuery( '.wpeo-wrap tm-wrap' ) ){
			jQuery.each( response.data.category_info, function( index, val ) {
				var content = "";
				var notice_content_start  = '<div class="wpeo-notice notice-warning" style="margin: 0 5em" data-taskid="' + val[ 'id' ] + '" data-tagname="' + val[ 'line' ] + '"><div class="notice-content"><div class="notice-title">';
				var notice_content_title  = window.indicatorString.cat_head;
				var notice_content_middle = '</div><div class="notice-subtitle">';
				var notice_content_body   = window.indicatorString.cat_body + '"<b>'+ val[ 'line' ] + '</b>" ' + window.indicatorString.cat_question;
				var notice_content_button = '<div class="tm-alert-category-not-found" style="float : right"> <div class="wpeo-button button-red" style="margin-right: 10px" data-doaction="delete" >' + window.indicatorString.cat_nothing + '</div>';
				notice_content_button     += '<div class="wpeo-button button-green" data-doaction="create">' + window.indicatorString.cat_create + '</div></div>';
				var notice_content_end    = '</div></div><div class="notice-close"><i class="fas fa-times"></i></div></div>';

				var content = notice_content_start + notice_content_title + notice_content_middle + notice_content_body + notice_content_button + notice_content_end;

			  jQuery( ".wpeo-wrap" ).prepend( content );
			});
		}else{
			console.log( 'import/asset/js/import.backend.js : L.29' );
		}
	}
	if ( 'tasks' === response.data.type ) {
		window.eoxiaJS.taskManager.task.createdTaskSuccess( element, response );
	} else if ( 'points' === response.data.type ) {
		var task = jQuery( "div.wpeo-project-task[data-id='" + response.data.task_id + "']" );

		task.find( '.total-point' ).text( response.data.task.data.count_all_points );
		task.find( '.points.sortable .point:last' ).before( response.data.view );

		window.eoxiaJS.taskManager.point.initAutoComplete();
		window.eoxiaJS.refresh();
		window.eoxiaJS.taskManager.core.initSafeExit( false );

		task.find( '.wpeo-task-filter .point-uncompleted' ).html( response.data.task.data.count_uncompleted_points );
	}

	window.eoxiaJS.taskManager.task.initAutoComplete();

	window.eoxiaJS.modal.close();
};

/**
 * Fonction permettant d'insérer un mot clés dans le textarea contenant les données à importer
 */
window.eoxiaJS.taskManager.import.addKeywordToTextarea = function( event ) {
	var importContent = jQuery( this ).closest( '.tm-import-tasks.modal-active' ).find( 'textarea' );

	if( ! importContent.length ){
		importContent = jQuery( this ).closest( '.tm-audit-import.modal-active' ).find( 'textarea' );
	}
	var keyword = "";

	if( jQuery( this ).attr( 'data-type' ) == "category" ){
		keyword = window.eoxiaJS.taskManager.import.tagKeywordToTextarea( this, importContent );
		importContent.focus().val( importContent.val() + '\r\n' + keyword );

	}else if( jQuery( this ).attr( 'data-type' ) == "link" ){
		window.eoxiaJS.taskManager.import.buttonLinkExternalText( jQuery( this ), importContent );
	}else{
		keyword = '%' + jQuery( this ).attr( 'data-type' ) + '%';
		importContent.focus().val( importContent.val() + '\r\n' + keyword );
	}
};

window.eoxiaJS.taskManager.import.tagKeywordToTextarea = function( element, importContent ){
	var content = importContent.val();
	var tag_content = jQuery( element ).closest( '.tm-import-add-keyword' ).find( 'select option:selected' ).val();

	if( tag_content === undefined ){
		tag_content = "";
	}
	return keyword  = '%category%' + tag_content;
}

window.eoxiaJS.taskManager.import.updateCategoryNotFound = function( event ){
	var action         = jQuery( this ).attr( 'data-doaction' );
	var element_parent = jQuery( this ).closest( '.wpeo-notice' );

	if( action == "create" ){

		var data         = {};
		data.action         = 'category_not_found_so_create_it';
		data.task_id        = element_parent.attr( 'data-taskid' ); //
		data.category_name  = element_parent.attr( 'data-tagname' );

		window.eoxiaJS.loader.display( jQuery( this ) );
		window.eoxiaJS.request.send( jQuery( this ), data );
	}else{
		element_parent.hide( 500 );
	}
}

window.eoxiaJS.taskManager.import.update_footer_task_category = function( element, response ){
	var element_parent = jQuery( element ).closest( '.wpeo-notice' );
	element_parent.hide();

	jQuery( '.list-task' ).find( '.wpeo-project-task' ).each(function( element ) {
		if( jQuery( this ).attr( 'data-id' ) == response.data.taskid ){
			jQuery( this ).find( '.wpeo-task-footer .wpeo-tag-wrap' ).not( '.wpeo-ul-parent' ).replaceWith( response.data.footertask );
		}else{
			// console.log( jQuery( this ).attr( 'data-id' ) );
		}
	});
}

window.eoxiaJS.taskManager.import.hideThisWpeoNotice = function( event ){
	var element_parent = jQuery( this ).closest( '.wpeo-notice' );
	element_parent.hide( 500 );
}

window.eoxiaJS.taskManager.import.buttonLinkExternalText = function( element, importContent ){

	if( element.closest( '.tm-import-add-keyword' ).find( '.tm-info-import-link input' ).attr( 'data-import' ) == "true" ){
		//send request
		var data         = {};
		data.action  = 'get_text_from_url_tm';
		data.content = element.closest( '.tm-import-add-keyword' ).find( '.tm-info-import-link input' ).val(); // On recupere le contenu

		window.eoxiaJS.loader.display( element );
		window.eoxiaJS.request.send( element, data );
	}else{
		if( element.attr( 'data-link' ) == "no"){
			element.find( '.tm_save_backup' ).val( importContent.val() ); // On recupere le contenu

			var next_step = 'yes';
			element.removeClass( 'button-grey' ).addClass( 'button-green' );
			element.closest( '.tm-import-add-keyword' ).find( '.tm-info-import-link' ).show( '200' );
		}else{
			importContent.focus().val( element.find( '.tm_save_backup' ).val() );

			var next_step = 'no';
			element.removeClass( 'button-green' ).addClass( 'button-grey' );
			element.closest( '.tm-import-add-keyword' ).find( '.tm-info-import-link' ).hide( '200' );
		}

		element.attr( 'data-link', next_step );
		element.find( '.tm_link_external' ).val( next_step );
	}
}



window.eoxiaJS.taskManager.import.updateImportTextFromUrl = function( event ){
	if( jQuery( this ).val().trim() != "" ){
		jQuery( this ).closest( '.tm-import-add-keyword' ).find( '.tm-icon-import-from-url' ).removeClass( 'fa-link' ).addClass( 'fa-file-import' );
		jQuery( this ).attr( 'data-import', "true" );
	}else{
		jQuery( this ).closest( '.tm-import-add-keyword' ).find( '.tm-icon-import-from-url' ).removeClass( 'fa-file-import' ).addClass( 'fa-link' );
		jQuery( this ).attr( 'data-import', "false" );
	}
}

window.eoxiaJS.taskManager.import.get_content_from_url_to_import_textarea = function( element, response ){
	if( response.data.error == "" ){
		element.closest( '.tm-import-tasks.modal-active' ).find( 'textarea' ).val( response.data.content );
	}

	element.closest( '.tm-import-add-keyword' ).find( '.tm-info-import-link input' ).val( '' );

	element.removeClass( 'button-green' ).addClass( 'button-grey' );
	element.closest( '.tm-import-add-keyword' ).find( '.tm-info-import-link' ).hide( '200' );

	element.attr( 'data-link', "no" );
	element.find( '.tm_link_external' ).val( "no" );
}

/**
 * Initialise l'objet "indicator" ainsi que la méthode "init" obligatoire pour la bibliothèque EoxiaJS.
 *
 * @since 1.5.0
 * @version 1.5.0
 */
window.eoxiaJS.taskManager.indicator = {};

window.eoxiaJS.taskManager.indicator.init = function() {
	window.eoxiaJS.taskManager.indicator.event();
};

window.eoxiaJS.taskManager.indicator.event = function( event ) {
	jQuery( document ).on( 'click', '.clickonfollower', window.eoxiaJS.taskManager.indicator.addFollower );
	jQuery( document ).on( 'click', '.clickontypechart', window.eoxiaJS.taskManager.indicator.modifyTypeChart );
	jQuery( document ).on( 'click', '.display_this_point', window.eoxiaJS.taskManager.indicator.displayThisPoint );
	jQuery( document ).on( 'click', '.page-indicator button.handlediv', window.eoxiaJS.taskManager.indicator.toggleMetabox );
	jQuery( document ).on( 'click', '#tm-indicator-stats-client-displaybutton div', window.eoxiaJS.taskManager.indicator.displayDeadlineRecusiveStats );
	jQuery( document ).on( 'click', '#indicator-page-client h2', window.eoxiaJS.taskManager.indicator.preventDefaultHeader );
	jQuery( document ).on( 'click', '#indicator-page-id h2', window.eoxiaJS.taskManager.indicator.preventDefaultHeader );
	jQuery( document ).on( 'click', '#indicator-page-listtag h2', window.eoxiaJS.taskManager.indicator.preventDefaultHeader );

	jQuery( document ).on( 'click', '.select-tags-indicator .tags .wpeo-tag-search', window.eoxiaJS.taskManager.indicator.selectTag );
	jQuery( document ).on( 'click', '.select-tags-indicator .tags .wpeo-tag-search', window.eoxiaJS.taskManager.indicator.sendRequestTagsStats )

};

window.eoxiaJS.taskManager.indicator.preventDefaultHeader = function( event ){
	if( jQuery( this ).parent().hasClass( 'closed' ) ){
		jQuery( this ).parent().removeClass( 'closed' );
	}else{
		jQuery( this ).parent().addClass( 'closed' );
	}
}

window.eoxiaJS.taskManager.indicator.toggleMetabox = function( event ) {
	// var data = {
	// 	"action": ":closed-postboxes",
	// 	"closed": ":wpeo-task-metabox",
	// 	"hidden": "slugdiv",
	// 	"closedpostboxesnonce": "nonce",
	// };
  //
	// window.eoxiaJS.request.send( jQuery( this ), data, function( triggeredElement, response ) {
  //
	// } );
}

/**
 * Fonction principal qui génére les canvas de type Bar et Doghnut
 * Elle est lancé par une fonction php '/activity/action'
 *
 * @param  {[type]} triggeredElement [ ]
   @param  {[type]} response         [ donnés reçues par la requete ajax ]
 *
 * @author Corentin Eoxia
 * @since 1.10.0 - BETA
 */

window.eoxiaJS.taskManager.indicator.loadedCustomerActivity = function( triggeredElement, response ) {
	window.eoxiaJS.taskManager.indicator.isSelectOneUser( response.data.user_select, response.data.user_id );
	window.eoxiaJS.taskManager.indicator.updateTimeChoose( response.data.time_choose, response.data.date_start, response.data.date_end );
	jQuery( '#tm-indicator-activity .inside' ).html( response.data.view );
	jQuery( '#displaycanvas' ).html( '' ); // reset les affichages de Canvas
	jQuery( '#displaycanvas_specific_week' ).html( '' ); // reset le second affichage de la semaine
	jQuery( '#displaymodal' ).html( '' );

	jQuery( '#tm_indicator_chart_display' ).replaceWith( response.data.view_button );
	jQuery( '#tm_indicator_chart_display' ).show();
	jQuery( '#displaycanvas_specific_week' ).hide();

	var data = response.data.object;

	jQuery( '#tm_redirect_settings_user' ).css('display', 'none');
	//jQuery( '#tm_indicator_chart_display' ).css( 'display', 'none' );

	jQuery( '#display_modal' ).html( '' );

	if( data.length != 0 ){
		if( response.data.display_specific_week == true ){
			window.eoxiaJS.taskManager.indicator.displaySpecificChartForWeek( data );
		}

		jQuery("#horizontalChart").css('display','block');
		jQuery("#doghnutChart").css('display','block');
		jQuery("#displaycanvas").css('display','block');

		var total_time_work = 0; // Pour l'affichage
		var total_time_elapsed = 0; // Du premier Canvas
		var total_donut_duree = [];
		var total_donut_point = [];
		var total_donut_title  = [];
		jQuery( "#displaycanvas_specific_week" ).append( '<div class="wpeo-grid grid-2"><div class="grid-1"><canvas id="canvasHorizontalBarAll"></canvas></div><div class="grid-1"><canvas id="canvasDoghnutChartAll" width="400" height="225" class="wpeo-modal-event" ></canvas></div></div>' ); // Qui resume TOUT

			for ( var i = 0; i < data.length ; i++ ){
				total_time_work += data[i]['duree_travail'];
				total_time_elapsed += data[i]['duree_journée'];


				jQuery( "#displaycanvas" ).append( '<div class="wpeo-grid grid-2"><div class="grid-1"><canvas id="canvasHorizontalBar' + i + '"></canvas></div><div class="grid-1"><canvas id="canvasDoghnutChart' + i + '" width="400" height="225" class="wpeo-modal-event" ></canvas></div></div>' );
				var canvasHorizontal = document.getElementById( "canvasHorizontalBar" + i ).getContext('2d');

				var data_canvas_horizontalBar = {
					labels: [ window.indicatorString.minute ],
					datasets: [
					{
						label: window.indicatorString.time_work,//window.indicator.time_work,
						backgroundColor: "#3e95cd",
						data: [ data[i]['duree_travail'] ],
						borderWidth: 1
					}, {
						label: window.indicatorString.time_day,//window.indicator.time_day,
						backgroundColor: "#8e5ea2",
						data: [ data[i]['duree_journée'], 0 ],
						borderWidth: 1
					}]
				};

				var option_canvas_horizontalbar = {
					plugins: {
						labels: {
							render: 'label'
						}
					},
					legend: { display: true },
					title: {
						display: true,
						text:  data[i]['jour']
					},
					scales: {
						yAxes: [{
							ticks: {
								beginAtZero: true
							}
						}]
					}
				};

				window.eoxiaJS.taskManager.indicator.generateCanvasDynamic( canvasHorizontal, 'horizontalBar', data_canvas_horizontalBar, option_canvas_horizontalbar ); // Génération du canvas de type horizontalBar

				// - - - - -

				var canvasDonut = document.getElementById( "canvasDoghnutChart" + i).getContext('2d');

				if( data[ i ][ 'tache_effectue' ] != undefined && data[ i ][ 'tache_effectue' ].length > 0 ){
					jQuery( '#canvasDoghnutChart' + i ).css( 'cursor', 'pointer' );
					jQuery( '#canvasDoghnutChart' + i ).addClass( 'display_all_point' );
					jQuery( '#canvasDoghnutChart' + i ).attr( "data-canvas-focus", i );

					window.eoxiaJS.taskManager.indicator.generateModalContent( i, data[ i ] );

					var donutduree = [];
					var donutpoint = [];
					var donutitle  = [];
					var dayfocus   = '';

					for (var v = 0; v < data[ i ][ 'tache_effectue' ].length; v++) {
						donutduree[ v ] = data[ i ][ 'tache_effectue' ][ v ][ 'duree' ];
						donutpoint[ v ] = data[ i ][ 'tache_effectue' ][ v ][ 'point_id' ];
						donutitle[ v ]  = data[ i ][ 'tache_effectue' ][ v ][ 'tache_title' ];

						dayfocus        = data[ i ][ 'jour' ];



						total_donut_duree[ total_donut_duree.length ]  = data[ i ][ 'tache_effectue' ][ v ][ 'duree' ];
						total_donut_point[ total_donut_point.length ]  = data[ i ][ 'tache_effectue' ][ v ][ 'point_id' ];
						total_donut_title[ total_donut_title.length ] = data[ i ][ 'tache_effectue' ][ v ][ 'tache_title' ];
					}

					var data_canvas_doghnut = {
						labels : donutpoint,
						datasets: [
				        {
				          label: window.indicatorString.planning,
				          backgroundColor: ["#800000", "#9A6324","#808000","#469990","#000075", "#e6194B", "#f58231", "#ffe119", "#bfef45", "#3cb44b", "#42d4f4", "#4363d8", "#911eb4", "#f032e6", "#a9a9a9", "#fabebe", "#ffd8b1", "#fffac8", "#aaffc3", "#e6beff"],
				          data: donutduree,
				        }
				      ],
						dataset : donutitle,
					};

					var option_canvas_doghnut =  {
						onClick: function( event, info ) {
							var numline = -1;
							if( info.length != 0 ){
								numline = info[0]['_index'];
							}
							window.eoxiaJS.taskManager.indicator.displayAllPoint( numline, this['canvas'] );
						},
			      title: {
			        display: true,
			        text: data[ i ][ 'jour' ]
			      },
						tooltips: {
              callbacks: {
                title: function( item, data_indicator ) {
									return data_indicator[ 'dataset' ][ item[ 0 ][ 'index' ] ];
                },
              }
            },
						legend: {
              onClick: (e) => e.stopPropagation() // Block click
            }
			    };

					window.eoxiaJS.taskManager.indicator.generateCanvasDynamic( canvasDonut, 'doughnut', data_canvas_doghnut, option_canvas_doghnut ); // Génération du canvas de type doghnut
				}
			}

			window.eoxiaJS.taskManager.indicator.generateSummaryCanvas( total_time_work, total_time_elapsed, total_donut_duree, total_donut_point, total_donut_title )

		jQuery( '#information_canvas' ).css('display', 'none');
	}else{

		if( response.data.error == 'date_error' ){ // Date invalid

			jQuery( '#information_canvas' ).html( window.indicatorString.date_error );

		}else if( response.data.error == 'person_error' ){ // User don't choose person

			jQuery( '#information_canvas' ).html( window.indicatorString.person_error );

		}else{ // No data found
			jQuery( '#information_canvas' ).html( window.indicatorString.nodata );
			jQuery( '#tm_redirect_settings_user' ).css('display', 'block');
		}

		jQuery( '#information_canvas' ).css('display', 'block');
	}
};

/**
 * Fonction qui génère (TOUS) les canvas
 * @param  {String} [elementbyid='']  [Recupère l'élement créé, qui contiendra le canvas]
 * @param  {String} [typelabel='bar'] [type de canvas à afficher] => 3 types : 'bar', 'horizontalBar','doughnut'
 * @param  {Object} [data={}]         [liste des données]
 * @param  {Object} [option={}]       [liste des options / fonctions à éxecuter]
 * @since 1.9.0 - BETA
 */
window.eoxiaJS.taskManager.indicator.generateCanvasDynamic = function( elementbyid = '', typelabel = 'bar', data = {}, option = {} ){
	new Chart(elementbyid, {
    type: typelabel,
    data: data,
    options: option
	});
}

window.eoxiaJS.taskManager.indicator.updateTimeChoose = function( time = '', day_start = '', day_end = '' ){
	$( '#tm_indicator_date_start_id' ).val( day_start );
	$( '#tm_indicator_date_end_id' ).val( day_end );
}



/**
 * Modifie le css d'un utilisateur suite à une action utilisateur
 * La fonction peut etre lancé par un clic sur un cadre utilisateur, ou lors de l'affichage de l'emploi du temps
 * @param  {[type]} event       [action utilisateur]
 * @param  {Number} [user_id=0] [utilisateur actuel]
 * @return {[type]}             [description]
 *
 * @since 1.9.0 - BETA
 */
window.eoxiaJS.taskManager.indicator.addFollower = function( event, user_id = 0 ) {
	if( user_id == 0 ){

		var addFollower = jQuery( this ).attr( "data-user-id" );
	}else{
		var addFollower = user_id;
	}

	var value_input = document.getElementById( "tm_indicator_list_followers" ).value;
	var list_follower = value_input.toString() ? value_input.toString() : '';

	if( list_follower == '' ){
		var arrayFollowers = addFollower;
		if( document.getElementById( 'tm_user_indicator_' + addFollower ) ){
			jQuery( '#tm_user_indicator_' + addFollower ).addClass( 'active' );
		}
		// active addFollower
	}else{
		if( list_follower == addFollower ){ // Desactive list
			var arrayFollowers = '';
			if( document.getElementById( 'tm_user_indicator_' + list_follower ) ){ // Desactive list
				jQuery( '#tm_user_indicator_' + list_follower ).removeClass( 'active' );
			}
		}else{

			var arrayFollowers = addFollower;
			if( document.getElementById( 'tm_user_indicator_' + addFollower ) ){ // active add
				jQuery( '#tm_user_indicator_' + addFollower ).addClass( 'active' );
			}

			if( document.getElementById( 'tm_user_indicator_' + list_follower ) ){ // Desactive list
				jQuery( '#tm_user_indicator_' + list_follower ).removeClass( 'active' );
			}
		}
	}

	document.getElementById( "tm_indicator_list_followers" ).value = arrayFollowers;
};

window.eoxiaJS.taskManager.indicator.markedAsReadSuccess = function ( triggeredElement, response ) {
	triggeredElement.closest( '.activity' ).hide();
};

/**
 * Affichage de deux canvas supplémaitres lors de la sélection 'semaine'
 * ces canvas résument la semaine, en traitant les données contenu dans le parametre 'data'
 * @param  {[type]} data [données des taches effectuées]
 * @return {[type]}      [description]
 *
 * @since 1.9.0 - BETA
 */
window.eoxiaJS.taskManager.indicator.displaySpecificChartForWeek = function( data ){
	jQuery( '#tm_indicator_chart_display' ).css( 'display', 'block' );

	var data_work_time = [];
	var data_day_time = [];
	var data_day = [];
	var data_color = [ "#800000", "#9A6324","#808000","#469990","#000075", "#e6194B", "#f58231" ]
	var data_time_work = [];
	var data_point_id_work_ = [];

		for( var i = 0; i < data.length; i++ ){
			data_work_time.push( data[i]['duree_travail'] );
			data_day_time.push( data[i]['duree_journée'] );
			data_day.push( data[ i ][ 'date_fr' ] );

			if( data[ i ][ 'tache_effectue' ] != undefined && data[ i ][ 'tache_effectue' ].length > 0 ){
				for (var v = 0; v < data[ i ][ 'tache_effectue' ].length; v++) {
					var point_already_create = false;

					for( var x = 0; x < data_point_id_work_.length; x++ ){
						if( data_point_id_work_[ x ] == data[ i ][ 'tache_effectue' ][ v ][ 'point_id' ] ){
							data_time_work[ x ] = data_time_work[ x ] + data[ i ][ 'tache_effectue' ][ v ][ 'duree' ];
							point_already_create = true;
							break;
						}
					}
					if( ! point_already_create ){
						data_point_id_work_.push( data[ i ][ 'tache_effectue' ][ v ][ 'point_id' ] );
						data_time_work.push( data[ i ][ 'tache_effectue' ][ v ][ 'duree' ] );
					}
				}
			}
		}

		data_time_work.push( 0 ); // Pour l'affichage un bel affichage canvas, en ajoutant un 0 à la fin

	jQuery( "#displaycanvas_specific_week" ).append( '<div class="wpeo-grid grid-2"><div class="grid-1"><canvas id="tm_indicator_canvasbar_week"></canvas></div><div class="grid-1"><canvas id="tm_indicator_canvasdoghnut_week" width="400" height="225"></canvas></div></div>' );
	var canvasbar = document.getElementById( "tm_indicator_canvasbar_week" ).getContext('2d');

		var data_canvas_bar = {
			labels: data_day,
			datasets: [{
				label: window.indicatorString.time_work,//window.indicator.time_work,
				backgroundColor: "#3e95cd",
				data: data_work_time,
				borderWidth: 1
			}, {
				label: window.indicatorString.time_day,//window.indicator.time_day,
				backgroundColor: "#8e5ea2",
				data: data_day_time,
				borderWidth: 1
			}]
		};

		var options_canvas_bar = {
			plugins: {
				labels: {
					render: 'label'
				}
			},
			legend: { display: true },
			title: {
				display: true,
				text:  window.indicatorString.from + ' ' + data[ 0 ]['jour'] + ' ' + window.indicatorString.to + ' ' + data[ data.length - 1 ]['jour']
			},
			scales: {
				yAxes: [{
					ticks: {
						beginAtZero: true
					}
				}]
			}
		};

		window.eoxiaJS.taskManager.indicator.generateCanvasDynamic( canvasbar, 'bar', data_canvas_bar, options_canvas_bar );

// - - - - -

	var canvasdonut = document.getElementById( "tm_indicator_canvasdoghnut_week" ).getContext('2d');

	var data_canvas_donut = {
			labels: data_point_id_work_,
			datasets: [
				{
					label: window.indicatorString.planning,
					backgroundColor: ["#800000", "#9A6324","#808000","#469990","#000075", "#e6194B", "#f58231", "#ffe119", "#bfef45", "#3cb44b", "#42d4f4", "#4363d8", "#911eb4", "#f032e6", "#a9a9a9", "#fabebe", "#ffd8b1", "#fffac8", "#aaffc3", "#e6beff"],
					data: data_time_work,
				}
			]
		};

		var options_canvas_donut = {
			title: {
				display: true,
				text: window.indicatorString.plan_week
			}
		};

	window.eoxiaJS.taskManager.indicator.generateCanvasDynamic( canvasdonut, 'doughnut', data_canvas_donut, options_canvas_donut );
}

/**
 * Modifie l'affichage des boutons lors de la sélection 'semaine'
 * Et modifie l'affichage des canvas
 * @param  {[type]} triggeredElement [ ]
 * @param  {[type]} response         [ ]
 *
 * @since 1.9.0 - BETA
 */
window.eoxiaJS.taskManager.indicator.modifyTypeChart = function( triggeredElement, response ) {

	var chart_selected = jQuery( this ).attr( "data-chart-type" );
	var data_chart_display = jQuery( '#tm_indicator_chart_display' ).attr( "data-chart-display" );

	if( chart_selected != data_chart_display ){ // on change d'affichage
		if( chart_selected == 'bar' ){

			jQuery( '#tm_indicator_chart_bar' ).removeClass( 'button-grey' );
			jQuery( '#tm_indicator_chart_horizontalBar' ).addClass( 'button-grey' );
			jQuery( '#tm_indicator_chart_display' ).attr( "data-chart-display", "bar" );
			jQuery( '#displaycanvas' ).css( "display", "none" );
			jQuery( '#displaycanvas_specific_week' ).css( "display", "block" );
		}else{

			jQuery( '#tm_indicator_chart_horizontalBar' ).removeClass( 'button-grey' );
			jQuery( '#tm_indicator_chart_bar' ).addClass( 'button-grey' );
			jQuery( '#tm_indicator_chart_display' ).attr( "data-chart-display", "horizontalBar" );
			jQuery( '#displaycanvas' ).css( "display", "block" );
			jQuery( '#displaycanvas_specific_week' ).css( "display", "none" );
		}
	}
};

/**
 * Sélectionne un utilisateur par défaut, si aucun n'a était choisis.
 * Ici l'utilisateur actuel est pris en compte;
 * @param  {[type]} user_select [Utilisateur sélectionné ] // null si aucun
 * @param  {[type]} user_id     [id de l'utilisateur actuel]
 *
 * @since 1.9.0 - BETA
 */
window.eoxiaJS.taskManager.indicator.isSelectOneUser = function( user_select, user_id ){
	if( ! user_select ){
		window.eoxiaJS.taskManager.indicator.addFollower( null, user_id );
	}
};

/**
 * [Créer le contenu du modal :
 * => Génération du tableau
 * => Génération de l'explication de chaque point (il suffirat de display block pour l'affichage)]
 * @param  {[type]} num_modal [Numéro du modal, chacun modal représente un canvas doghnut ]
 * @param  {[type]} data      [toutes les données récupérés par le php => Liste des jours => liste des taches effectués]
 *
 * @since 1.9.0 - BETA
 */
window.eoxiaJS.taskManager.indicator.generateModalContent = function ( num_modal, data ){

	if( ! jQuery( '#tm_indicator_modal_active_canvas .modal-container' ).data()[ 'update' ] ){

		jQuery( '#tm_indicator_modal_active_canvas .modal-container' ).data('update', 'true' );

		var oldwidth = jQuery( '#tm_indicator_modal_active_canvas .modal-container' ).css('max-width');
		var oldheight = jQuery( '#tm_indicator_modal_active_canvas .modal-container' ).css('max-height');

		oldwidth = parseInt( oldwidth ) * 1.5;
		oldheight = parseInt( oldheight ) * 1.5;

		jQuery( '#tm_indicator_modal_active_canvas .modal-container' ).css('max-width', oldwidth + 'px' );
		jQuery( '#tm_indicator_modal_active_canvas .modal-container' ).css('max-height', oldheight + 'px' );
		jQuery( '#tm_indicator_modal_active_canvas .modal-container .modal-content' ).css('height', '86%' );
	}


	jQuery( '#tm_indicator_day_taches' ).html( data['jour'] );

	jQuery( '#display_modal' ).append( '<div id="tm_indicator_modal_block' + num_modal + '" style="display : none"></div>');
	var array_top = '<table class="wpeo-table" id="chart_selected_' + num_modal + '"><thead><tr><th data-title="point_id">ID</th><th data-title="tache_title">Tache TITLE</th><th data-title="point_title">Point TITLE</th><th data-title="time">Duree</th></tr></thead><tbody id="tm_indicator_table_' + num_modal + '_" data-chartselect=' + num_modal +'>';
	var array_content = '';
	var block_text = '';

	for( var i = 0; i < data['tache_effectue'].length; i++ ){
		var withoutbackline = '/<br\s*[\/]?>/gi';

		var task_title = data[ 'tache_effectue' ][ i ][ 'tache_title' ];
		if( task_title.length > 40 ){
			task_title = task_title.substring( 0, 40 ) + ' ...';
		}
		task_title = task_title.replace(/(<br ?\/?>)*/g,"");

		var point_title = data['tache_effectue'][ i ]['point_title'];
		if( point_title.length > 20 ){
			point_title = point_title.substring( 0, 20 ) + ' ...';
		}
		point_title = point_title.replace(/(<br ?\/?>)*/g,"");

		client_name = '';
		if( data[ 'tache_effectue' ][ i ][ 'pt_title' ] != null ){
			client_name = data[ 'tache_effectue' ][ i ][ 'pt_title' ];
		}


		var array_content = array_content + '<tr id="tm_indicator_task_' + num_modal + '_' + i + '" class="display_this_point" data-tmindicatorpointid="' + data[ 'tache_effectue' ][ i ][ 'point_id' ] + '" style="cursor : pointer"><th data-title="point_id">' + data['tache_effectue'][ i ]['point_id'] + '</th><th data-title="tache_title">' + task_title + '</th><th data-title="point_title">' + point_title + '</th><th data-title="time">' + data['tache_effectue'][ i ]['duree'] + '</th></tr>';


		var block_task_date = '<h2 style="float : left" title="Date"><i>' + data[ 'tache_effectue' ][ i ][ 'com_date' ] + '</i></h2>';
		var block_task_time = '<h2  style="float : right" title="Time spend"><i>' + data[ 'tache_effectue' ][ i ][ 'duree' ] + '</i> minutes </h2>' + client_name;
		var block_task_title =  '<h1 title="Task TITLE" style="text-align : center">' + data[ 'tache_effectue' ][ i ][ 'tache_title' ] +'<br></h1><span title="Task ID"><i>( #' + data[ 'tache_effectue' ][ i ][ 'tache_id' ] + ' )</i></span>';
		var block_text_point =  '<h3 title="Point TITLE">' + data[ 'tache_effectue' ][ i ][ 'point_title' ] +'</h3><br><span title="Point ID"><i>( #' + data[ 'tache_effectue' ][ i ][ 'point_id' ] + ' )</i></span>';

		var block_text_com = '';
		var num_commentary = 0;
		for( var t = data[ 'tache_effectue' ][ i ][ 'commentary' ].length - 1; t > -1 ; t-- ){
			var num_commentary = num_commentary + 1;
			var block_text_com = block_text_com + '<div style="margin-bottom : 10px; border : 2px solid #0d262c; margin-left: 14%; width : 72%; border-radius: 5px; padding : 5px;  padding-bottom : 25px;"><h4 title="Com TITLE"><span style="font-size : 15px"><b> ' + num_commentary + '.</b></span><div style="float : right"><h2><i>' + data[ 'tache_effectue' ][ i ][ 'commentary' ][ t ][ 'com_time' ] +'</i> minutes</h2></div> <br> ' + data[ 'tache_effectue' ][ i ][ 'commentary' ][ t ][ 'com_title' ] +'</h4><span style="float : right "title="com ID"><i>( #' + data[ 'tache_effectue' ][ i ][ 'commentary' ][ t ][ 'com_id' ] + ' )</i></span></div>';
		}

		var block_text_content = '<div style="border : 2px solid #6f2e2e; margin-left : 15%; width : 70%; border-radius: 10px;"></div><br><div style="border : 2px solid #6f2e2e; border-radius: 5px; margin-bottom : 20px; padding : 8px; margin-left: 10%; width : 80%;">' + block_task_date + block_task_time + block_task_title + '</div>' + '<div style="border : 2px solid #0d262c; border-radius: 5px; margin-bottom : 20px; margin-left: 12%; width : 76%; padding : 8px">' + block_text_point + '</div>'+ block_text_com;

		var block_text = block_text + '<div id="tm_indicator_point_' + data[ 'tache_effectue' ][ i ][ 'point_id' ] + '_' + num_modal + '" style="display : none">' + block_text_content + '</div>';
	}

	var array_bot =  '</tbody></table>';
	var array_full = array_top + array_content + array_bot + block_text;
	jQuery( '#tm_indicator_modal_block' + num_modal).append( array_full );
}

/**
 * Affiche tous les points du canvas ciblé (display block le modal généré à l'avance)
 * Cette fonction est lancé lorsque l'utilisateur clic sur un canvas
 * @param  {[type]} numline   [position de l'element cliqué dans le tableau principal] // peut etre null si l'utilisateur clic dans le vide
 * @param  {[type]} divcanvas [div de la canvas]
 *
 * @since 1.9.0 - BETA
 */
window.eoxiaJS.taskManager.indicator.displayAllPoint = function( numline, divcanvas ){

	jQuery( '#display_modal' ).children().css( 'display', 'none' );
	var chart_selected = jQuery( divcanvas ).attr( "data-canvas-focus" );
	jQuery( '#displaycanvas_modal' ).css( 'display', 'block' );

	jQuery( '#tm_indicator_modal_block' + chart_selected ).css( 'display' ,'block' );

	jQuery( '#tm_indicator_modal_active_canvas' ).addClass( 'modal-active' );

	jQuery( '#tm_indicator_table_' + chart_selected + '_' ).children().css( 'backgroundColor', '' );

	var divmodal = jQuery( '#tm_indicator_modal_block' + chart_selected ).children().not('.wpeo-table');
	divmodal.css( 'display' , 'none' );

	if( numline != -1 ){

		jQuery( '#tm_indicator_task_' + chart_selected + '_' + numline ).css( 'backgroundColor', 'grey' );
		var data_attribute         = jQuery( '#tm_indicator_task_' + chart_selected + '_' + numline ).data();
		var data_attribute_pointid = data_attribute[ 'tmindicatorpointid' ];
		jQuery( '#tm_indicator_point_' + data_attribute_pointid + '_' + chart_selected ).css( 'display', 'block' );
	}
}

/**
 * Affiche la div relié au point ciblé (sur le tableau)
 *
 * @param  {[type]} event [ ]
 *
 * @since 1.9.0 - BETA
 */
window.eoxiaJS.taskManager.indicator.displayThisPoint = function( event ){

	var data_attribute = jQuery( this ).data();
	var data_attribute_pointid = data_attribute[ 'tmindicatorpointid' ];


	var divtable = jQuery( this ).parent();
	divtable.children().css( "backgroundColor", '' );
	jQuery( this ).css( 'backgroundColor', 'grey' );

	num_modal = divtable.data()[ 'chartselect' ];
	var divindicatormodal = jQuery( '#tm_indicator_point_' + data_attribute_pointid + '_' + num_modal ).parent();
	var divmodal = divindicatormodal.children().not('.wpeo-table');
	divmodal.css( 'display' , 'none' );

 	jQuery( '#tm_indicator_point_' + data_attribute_pointid + '_' + num_modal ).css( 'display', 'block' );

}

	window.eoxiaJS.taskManager.indicator.generateSummaryCanvas = function( time_work, time_elasped, total_donut_duree, total_donut_point, total_donut_title ){

		var canvasHorizontal = document.getElementById( "canvasHorizontalBarAll" ).getContext('2d');

		var data_canvas_horizontalBar = {
			labels: [ window.indicatorString.minute ],
			datasets: [
			{
				label: window.indicatorString.time_work,//window.indicator.time_work,
				backgroundColor: "#3e95cd",
				data: [ time_work ],
				borderWidth: 1
			}, {
				label: window.indicatorString.time_day,//window.indicator.time_day,
				backgroundColor: "#8e5ea2",
				data: [ time_elasped, 0 ],
				borderWidth: 1
			}]
		};

		var option_canvas_horizontalbar = {
			plugins: {
				labels: {
					render: 'label'
				}
			},
			legend: { display: true },
			title: {
				display: true,
				text:  window.indicatorString.resume_bar
			},
			scales: {
				yAxes: [{
					ticks: {
						beginAtZero: true
					}
				}]
			}
		};


		window.eoxiaJS.taskManager.indicator.generateCanvasDynamic( canvasHorizontal, 'horizontalBar', data_canvas_horizontalBar, option_canvas_horizontalbar ); // Génération du canvas de type horizontalBar

		// - - - - -

		var canvasDonut = document.getElementById( "canvasDoghnutChartAll" ).getContext('2d');

		if( time_work > 0 && time_elasped > 0 ){
			jQuery( 'canvasDoghnutChartAll' ).css( 'cursor', 'pointer' );
			jQuery( 'canvasDoghnutChartAll' ).addClass( 'display_all_point' );
			// jQuery( 'canvasDoghnutChartAll' ).attr( "data-canvas-focus", i );

			// window.eoxiaJS.taskManager.indicator.generateModalContent( i, data[ i ] );

			var data_canvas_doghnut = {
				labels : total_donut_point,
				datasets: [
						{
							label: window.indicatorString.planning,
							backgroundColor: ["#800000", "#9A6324","#808000","#469990","#000075", "#e6194B", "#f58231", "#ffe119", "#bfef45", "#3cb44b", "#42d4f4", "#4363d8", "#911eb4", "#f032e6", "#a9a9a9", "#fabebe", "#ffd8b1", "#fffac8", "#aaffc3", "#e6beff"],
							data: total_donut_duree,
						}
					],
				dataset : total_donut_title,
			};

			var option_canvas_doghnut =  {
				title: {
					display: true,
					text: window.indicatorString.resume_dog
				},
				tooltips: {
					callbacks: {
						title: function( item, data_indicator ) {
							return data_indicator[ 'dataset' ][ item[ 0 ][ 'index' ] ];
						},
					}
				},
				legend: {
					// onClick: (e) => e.stopPropagation() // Block click
				}
			};

			window.eoxiaJS.taskManager.indicator.generateCanvasDynamic( canvasDonut, 'doughnut', data_canvas_doghnut, option_canvas_doghnut ); // Génération du canvas de type doghnut
		}
	}

window.eoxiaJS.taskManager.indicator.updateIndicatorClientSuccess = function( element, response ){
	if( response.data.view == "" ){
		jQuery( element ).closest( '.tab-content' ).find( '.tm_indicator_stats' ).html( '<h1>Customer\'s tasks doesn\'t \'ve category</h1>' );
	}else{
		jQuery( element ).closest( '.tab-content' ).find( '.tm_indicator_stats' ).replaceWith( response.data.view );
	}
	//replaceWith( response.data.view );
}

window.eoxiaJS.taskManager.indicator.updateStatsClient = function( element, response ){
	if( response.data.view != "" ){
		jQuery( '#indicator-page-client .inside' ).html( response.data.view );
	}
}

window.eoxiaJS.taskManager.indicator.displayDeadlineRecusiveStats = function( event ){
	var focus = jQuery( this ).parent().data( 'focus' );
	var element = jQuery( this ).data( 'element' );
	if( focus == element ){ // Element actuel deja ok

	}else{
		var other_button = jQuery( this ).closest( '#tm-indicator-stats-client-displaybutton' ).find( '.button-blue' );

		jQuery( this ).find( 'i' ).removeClass( 'fa-square' ).addClass( 'fa-check-square' ); // Update Button click
		jQuery( this ).removeClass( 'button-grey' ).addClass( 'button-blue' );

		other_button.find( 'i' ).removeClass( 'fa-check-square' ).addClass( 'fa-square' );
		other_button.removeClass( 'button-blue' ).addClass( 'button-grey' );

		jQuery( this ).parent().data( 'focus', element );
		window.eoxiaJS.loader.display( jQuery( this ) );
		// jQuery( '.load-more' ).show();
		var data = {};

		data.action   = jQuery( this ).data( 'action' );
		data.type     = element;
		data.month    = jQuery( this ).parent().data( 'date' );
		data._wpnonce = jQuery( this ).data( 'nonce' );

		window.eoxiaJS.request.send( jQuery( this ), data );
	}
}

window.eoxiaJS.taskManager.indicator.selectTag = function( event ){
	jQuery( this ).parent().find( '.wpeo-tag-search' ).each( function( element ){
		jQuery( this ).removeClass( 'active' );
	})

	jQuery( this ).closest( '.select-tags-indicator' ).find( 'input[type="hidden"]' ).val( jQuery( this ).data( 'tag-id' ) );
}

window.eoxiaJS.taskManager.indicator.sendRequestTagsStats = function( event ){
	var data = {};
	data.action = 'load_tags_stats';
	data.tag_id = jQuery( this ).data( 'tag-id' );
	//data._wpnonce = jQuery( this ).data( 'nonce' );

	window.eoxiaJS.loader.display( jQuery( this ).closest( '.form' ) );
	window.eoxiaJS.request.send( jQuery( this ), data );
}

window.eoxiaJS.taskManager.indicator.updateIndicatorTag = function( element, response ){
	jQuery( '.tm_tag_indicator_update_body' ).html( response.data.view );

	jQuery( element ).closest( '.inside' ).find( '.tm-simple-task' ).each( function( element ){
		jQuery( this ).hide();
	})

	var i = 0;
	jQuery( element ).closest( '.inside' ).find( '.tm_client_indicator' ).each( function( element ){
		if( i % 2 == 1 ){
			jQuery( this ).css( 'background', '#3F403F' );
			jQuery( this ).css( 'color', 'white' );
		}else{
			jQuery( this ).css( 'background', '#E6E8E6' );
		}
		i++;
	})

	if( response.data.content_empty == "false" ){
		jQuery( '.tm-display-year-indicator' ).show();
		jQuery( '.tm_client_indicator_update' ).replaceWith( response.data.header_view );
	}else{
		jQuery( '.tm-display-year-indicator' ).hide();
	}

	// jQuery( '.tm_client_indicator_update #tm_client_indicator_header_minus' ).attr( 'data-year', response.data.year - 1 );
	// jQuery( '.tm_client_indicator_update #tm_client_indicator_header_actual' ).attr( 'data-year', response.data.year );
	// jQuery( '.tm_client_indicator_update #tm_client_indicator_header_display' ).html( response.data.year );
	// jQuery( '.tm_client_indicator_update #tm_client_indicator_header_plus' ).attr( 'data-year', response.data.year + 1 );
}

/**
 * Initialise l'objet "point" ainsi que la méthode "navigation" obligatoire pour la bibliothèque EoxiaJS.
 *
 * @since 1.0.0
 * @version 1.6.0
 */
window.eoxiaJS.taskManager.navigation = {};

window.eoxiaJS.taskManager.navigation.init = function() {
	window.eoxiaJS.taskManager.navigation.event();
};

window.eoxiaJS.taskManager.navigation.draggedElement;

window.eoxiaJS.taskManager.navigation.event = function() {
	// jQuery( document ).on( 'keyup', '.header-searchbar input', window.eoxiaJS.taskManager.navigation.triggerSearch );
	// jQuery( document ).on( 'change', '.wpeo-header-bar .wpeo-autocomplete', window.eoxiaJS.taskManager.navigation.closeResults );

	// jQuery( document ).on( 'click', '.autocomplete-search-list .autocomplete-result', window.eoxiaJS.taskManager.navigation.triggerSearchAuto/Complete );
	jQuery( document ).on( 'click', '.wpeo-header-bar .more-search-options', window.eoxiaJS.taskManager.navigation.toggleMoreOptions );
	// jQuery( document ).on( 'click', '.wpeo-tag-search', window.eoxiaJS.taskManager.navigation.selectTag );
	jQuery( document ).on( 'click', '.tm-search .field-elements', window.eoxiaJS.taskManager.navigation.searchCategories );

	// jQuery( document ).on( 'keyup', '.tm-search .tm-filter-customer', window.eoxiaJS.taskManager.navigation.filterTags );
	jQuery( document ).on( 'keyup', '.search-customers .tm-filter-customer', window.eoxiaJS.taskManager.navigation.filterCustomers );
	jQuery( document ).on( 'keyup', '.search-categories .tm-filter', window.eoxiaJS.taskManager.navigation.filterTags );
	jQuery( document ).on( 'click', '.tm-search .dropdown-item:not(.me)', window.eoxiaJS.taskManager.navigation.selectTags );

	jQuery( document ).on( 'click', '.wpeo-dropdown .wpeo-button .fa-times', window.eoxiaJS.taskManager.navigation.deleteEntry );
};

window.eoxiaJS.taskManager.navigation.triggerSearch = function( event ) {
	if ( 13 === event.keyCode ) {
		jQuery( '.search-action .action-input' ).click();
	}
};

window.eoxiaJS.taskManager.navigation.triggerSearchAutoComplete = function( event ) {
	jQuery( '.search-action .action-input' ).click();
};

window.eoxiaJS.taskManager.navigation.closeResults = function( event ) {
	jQuery( this ).removeClass( 'autocomplete-active' );
};

/**
 * Toggle le barre de recherche avancée.
 *
 * @return void
 *
 * @since 1.0.0
 * @version 1.4.0
 */
window.eoxiaJS.taskManager.navigation.toggleMoreOptions = function() {
	jQuery( '.wpeo-header-search' ).toggle();
};

window.eoxiaJS.taskManager.navigation.filterCustomers = function( event ) {
	if (event.keyCode == 13 && jQuery( this ).closest( '.tm-search' ).find( '.wpeo-dropdown .dropdown-item.dropdown-active' ).length == 1) {
		jQuery( this ).closest( '.tm-search' ).find( '.wpeo-dropdown .dropdown-item.dropdown-active' ).click();
		jQuery( '.search-action .action-input' ).click();
	} else {
		var search = jQuery(this).text();
		search = search.split(' ').join( '' );
		search = search.toLowerCase();

		if (search.length > 2) {
			jQuery( '.item-info' ).addClass( 'wpeo-util-hidden' );
			var items = jQuery('.dropdown-customers .dropdown-item:not(.me)');

			jQuery( this ).closest( '.wpeo-dropdown' ).addClass( 'dropdown-active' );

			items.each(function (key) {
				jQuery( this ).addClass( 'wpeo-util-hidden' );
				if ( jQuery( this ).data( 'content' ).indexOf(search) != -1) {
					jQuery( this ).removeClass( 'wpeo-util-hidden' );
				}
			});

			if ( items.length == 0 ) {
				jQuery( '.item-nothing' ).removeClass( 'wpeo-util-hidden' );
			} else {
				jQuery( '.item-nothing' ).addClass( 'wpeo-util-hidden' );

			}

			if (jQuery(this).closest('.tm-search').find('.wpeo-dropdown .dropdown-item:not(.me):visible').length == 1) {
				jQuery(this).closest('.tm-search').find('.wpeo-dropdown .dropdown-item:visible').addClass('dropdown-active');
			} else {
				jQuery(this).closest('.tm-search').find('.wpeo-dropdown .dropdown-item').removeClass('dropdown-active');
			}
		} else {
			var items = jQuery('.dropdown-customers .dropdown-item:not(.me)');

			items.each(function (key) {
				jQuery(this).addClass('wpeo-util-hidden');
			});

			jQuery( '.item-info' ).removeClass( 'wpeo-util-hidden' );
		}
	}
};

window.eoxiaJS.taskManager.navigation.filterTags = function( event ) {
	if (event.keyCode == 13 && jQuery( this ).closest( '.tm-search' ).find( '.wpeo-dropdown .dropdown-item.dropdown-active' ).length == 1) {
		jQuery( this ).closest( '.tm-search' ).find( '.wpeo-dropdown .dropdown-item.dropdown-active' ).click();
		jQuery( '.search-action .action-input' ).click();
	} else {
		var search = jQuery(this).text();
		search = search.split(' ').join( '' );
		search = search.toLowerCase();

		jQuery( this ).closest( '.wpeo-dropdown' ).addClass( 'dropdown-active' );

		var items = jQuery('.dropdown-categories .dropdown-item:not(.me)');

		items.each(function (key) {
			jQuery( this ).addClass( 'wpeo-util-hidden' );
			if ( jQuery( this ).data( 'content' ).indexOf(search) != -1) {
				jQuery( this ).removeClass( 'wpeo-util-hidden' );
			}
		});

		if (jQuery(this).closest('.tm-search').find('.wpeo-dropdown .dropdown-item:not(.me):visible').length == 1) {
			jQuery(this).closest('.tm-search').find('.wpeo-dropdown .dropdown-item:visible').addClass('dropdown-active');
		} else {
			jQuery(this).closest('.tm-search').find('.wpeo-dropdown .dropdown-item').removeClass('dropdown-active');
		}
	}
};

/**
 * Toggle la classe "active" à l'élement cliqué.
 *
 * @return {void}
 *
 * @since 1.0.0
 * @version 1.3.6
 */
window.eoxiaJS.taskManager.navigation.selectTags = function( event ) {
	var newElement = jQuery( '<div data-id="' + jQuery( this ).attr( 'data-id' ) + '" class="wpeo-button button-grey button-radius-2" style="display: flex;"></div>' );
	newElement.append( '<span>' + jQuery( this ).find( '.dropdown-result-title' ).text().trim() + '</span>' );
	newElement.append( '<i class="fas fa-times"></i>' );

	var currentVal = jQuery( this ).closest( '.wpeo-dropdown' ).find( 'input[type="hidden"]' ).val();

	currentVal = currentVal ? currentVal.split(',') : [];

	if (!currentVal.includes(jQuery( this ).attr( 'data-id' ))) {
		currentVal.push(jQuery( this ).attr( 'data-id' ) );
	}

	currentVal = currentVal.join( ',' );

	jQuery( this ).closest( '.wpeo-dropdown' ).find( 'input[type="hidden"]' ).val( currentVal );

	jQuery( this ).closest( '.wpeo-dropdown' ).find( '.form-field .tm-filter' ).before( newElement );
	jQuery( this ).closest( '.wpeo-dropdown' ).find( '.form-field .tm-filter' ).text( '' );

	jQuery( this ).closest( '.wpeo-dropdown' ).removeClass( 'dropdown-active' );

	event.stopPropagation();
	event.preventDefault();
};


/**
 * Le callback en cas de réussite à la requête Ajax "search".
 * Remplaces le contenu des tâches du dashboard et affiches la div contenant le résultat de la recherche.
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.0.0
 * @version 1.6.0
 */
window.eoxiaJS.taskManager.navigation.searchedSuccess = function( triggeredElement, response ) {
	window.eoxiaJS.loader.remove( jQuery( '.wpeo-general-search' ) );

	jQuery( '.more-button' ).remove();
	jQuery( '.tm-dashboard-shortcuts .active' ).removeClass( 'active' );

	jQuery( '.list-task' ).replaceWith( response.data.view.tasks );
	jQuery( '.search-results' ).replaceWith( response.data.view.search_result );

	window.eoxiaJS.taskManager.task.offset = 0;
	window.eoxiaJS.taskManager.task.canLoadMore = true;

	window.eoxiaJS.taskManager.newTask.stickyAction();

	jQuery( '.list-task' ).on( 'scroll', window.eoxiaJS.taskManager.newTask.stickyAction );

	// Mise à jour URL.
	history.pushState('data', '', response.data.url );

};

window.eoxiaJS.taskManager.navigation.searchCategories = function ( event ) {
	jQuery( this ).closest( '.tm-search' ).find( '.wpeo-dropdown' ).addClass( 'dropdown-active' );
	event.stopPropagation();
	event.preventDefault();
};

window.eoxiaJS.taskManager.navigation.deleteEntry = function ( evt ) {
	var id = jQuery( this ).closest( '.wpeo-button' ).data( 'id' );
	var currentVal = jQuery( this ).closest( '.wpeo-dropdown' ).find( 'input[type="hidden"]' ).val();

	currentVal = currentVal.split(',');

	for (var key in currentVal) {
		if (currentVal[key] == id) {
			currentVal.splice(key, 1);
		}
	}

	currentVal = currentVal.join( ',' );

	jQuery( this ).closest( '.wpeo-dropdown' ).find( 'input[type="hidden"]' ).val( currentVal );
	jQuery( this ).closest( '.wpeo-button' ).remove();

};

/**
 * Initialise l'objet "notify" ainsi que la méthode "init" obligatoire pour la bibliothèque EoxiaJS.
 *
 * @since 1.5.0
 * @version 1.6.1
 */
window.eoxiaJS.taskManager.notify = {};

/**
 * Méthode 'init' obligatoire.
 *
 * @since 1.5.0
 * @version 1.5.0
 *
 * @return {void}
 */
window.eoxiaJS.taskManager.notify.init = function() {
	window.eoxiaJS.taskManager.notify.event();
};

/**
 * Méthode 'event'.
 *
 * @since 1.5.0
 * @version 1.5.0
 *
 * @return {void}
 */
window.eoxiaJS.taskManager.notify.event = function() {
	jQuery( document ).on( 'click', '.popup-notification ul li', window.eoxiaJS.taskManager.notify.selectUser );
};

/**
 * Méthode qui permet d'ajouter/supprimer l'utilisateur ID dans champs caché users_id.
 *
 * @since 1.5.0
 * @version 1.5.0
 *
 * @return {void}
 */
window.eoxiaJS.taskManager.notify.selectUser = function() {
	var index      = 0;
	var container  = jQuery( this ).closest( 'ul' );
	var input      = container.find( 'input' );
	var currentVal = input.val();

	if ( currentVal ) {
		currentVal = currentVal.split( ',' );
	} else {
		currentVal = [];
	}

	for ( var i = 0; i < currentVal.length; i++ ) {
		currentVal[i] = parseInt( currentVal[i] );
	}

	jQuery( this ).toggleClass( 'active' );

	if ( jQuery( this ).hasClass( 'active' ) ) {
		currentVal.push( parseInt( jQuery( this ).data( 'id' ) ) );
	} else {
		index = currentVal.indexOf( jQuery( this ).data( 'id' ) );

		if ( -1 != index ) {
			currentVal.splice( index, 1 );
		}
	}

	jQuery( this ).closest( 'div' ).find( '.selected-number' ).text( currentVal.length );

	input.val( currentVal.join( ',' ) );
};

/**
 * Le callback en cas de réussite à la requête Ajax "load_notify_popup".
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.5.0
 * @version 1.5.0
 */
window.eoxiaJS.taskManager.notify.loadedNotifyPopup = function( triggeredElement, response ) {
	jQuery( triggeredElement ).closest( '.wpeo-project-task' ).find( '.popup .content' ).html( response.data.view );
	jQuery( triggeredElement ).closest( '.wpeo-project-task' ).find( '.popup .container' ).removeClass( 'loading' );
};

/**
 * Le callback en cas de réussite à la requête Ajax "send_notification".
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.5.0
 * @version 1.6.1
 */
window.eoxiaJS.taskManager.notify.sendedNotification = function( triggeredElement, response ) {
	triggeredElement.closest( '.wpeo-modal' ).find( '.modal-close' ).click();


};

/**
 * Initialise l'objet "user" ainsi que la méthode "init" obligatoire pour la bibliothèque EoxiaJS.
 *
 * @since 1.3.6
 * @version 1.6.0
 */
window.eoxiaJS.taskManager.owner = {};

window.eoxiaJS.taskManager.owner.init = function() {
	window.eoxiaJS.taskManager.owner.event();
};

/**
 * Initialise les évènements des utilisateurs
 *
 * @since 1.3.6
 * @version 1.3.6
 *
 * @return {void}
 */
window.eoxiaJS.taskManager.owner.event = function() {};

/**
 * Callback en cas de réussite de la requête Ajax "switch_owner"
 * Remplaces le template du responsable
 *
 * @since 1.3.6
 * @version 1.6.0
 *
 * @param  {HTMLSpanElement} triggeredElement   L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}        response             Les données renvoyées par la requête Ajax.
 * @return {void}
 */
window.eoxiaJS.taskManager.owner.switchedOwnerSuccess = function( triggeredElement, response ) {
	jQuery( triggeredElement ).closest( '.wpeo-dropdown' ).replaceWith( response.data.view );
};

/**
 * Initialise l'objet "task" ainsi que la méthode "init" obligatoire pour la bibliothèque EoxiaJS.
 *
 * @since 1.0.0
 * @version 1.5.0
 */
window.eoxiaJS.taskManager.newPoint = {};

window.eoxiaJS.taskManager.newPoint.init = function() {
	window.eoxiaJS.taskManager.newPoint.event();
};

window.eoxiaJS.taskManager.newPoint.event = function() {
	jQuery( document ).on( 'blur', '.table-row.table-type-task .task-title', window.eoxiaJS.taskManager.newPoint.editTitle );
	jQuery( document ).on( 'click', '.table-row.table-type-task .task-complete-point-field', window.eoxiaJS.taskManager.newPoint.completePoint );

	jQuery( document ).on( 'click', '.table-row.table-type-task .task-toggle-comment', window.eoxiaJS.taskManager.newPoint.toggleComments );
};

window.eoxiaJS.taskManager.newPoint.addedPointSuccess = function ( triggeredElement, response ) {
	triggeredElement.closest( '.row-empty' ).remove();

	if ( ! response.data.toggle ) {
		response.newTask = true;
		this.loadedPointSuccess( triggeredElement, response );

		jQuery( '.table-type-project[data-id=' + response.data.task_id + '] .wpeo-util-hidden' ).removeClass( 'wpeo-util-hidden' );
		jQuery( '.table-type-project[data-id=' + response.data.task_id + '] .fas.fa-angle-right' ).removeClass( 'fa-angle-right' ).addClass( 'fa-angle-down' );
	} else {
		var tmp = jQuery( response.data.view );
		tmp.css({display: 'none'});
		jQuery( '.table-type-project[data-id=' + response.data.task_id + ']' ).after( tmp );
		tmp.slideDown(400);
		window.eoxiaJS.taskManager.core.selectContentEditable( tmp.find( '.task-title' ) );
	}


	window.eoxiaJS.taskManager.newTask.stickyAction();

};

window.eoxiaJS.taskManager.newPoint.editTitle = function() {
	var data = {};
	var element;

	if ( ! element ) {
		element = jQuery( this );
	}

	data.action    = 'edit_point';
	data._wpnonce  = element.closest( '.table-row' ).data( 'nonce' );
	data.id        = element.closest( '.table-row' ).data( 'id' );
	data.parent_id = element.closest( '.table-row' ).data( 'post-id' );
	data.content   = element.html();

	window.eoxiaJS.loader.display( element.closest( 'div' ) );
	window.eoxiaJS.request.send( element, data );
};

/**
 * Envoie une requête pour passer le point en compléter ou décompléter.
 * Déplace le point vers la liste à puce "compléter" ou "décompléter".
 *
 * @since 1.0.0
 */
window.eoxiaJS.taskManager.newPoint.completePoint = function( event ) {
	const data = {
		action:  'complete_point',
		_wpnonce: jQuery( this ).closest( '.table-row' ).data('nonce' ),
		parent_id: jQuery( this ).closest( '.table-row' ).data( 'post-id' ),
		id: jQuery( this ).closest( '.table-row' ).data( 'id' ),
		complete: jQuery( this ).is( ':checked' )
	};

	window.eoxiaJS.request.send( jQuery( this ), data, function( triggeredElement, response ) {
		var tableRow = triggeredElement.closest( '.table-row' );
		var projectID = tableRow.attr( 'data-post-id' );
		if ( response.success ) {
			if ( response.data.completed ) {
				tableRow.addClass( 'task-completed' );
				if (jQuery( '.table-projects .table-row[data-id=' + projectID + '] .load-complete-point.active[data-point-state=completed]' ).length > 0) {
					jQuery( '.table-projects .table-row[data-post-id=' + projectID + ']:last' ).after( tableRow );
				} else {
					tableRow.fadeOut();
				}
			} else {
				tableRow.removeClass( 'task-completed' );
			}
		}
	} );
};

window.eoxiaJS.taskManager.newPoint.toggleComments = function() {
	const taskID = jQuery( this ).closest( '.table-row' ).data( 'id' );
	if ( jQuery( this ).find( '.fas' ).hasClass( 'fa-angle-down' ) ) {

		jQuery( this ).find( '.fas' ).removeClass( 'fa-angle-down' ).addClass( 'fa-angle-right' );
		jQuery( '.table-type-comment[data-parent-id=' + taskID + ']' ).slideUp(400, function() {
			jQuery( this ).remove();
		});

		jQuery( '.table-type-task[data-id=' + taskID + '] .task-add div[data-action="edit_comment"]' ).attr( 'data-toggle', false );
	} else {
		var data = {};
		var element;

		if ( ! element ) {
			element = jQuery( this );
		}

		data.action = 'load_comments';
		data._wpnonce = element.closest( '.table-row' ).data( 'nonce' );
		data.id = element.closest( '.table-row' ).data( 'id' );
		data.parent_id = element.closest( '.table-row' ).data('post-id');

		window.eoxiaJS.loader.display( element );
		window.eoxiaJS.request.send( element, data );

		jQuery( this ).find( '.fas' ).removeClass( 'fa-angle-right' ).addClass( 'fa-angle-down' );
		jQuery( '.table-type-task[data-id=' + taskID + '] .task-add div[data-action="edit_comment"]' ).attr( 'data-toggle', true );
	}
};

/**
 * Le callback en cas de réussite à la requête Ajax "load_point".
 * Met le contenu dans la div.point.
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.0.0.0
 * @version 1.0.0.0
 */
window.eoxiaJS.taskManager.newPoint.loadedPointSuccess = function( triggeredElement, response ) {
	var view = jQuery( response.data.view );
	view.css({display: 'none'});

	var row = triggeredElement.closest( '.table-row' );
	row.after(view);

	view.slideDown(400);

	window.eoxiaJS.taskManager.newTask.stickyAction();

	triggeredElement.removeClass( 'loading' );
	if ( triggeredElement.hasClass( 'action-attribute' ) ) {
		triggeredElement.attr( 'data-toggle', true );
	}

	if (triggeredElement.hasClass( 'cell-toggle' ) ) {
		triggeredElement.closest( '.table-row' ).find( '.load-complete-point:not(.active)[data-point-state="uncompleted"]' ).addClass( 'active' );
	}

	if ( 'addedPointSuccess' == response.data.callback_success ) {
		window.eoxiaJS.taskManager.core.selectContentEditable( jQuery( '.table-type-task[data-id=' + response.data.point.data.id + '] .task-title' ) );
	}

};


/**
 * Initialise l'objet "point" ainsi que la méthode "init" obligatoire pour la bibliothèque EoxiaJS.
 *
 * @since 1.0.0
 * @version 1.7.0
 */
window.eoxiaJS.taskManager.point = {};
window.eoxiaJS.taskManager.point.lastContent = '';
/**
 * La méthode obligatoire pour la biblotèque EoxiaJS.
 *
 * @return {void}
 *
 * @since 1.0.0
 * @version 1.0.0
 */
window.eoxiaJS.taskManager.point.init = function() {
	window.eoxiaJS.taskManager.point.initAutoComplete();
	window.eoxiaJS.taskManager.point.event();
	window.eoxiaJS.taskManager.point.refresh();
};

/**
 * Initialise tous les évènements liés au point de Task Manager.
 *
 * @return {void}
 *
 * @since 1.0.0
 * @version 1.0.0
 */
window.eoxiaJS.taskManager.point.event = function() {
	jQuery( document ).on( 'keyup', '.wpeo-project-task .point:not(.edit) .wpeo-point-new-contenteditable', window.eoxiaJS.taskManager.point.triggerCreate );

	jQuery( document ).on( 'click', '.wpeo-project-task .point.edit .wpeo-point-new-contenteditable', window.eoxiaJS.taskManager.point.activePoint );
	jQuery( document ).on( 'blur keyup paste keydown click', '.point .point-content .wpeo-point-new-contenteditable', window.eoxiaJS.taskManager.point.updateHiddenInput );
	jQuery( document ).on( 'blur paste', '.wpeo-project-task .point.edit .wpeo-point-new-contenteditable', window.eoxiaJS.taskManager.point.editPoint );
	// jQuery( document ).on( 'click', '.wpeo-project-task .form .completed-point', window.eoxiaJS.taskManager.point.completePoint );

	jQuery( document ).on( 'click', '.point-type-display-buttons div.active', window.eoxiaJS.taskManager.point.undisplayPoint );

	jQuery( document ).on( 'click', '.modal-prompt-point .action-input', window.eoxiaJS.taskManager.point.pointAddLoader );
};

/**
 * Initialise l'autocomplete pour déplacer les points.
 *
 * @return {void}
 *
 * @since 1.4.0-ford
 * @version 1.4.0-ford
 */
window.eoxiaJS.taskManager.point.initAutoComplete = function() {
	jQuery( '.search-task' ).autocomplete( {
		'source': 'admin-ajax.php?action=search_task',
		'delay': 0,
		'select': function( event, ui ) {
			jQuery( 'input[name="to_task_id"]' ).val( ui.item.id );
			jQuery( this ).closest( '.form-fields' ).find( '.action-input' ).addClass( 'active' );
			event.stopPropagation();
		}
	} );
};

window.eoxiaJS.taskManager.point.triggerCreate = function( event ) {
	if ( event.ctrlKey && 13 === event.keyCode ) {
		jQuery( this ).closest( '.point' ).find( '.wpeo-point-new-btn' ).click();
	}
};

window.eoxiaJS.taskManager.point.activePoint = function( event ) {
	jQuery( '.point.active' ).removeClass( 'active' );

	jQuery( this ).closest( '.point' ).addClass( 'active' );
	window.eoxiaJS.taskManager.point.lastContent = jQuery( this ).closest( '.point' ).find( '.point-content input[name="content"]' ).val();
};

/**
 * Cette méthode est appelé automatiquement lors de l'appel à la méthode window.eoxiaJS.taskManager.refresh().
 *
 * @return void
 *
 * @since 1.0.0
 * @version 1.4.0
 */
window.eoxiaJS.taskManager.point.refresh = function() {
	jQuery( '.tm-wrap .points.sortable' ).sortable( {
		handle: '.wpeo-sort-point',
		items: 'div.point.edit',
		update: window.eoxiaJS.taskManager.point.editOrder
	} );

	window.eoxiaJS.taskManager.point.initAutoComplete();
};

/**
 * Met à jour le champ caché contenant le texte du point écris dans la div "contenteditable".
 *
 * @param  {MouseEvent} event L'évènement de la souris lors de l'action.
 * @return {void}
 *
 * @since 1.0.0
 * @version 1.6.0
 */
window.eoxiaJS.taskManager.point.updateHiddenInput = function( event ) {
	if ( ! jQuery( this ).closest( '.point' ).hasClass( 'edit' ) ) {
		if ( 0 < jQuery( this ).text().length ) {
			jQuery( this ).closest( '.point' ).find( '.quick-point-event' ).hide();
			jQuery( this ).closest( '.point' ).find( '.wpeo-point-new-btn' ).show();
			jQuery( this ).closest( '.point' ).find( '.wpeo-point-new-btn' ).removeClass( 'no-action' );
			jQuery( this ).closest( '.point' ).find( '.wpeo-point-new-placeholder' ).addClass( 'hidden' );
			jQuery( this ).closest( '.point' ).find( '.wpeo-point-new-btn' ).css( 'pointerEvents', 'auto' );
			window.eoxiaJS.taskManager.core.initSafeExit( true );
		} else {
			jQuery( this ).closest( '.point' ).find( '.wpeo-point-new-btn' ).hide();
			jQuery( this ).closest( '.point' ).find( '.quick-point-event' ).show();
			jQuery( this ).closest( '.point' ).find( '.wpeo-point-new-btn' ).addClass( 'no-action' );
			jQuery( this ).closest( '.point' ).find( '.wpeo-point-new-placeholder' ).removeClass( 'hidden' );
			jQuery( this ).closest( '.point' ).find( '.wpeo-point-new-btn' ).css( 'pointerEvents', 'none' );
			window.eoxiaJS.taskManager.core.initSafeExit( false );
		}
	}

	jQuery( this ).closest( '.point' ).find( '.point-content input[name="content"]' ).val( jQuery( this ).html() );

	jQuery( this ).closest( '.point' ).find( '.point-content input[name="content"]' ).trigger( 'change' );

	// window.eoxiaJS.refresh();
};

/**
 * Le callback en cas de réussite à la requête Ajax "create_point".
 * Ajoutes le point avant le formulaire pour ajouter un point dans le ul.wpeo-task-point-sortable
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.0.0
 * @version 1.7.0
 */
window.eoxiaJS.taskManager.point.addedPointSuccess = function( triggeredElement, response ) {
	var task = jQuery( "div.wpeo-project-task[data-id='" + response.data.task_id + "']" );

	task.find( '.point-uncompleted' ).text( response.data.task.data.count_uncompleted_points );
	task.find( '.point-completed' ).text( response.data.task.data.count_completed_points );

	if ( triggeredElement.closest( '.point' ).length ) {
		triggeredElement.closest( '.point' ).find( '.wpeo-point-new-contenteditable' ).text( '' );
		triggeredElement.closest( '.point' ).find( 'input[name="content"]' ).val( '' );
		triggeredElement.closest( '.point' ).find( '.quick-point-event' ).hide();
		triggeredElement.closest( '.point' ).find( '.wpeo-point-new-btn' ).hide();
		triggeredElement.closest( '.point' ).find( '.wpeo-point-new-btn' ).addClass( 'no-action' );
		triggeredElement.closest( '.point' ).find( '.wpeo-point-new-placeholder' ).removeClass( 'hidden' );
		triggeredElement.closest( '.point' ).find( '.wpeo-point-new-btn' ).css( 'pointerEvents', 'auto' )
	}

	window.eoxiaJS.taskManager.point.initAutoComplete();
	triggeredElement.trigger( 'addedPointSuccess' );
	window.eoxiaJS.taskManager.core.initSafeExit( false );
};

/**
 * Le callback en cas de réussite à la requête Ajax "create_point".
 * Ajoutes le point avant le formulaire pour ajouter un point dans le ul.wpeo-task-point-sortable
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.0.0
 * @version 1.6.0
 */
window.eoxiaJS.taskManager.point.editedPointSuccess = function( triggeredElement, response ) {
	window.eoxiaJS.loader.remove( triggeredElement.closest( '.form' ) );
};

/**
 * Met à jour un point en cliquant sur le bouton pour envoyer le formulaire.
 *
 * @since 1.0.0
 * @version 1.5.0
 *
 * @return void
 */
window.eoxiaJS.taskManager.point.editPoint = function() {
	if ( window.eoxiaJS.taskManager.point.lastContent !== jQuery( this ).closest( '.form' ).find( '.point-content input[name="content"]' ).val() ) {
		window.eoxiaJS.loader.display( jQuery( this ).closest( '.form' ) );
		jQuery( this ).closest( '.form' ).find( '.action-input.update' ).click();
	}
};

/**
 * Supprimes la ligne du point.
 *
 * @param  {HTMLSpanElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {object} response                   Les données renvoyées par la requête Ajax.
 * @return void
 * @since 1.0.0
 * @version 1.0.0
 */
window.eoxiaJS.taskManager.point.deletedPointSuccess = function( triggeredElement, response ) {
	const point = response.data.point;
	jQuery( triggeredElement ).closest( '.table-row' ).fadeOut( 400, function() {
		jQuery( this ).remove();
	} );

	jQuery( '.table-type-project[data-id=' + point.data.post_id + '] .project-time .elapsed' ).text( response.data.time );
	jQuery( '.table-type-comment[data-post-id=' + point.data.post_id + ']' ).fadeOut(400, function() {
		jQuery( this ).remove();
	});

};

var longpress = 500; // Durée par défaut d'un clic => 2 sec
var start = 0; // Creer un timer au début du clic (pour calculer sa durée)

window.eoxiaJS.taskManager.point.completePointChoices = function( e ){

	if( e.type == "mousedown" ){ // L'utilisateur click sur la checkbox
		start = new Date().getTime();

	}else if( e.type == "mouseup" ){ // L'utilisateur relache le click sur la metabox
		if( ! jQuery( this ).data( 'checked' ) ){ // Avec les events mouseup, mousedown, mouseleave, l'utilisateur ne coche pas
			jQuery( this ).data( 'checked', 'true' ); // La metabox au moment du clic
			jQuery( this ).prop( "checked", true ); // Donc on le fait manuellement
		}else{
			jQuery( this ).data( 'checked', 'false' );
			jQuery( this ).prop( "checked", false );
		}

		if( new Date().getTime() >= ( start + longpress ) ){ // Si durée du clic > 2 sec => On affiche les options
			console.log( ' - LONG' );
			jQuery( this ).parent().find( '.point-list-element' ).show( '200' );


		}else{ // Sinon on coche simplement, la tache est complétée
			console.log( ' - SHORT' );

			window.eoxiaJS.taskManager.point.completePoint( this );
		}
	}else{ // L'utilisateur enleve sa souris de la metabox, on reset le chronometre qui calcul la durée du clic
		start = 0;
	}
}


/**
 * Envoie une requête pour passer le point en compléter ou décompléter.
 * Déplace le point vers la liste à puce "compléter" ou "décompléter".
 *
 * @since 1.0.0
 */
window.eoxiaJS.taskManager.point.completePoint = function( event ) {
	/*var numberComment = jQuery( this ).closest( '.point' ).find( '.number-comments' ).text();

	// if ( numberComment == 0 && jQuery( this ).closest( '.point' ).attr( 'data-point-state' ) == 'uncompleted' ) {
	// 	jQuery( '.modal-prompt-point' ).addClass( 'modal-active' );
	// 	jQuery( '.modal-prompt-point input[name="post_id"]' ).val( jQuery( this ).closest( '.point' ).find( 'input[name="parent_id"]').val());
	// 	jQuery( '.modal-prompt-point input[name="point_id"]' ).val( jQuery( this ).closest( '.point' ).find( 'input[name="id"]').val() );
	// 	jQuery( '.modal-prompt-point .content' ).html( '#' + jQuery( this ).closest( '.point' ).find( 'input[name="id"]').val() + ' - ' + jQuery( this ).closest( '.point' ).find( '.point-content input[name="content"]').val() );
	// 	event.preventDefault();
	// 	return false;
	// } else {

		var totalCompletedPoint = jQuery(this).closest('.wpeo-project-task').find('.point-completed').text();
		var totalUncompletedPoint = jQuery(this).closest('.wpeo-project-task').find('.point-uncompleted').text();
		var completedButton = jQuery('.point-type-display-buttons button[data-point-state="completed"]');
		var uncompletedButton = jQuery('.point-type-display-buttons button[data-point-state="uncompleted"]');

		var data = {
			action: 'complete_point',
			_wpnonce: jQuery(this).data('nonce'),
			point_id: jQuery(this).closest('.form').find('input[name="id"]').val(),
			complete: jQuery(this).is(':checked')
		};

		if (jQuery(this).is(':checked')) {
			totalCompletedPoint++;
			totalUncompletedPoint--;
			jQuery(this).closest('.wpeo-project-task').find('.point-completed').text(totalCompletedPoint);
			jQuery(this).closest('.wpeo-project-task').find('.point-uncompleted').text(totalUncompletedPoint);

			if (completedButton.hasClass('active')) {
				jQuery(this).closest('.point').attr('data-point-state', 'completed');
			} else {
				jQuery(this).closest('.point').remove();
			}

		} else {
			totalCompletedPoint--;
			totalUncompletedPoint++;
			jQuery(this).closest('.wpeo-project-task').find('.point-completed').text(totalCompletedPoint);
			jQuery(this).closest('.wpeo-project-task').find('.point-uncompleted').text(totalUncompletedPoint);

			if (uncompletedButton.hasClass('active')) {
				jQuery(this).closest('.point').attr('data-point-state', 'uncompleted');
			} else {
				jQuery(this).closest('.point').remove();
			}
		}

		window.eoxiaJS.request.send(jQuery(this), data);
	// }*/
};

/**
 * Récupères les ID des points dans l'ordre de l'affichage et les envoies à l'action "edit_order_point".
 *
 * @return void
 *
 * @since 1.0.0
 * @version 1.6.0
 */
window.eoxiaJS.taskManager.point.editOrder = function() {
	var orderPointId = [];
	var objectId     = jQuery( this ).closest( '.wpeo-project-task' ).data( 'id' );
	var data         = {};

	jQuery( this ).find( '.point.edit' ).each( function() {
		orderPointId.push( jQuery( this ).data( 'id' ) );
	} );

	data.action         = 'edit_order_point';
	data.task_id        = objectId;
	data.order_point_id = orderPointId;

	window.eoxiaJS.request.send( jQuery( this ), data );
};

/**
 * Le callback en cas de réussite à la requête Ajax "load_point_properties".
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.0.0
 * @version 1.3.6.0
 */
window.eoxiaJS.taskManager.point.loadedPointProperties = function( triggeredElement, response ) {
	jQuery( triggeredElement ).closest( '.wpeo-project-task' ).find( '.popup .content' ).html( response.data.view );
	jQuery( triggeredElement ).closest( '.wpeo-project-task' ).find( '.popup .container' ).removeClass( 'loading' );
};

/**
 * Le callback en cas de réussite à la requête Ajax "move_point_to".
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.0.0
 * @version 1.5.0
 */
window.eoxiaJS.taskManager.point.movedPointTo = function( triggeredElement, response ) {
	var currentTask = jQuery( '.wpeo-project-task[data-id=' + response.data.current_task.data.id + ']' );
	var toTask      = jQuery( '.wpeo-project-task[data-id=' + response.data.to_task.data.id + ']' );

	jQuery( '.wpeo-project-task.mask' ).removeClass( 'mask' );

	// Met à jour le temps et le nombre de point sur la tâche.
	if ( currentTask.length ) {
		currentTask.find( '.wpeo-task-time-info' ).find( '.elapsed' ).html( response.data.current_task_elapsed_time );
		//currentTask.find( '.wpeo-point-toggle-a' ).find( '.total-point' ).html( response.data.current_task.data.count_completed_points + response.data.current_task.data.count_uncompleted_points );

		if ( response.data.point.data.completed ) {
			currentTask.find( '.wpeo-task-filter .point-completed' ).html( response.data.current_task.data.count_completed_points );
		}else{
			currentTask.find( '.wpeo-task-filter .point-uncompleted' ).html( response.data.current_task.data.count_uncompleted_points );
		}

		if ( toTask.length ) {
			if ( response.data.point.data.completed && toTask.find( '.points.completed:not(.hidden)' ).length ) {
				toTask.find( '.points.completed div.point:last' ).before( jQuery( '.point.edit[data-id=' + response.data.point.data.id + ']' ) );
			} else if ( response.data.point.data.completed && ! toTask.find( '.points.completed:not(.hidden)' ).length ) {
				jQuery( '.point.edit[data-id=' + response.data.point.data.id + ']' ).fadeOut( 400, function() {
					jQuery( this ).remove();
				} );
			} else {
				toTask.find( '.points.sortable div.point:last' ).before( jQuery( '.point.edit[data-id=' + response.data.point.data.id + ']' ) );
			}
		} else {
			jQuery( '.point.edit[data-id=' + response.data.point.data.id + ']' ).fadeOut( 400, function() {
				jQuery( this ).remove();
			} );
		}
	}

	triggeredElement.closest( '.wpeo-dropdown' ).removeClass( 'dropdown-active' );

	if ( toTask.length ) {
		toTask.find( '.wpeo-task-time-info .elapsed' ).text( response.data.to_task_elapsed_time );

		toTask.find( '.point.edit[data-id=' + response.data.point.data.id + '] .wpeo-point-summary .action-attribute' ).attr( 'data-task-id', response.data.to_task.data.id );
		toTask.find( '.point.edit[data-id=' + response.data.point.data.id + '] .point-header-action .form-fields .action-input' ).removeClass( 'active' );
		toTask.find( '.point.edit[data-id=' + response.data.point.data.id + '] .point-header-action .form-fields .search-task' ).val( '' );
		toTask.find( '.point.edit[data-id=' + response.data.point.data.id + '] .point-header-action .move-to input[name="task_id"]' ).val( response.data.to_task.data.id );
		toTask.find( '.point.edit[data-id=' + response.data.point.data.id + '] .point-header-action .move-to input[name="to_task_id"]' ).val( '' );
		toTask.find( '.point.edit[data-id=' + response.data.point.data.id + '] .point-header-action.active' ).removeClass( 'active' );

		if ( response.data.point.data.point_info.completed ) {
			toTask.find( '.wpeo-task-filter .point-completed' ).html( response.data.to_task.data.count_completed_points );
		}else{
			toTask.find( '.wpeo-task-filter .point-uncompleted' ).html( response.data.to_task.data.count_uncompleted_points );
		}

		// Met à jour le nombre de point sur la tâche reçevant le point.
		//toTask.find( '.wpeo-point-toggle-a' ).find( '.total-point' ).html( response.data.to_task.data.count_completed_points + response.data.to_task.data.count_uncompleted_points );
	}
};

/**
 * Méthode appelé lors de la modification de la date du point.
 * Envoie une requête AJAX pour effectuer la mise à jour en base de donnée.
 *
 * @since 1.5.0
 * @version 1.5.0
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 *
 * @return {void}
 */
window.eoxiaJS.taskManager.point.afterTriggerChangeDate = function( triggeredElement ) {
	var data = {
		action: 'change_date_point',
		id: triggeredElement.closest( '.point' ).attr( 'data-id' ),
		date: triggeredElement.val()
	};

	window.eoxiaJS.request.send( triggeredElement, data );
};


/**
 * Le callback en cas de réussite à la requête Ajax "load_completed_point".
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.0.0
 * @version 1.6.0
 */
window.eoxiaJS.taskManager.point.loadedPoint = function( triggeredElement, response ) {
	jQuery( triggeredElement ).addClass( 'active' ).removeClass( 'action-input' );
	jQuery( triggeredElement ).closest( '.wpeo-project-task' ).find( '.points .point:not(.edit)' ).after( response.data.view );
};

/**
 * Méthode appelée lors du clic sur les boutons de hoix du type de points affichés dans une tâche.
 *
 * @since 1.8.0
 *
 * @param  {type} event  L'événement lancé lors de l'action.
 */
window.eoxiaJS.taskManager.point.undisplayPoint = function( event ) {
	var pointState = jQuery( this ).attr( 'data-point-state' );
	// event.preventDefault();

	jQuery( this ).removeClass( 'active' ).addClass( 'action-input' );

	var points = this.closest( '.wpeo-project-task-container' ).querySelectorAll( '.points .point.edit[data-point-state="' + pointState + '"]' );
	for( var i = 0; i < points.length; i ++ ){
		points[i].remove();
	}
	// jQuery( this ).closest( '.wpeo-project-task-container' ).find( '.points .point.edit[data-point-state="' + pointState + '"]' ).remove();
};

window.eoxiaJS.taskManager.point.completedWithPrompt = function( triggeredElement, response ) {
	jQuery( '.wpeo-project-task[data-id=' + response.data.id + ']' ).replaceWith( response.data.view );
};

window.eoxiaJS.taskManager.point.pointAddLoader = function (event) {
	var taskID = jQuery( this ).closest( '.wpeo-modal' ).find( 'input[name="post_id"]' ).val();
	window.eoxiaJS.loader.display( jQuery( '.wpeo-project-task[data-id=' + taskID + ']' ) );
}

/**
 * Initialise l'objet "quickPoint" (point rapide) ainsi que la méthode "init" obligatoire pour la bibliothèque EoxiaJS.
 *
 * @since 1.7.0
 * @version 1.7.0
 */
window.eoxiaJS.taskManager.quickPoint = {};

/**
 * La méthode obligatoire pour la biblotèque EoxiaJS.
 *
 * @return {void}
 *
 * @since 1.7.0
 * @version 1.7.0
 */
window.eoxiaJS.taskManager.quickPoint.init = function() {
	window.eoxiaJS.taskManager.quickPoint.event();
};

/**
 * Initialise tous les évènements liés aux points rapide de Task Manager.
 *
 * @return {void}
 *
 * @since 1.7.0
 * @version 1.7.0
 */
window.eoxiaJS.taskManager.quickPoint.event = function() {
	jQuery( document ).on( 'keyup', '.wpeo-modal.quick-point .point:not(.edit) .wpeo-point-new-contenteditable', window.eoxiaJS.taskManager.quickPoint.triggerCreate );

	jQuery( document ).on( 'change', '.point-content input[name="content"]', window.eoxiaJS.taskManager.quickPoint.onChange );
};

/**
 * Passes le contenu de la modal en "success".
 *
 * @since 1.7.0
 * @version 1.7.0
 *
 * @param  {CustomEvent} event Envoyé par Task Manager/Point.
 *
 * @return {void}
 */
window.eoxiaJS.taskManager.quickPoint.addedPointSuccess = function( triggeredElement, response ) {
	window.eoxiaJS.taskManager.point.addedPointSuccess( triggeredElement, response );

	jQuery( '.wpeo-modal.quick-point .modal-content' ).html( response.data.modal_view );
	jQuery( '.wpeo-modal.quick-point .modal-footer' ).html( response.data.modal_buttons_view );
};

/**
 * Reload la modal.
 *
 * @since 1.7.0
 * @version 1.7.0
 *
 * @param  {CustomEvent} event Envoyé par Task Manager/Point.
 *
 * @return {void}
 */
window.eoxiaJS.taskManager.quickPoint.reloadModal = function( triggeredElement, response ) {
	jQuery( '.wpeo-modal.quick-point .modal-content' ).html( response.data.view );
	jQuery( '.wpeo-modal.quick-point .modal-footer' ).html( response.data.buttons_view );
};

/**
 * Clic sur le bouton "Add" de la modal.
 *
 * @since 1.7.0
 * @version 1.7.0
 *
 * @param  {KeyboardEvent} event L'état du clavier à l'instant du keyUp.
 * @return {void}
 */
window.eoxiaJS.taskManager.quickPoint.triggerCreate = function( event ) {
	if ( event.ctrlKey && 13 === event.keyCode ) {
		jQuery( '.wpeo-modal.quick-point .action-input.button-main:not(.button-disable)' ).click();
	}
};

/**
 * Enlève la classe button-disable si le contenu du bouton n'est pas vide.
 *
 * @since 1.7.0
 * @version 1.7.0
 *
 * @return {void}
 */
window.eoxiaJS.taskManager.quickPoint.onChange = function() {
	if ( 0 < jQuery( this ).val().length ) {
		jQuery( '.wpeo-modal.quick-point .modal-footer .button-main.button-disable' ).removeClass( 'button-disable' );
	} else {
		jQuery( '.wpeo-modal.quick-point .modal-footer .button-main' ).addClass( 'button-disable' );
	}
};

/**
 * Initialise l'objet "setting" ainsi que la méthode "init" obligatoire pour la bibliothèque EoxiaJS.
 *
 * @since 1.5.0
 * @version 1.5.0
 */
window.eoxiaJS.taskManager.setting = {};

window.eoxiaJS.taskManager.setting.init = function() {
	window.eoxiaJS.taskManager.setting.event();
};

window.eoxiaJS.taskManager.setting.event = function() {
	jQuery( document ).on( 'click', '.settings_page_task-manager-setting .list-users .wp-digi-pagination a', window.eoxiaJS.taskManager.setting.pagination );
	jQuery( document ).on( 'change', '#setting-indicator-client-update-color', window.eoxiaJS.taskManager.setting.update_color_indicator_client );
	jQuery( document ).on( 'click', '#setting-indicator-client-input', window.eoxiaJS.taskManager.setting.update_form_indicator_client );
	jQuery( document ).on( 'keyup', '#setting-indicator-client-input', window.eoxiaJS.taskManager.setting.update_form_indicator_client );
};

/**
 * Gestion de la pagination des utilisateurs.
 *
 * @param  {ClickEvent} event [description]
 * @return {void}
 *
 * @since 1.5.0
 * @version 1.5.0
 */
window.eoxiaJS.taskManager.setting.pagination = function( event ) {
	var href = jQuery( this ).attr( 'href' ).split( '&' );
	var nextPage = href[1].replace( 'current_page=', '' );

	jQuery( '.list-users' ).addClass( 'loading' );
	var data = {
		action: 'paginate_setting_task_manager_page_user',
		next_page: nextPage
	};

	event.preventDefault();

	jQuery.post( window.ajaxurl, data, function( view ) {
		jQuery( '.list-users' ).replaceWith( view );
	} );
};

/**
 * Le callback en cas de réussite à la requête Ajax "save_capacity".
 * Affiches le message de "success".
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.5.0
 * @version 1.5.0
 */
window.eoxiaJS.taskManager.setting.savedCapability = function( triggeredElement, response ) {
	triggeredElement.addClass( 'button-success' );

	setTimeout( function() {
		triggeredElement.removeClass( 'button-success' );
	}, 1500 );
};

window.eoxiaJS.taskManager.setting.update_color_indicator_client = function( triggeredElement, response ) {
	jQuery( '#setting-indicator-client-update-hidden' ).val( jQuery( this ).val() );
	jQuery( '#div_setting_indicator_client_color' ).css( "background-color", jQuery( this ).val() );

};


window.eoxiaJS.taskManager.setting.display_view_settings_indicator_client = function( triggeredElement, response ) {
	jQuery( ".body-indicator-client-settings" ).html( response.data.view );
};

window.eoxiaJS.taskManager.setting.update_form_indicator_client = function( triggeredElement, response ){
	if( jQuery( "#setting-indicator-client-input" ).val() == '' ){
		jQuery( "#setting-indicator-client-button" ).addClass( 'button-disable' );

	}else if( jQuery( "#setting-indicator-client-input" ).val() > 250 ){
		jQuery( "#setting-indicator-client-input" ).val( 250 );
	}else if( jQuery( "#setting-indicator-client-input" ).val() < -100 ){
		jQuery( "#setting-indicator-client-input" ).val( -100 );
	}
	else{

		jQuery( "#setting-indicator-client-button" ).removeClass( 'button-disable' );

	}
}

/**
 * Initialise l'objet "point" ainsi que la méthode "shortcut" obligatoire pour la bibliothèque EoxiaJS.
 *
 * @since 1.0.0
 * @version 1.6.0
 */
window.eoxiaJS.taskManager.shortcut = {};

window.eoxiaJS.taskManager.shortcut.init = function() {
	window.eoxiaJS.taskManager.shortcut.event();
};

window.eoxiaJS.taskManager.shortcut.draggedElement;

window.eoxiaJS.taskManager.shortcut.event = function() {
	jQuery( document ).on( 'click', '.shortcuts .shortcut.folder:not(.edit)', window.eoxiaJS.taskManager.shortcut.openFolder );
	jQuery( document ).on( 'click', '.tree .item', window.eoxiaJS.taskManager.shortcut.openFolder );

	jQuery( document ).on( 'click', '.create-folder', function() {
		jQuery( '.create-folder-form' ).slideToggle();
		jQuery( this ).slideToggle();
	});


	jQuery( document ).on( 'dragstart', '.shortcuts .shortcut', function( e ) {
		window.eoxiaJS.taskManager.shortcut.draggedElement = e.currentTarget;
		e.currentTarget.style.border = 'dashed';
		e.originalEvent.dataTransfer.setData("text/plain", e.target.id );
	} );

	jQuery( document ).on( 'dragend', '.shortcut, .dropable', function( event ) {
		event.preventDefault();
	} );

	jQuery( document ).on( 'dragover', '.shortcut, .dropable', function( event ) {
		event.preventDefault();
		return false;
	} );

	jQuery( document ).on( "dragenter", '.shortcut, .dropable', function( event ) {
		if (jQuery( event.target ).hasClass( 'shortcut' ) || jQuery( event.target ).hasClass( 'dropable' ) ) {
			jQuery( event.target )[0].style.border = "dashed";
		}
	} );

	jQuery( document ).on( "dragleave", '.shortcut, .dropable', function( event ) {
		if (jQuery( event.target ).hasClass( 'shortcut' )  || jQuery( event.target ).hasClass( 'dropable' ) ) {
			jQuery( event.target )[0].style.border = "none";
		}
	} );

	jQuery( document ).on( 'drop', '.shortcut, .dropable', function( ev ) {
		ev.preventDefault();

		if ( ev.stopPropagation() ) {
			ev.stopPropagation();
		}

		var currentElement = jQuery( window.eoxiaJS.taskManager.shortcut.draggedElement );
		var newElement     = currentElement.clone();
		var target         = jQuery( ev.target );

		var id = parseInt( target.data( 'id' ) );

		if ( id == currentElement.data( 'id' ) || ! jQuery( ev.target ).hasClass( 'shortcut' ) ) {
			jQuery( ev.target )[0].style.border = "none";
			return;
		}

		if ( jQuery( ev.target ).hasClass( "folder" ) && ! currentElement.hasClass("folder") )  {
			if ( jQuery( ev.target ).data( 'parent' ) ) {
				jQuery('.folder-0').append(newElement[0].outerHTML);
			} else {
				jQuery('.folder-' + id).append(newElement[0].outerHTML);
			}
		} else {
			jQuery( ev.target ).after( newElement[0].outerHTML );
		}

		jQuery( ev.target )[0].style.border = "none";

		window.eoxiaJS.taskManager.shortcut.draggedElement.remove();

		window.eoxiaJS.taskManager.shortcut.refreshKey();

		return false;
	});
};

window.eoxiaJS.taskManager.shortcut.LoadedShortcutSuccess = function( triggeredElement, response ) {
	triggeredElement.after( response.data.template );
	triggeredElement.closest( '.tm-advanced-search' ).find( '.modal-content' ).html( response.data.view );
	triggeredElement.closest( '.tm-advanced-search' ).find( '.modal-footer' ).html( response.data.buttons_view );
};

window.eoxiaJS.taskManager.shortcut.createdShortcutSuccess = function( triggeredElement, response ) {
	jQuery( '.tm-dashboard-shortcuts .active' ).removeClass( 'active' );
	jQuery( '.tm-dashboard-shortcuts .handle-shortcut' ).before( response.data.view_shortcut );
	triggeredElement.closest( '.wpeo-modal' ).find( '.modal-content' ).html( response.data.view_content );
	triggeredElement.closest( '.wpeo-modal' ).find( '.modal-footer' ).html( response.data.view_button );
};

window.eoxiaJS.taskManager.shortcut.deletedShortcutSuccess = function( triggeredElement, response ) {
	triggeredElement.closest( '.shortcut' ).remove();
	jQuery( '.tm-dashboard-shortcuts li[data-key="' + response.data.key + '"]' ).fadeOut();
};

window.eoxiaJS.taskManager.shortcut.displayEditShortcutSuccess = function( triggeredElement, response ) {
	triggeredElement.closest( '.shortcut' ).replaceWith( response.data.view );
};

window.eoxiaJS.taskManager.shortcut.editShortcutSuccess = function( triggeredElement, response ) {
	jQuery( triggeredElement ).closest( '.shortcut' ).html(response.data.view);
};

window.eoxiaJS.taskManager.shortcut.createdFolderShortcutSuccess = function( triggeredElement, response ) {
	jQuery( '.modal-shortcut .folder-0' ).append( response.data.new_item );
	jQuery( '.modal-shortcut .shortcuts-content' ).append( response.data.view );

	jQuery( '.create-folder-form' ).slideToggle();
	jQuery( '.create-folder' ).slideToggle();

	jQuery( '.modal-shortcut .tree .descendants' ).append( response.data.tree_item_view );
};

window.eoxiaJS.taskManager.shortcut.savedOrder = function( triggeredElement, response ) {
	jQuery( '.tm-dashboard-shortcuts' ).replaceWith( response.data.view );
	jQuery( '.modal-shortcut' ).removeClass( 'modal-active' );
};


window.eoxiaJS.taskManager.shortcut.openFolder = function( event ) {
	jQuery( '.modal-shortcut .shortcuts' ).hide();

	var id = parseInt( jQuery( this ).data( 'id' ) );

	jQuery('.tree .item.active').removeClass('active' );

	if ( jQuery( this ).data( 'parent' ) ) {
		jQuery( '.tree .item-0' ).addClass( 'active' );
		jQuery( '.shortcuts.folder-0' ).show();
	} else {
		jQuery('.tree .item.item-' + id).addClass('active');

		jQuery('.folder-' + id ).show();
	}
};

window.eoxiaJS.taskManager.shortcut.refreshKey = function( event ) {
	jQuery( '.shortcuts' ).each( function( key ) {
		var _parent = jQuery( this );
		jQuery( this ).find( '.shortcut' ).each( function ( key_item ) {
			jQuery( this ).find( 'input.order_input' ).attr( 'name', 'order_shortcut[' + _parent.data( 'id' ) + '][' + jQuery( this ).data( 'id' ) + ']' );
		} );
	} );
};

/**
 * Initialise l'objet "setting" ainsi que la méthode "init" obligatoire pour la bibliothèque EoxiaJS.
 *
 * @since 1.5.0
 * @version 1.5.0
 */
window.eoxiaJS.taskManager.stickyNote = {};

window.eoxiaJS.taskManager.stickyNote.init = function() {
	window.eoxiaJS.taskManager.stickyNote.event();
};

window.eoxiaJS.taskManager.stickyNote.event = function() {
	jQuery( document ).on( 'blur', '.toplevel_page_wpeomtm-dashboard .postbox div[contenteditable="true"]', window.eoxiaJS.taskManager.stickyNote.editContent );
	jQuery( document ).on( 'blur keyup paste keydown click', '.toplevel_page_wpeomtm-dashboard .postbox div[contenteditable="true"]', window.eoxiaJS.taskManager.stickyNote.updatePlaceholder );
};

window.eoxiaJS.taskManager.stickyNote.editContent = function() {
	var data = {};
	var element = jQuery( this );

	data.action  = 'edit_note';
	data.note_id = element.closest( '.postbox' ).find( 'input[type="hidden"]' ).val();
	data.content = element.html();

	window.eoxiaJS.loader.display( element.closest( '.postbox' ) );
	window.eoxiaJS.request.send( element, data );
}

window.eoxiaJS.taskManager.stickyNote.updatePlaceholder = function( event ) {
	if ( 0 < jQuery( this ).text().length ) {
		jQuery( this ).closest( '.postbox' ).find( '.placeholder' ).addClass( 'hidden' );
		window.eoxiaJS.taskManager.core.initSafeExit( true );
	} else {
		jQuery( this ).closest( '.postbox' ).find( '.placeholder' ).removeClass( 'hidden' );
		window.eoxiaJS.taskManager.core.initSafeExit( false );
	}
}

/**
 * Le callback en cas de réussite à la requête Ajax "delete_note".
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.8.0
 */
window.eoxiaJS.taskManager.stickyNote.deletedNoteSuccess = function( element, response ) {
	element.closest( '.postbox' ).fadeOut();
};
/**
 * Le callback en cas de réussite à la requête Ajax "add_note".
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.8.0
 */
window.eoxiaJS.taskManager.stickyNote.addedNote = function( element, response ) {
	jQuery( '#tm-indicator-note-add' ).before( response.data.view );
	window.eoxiaJS.taskManager.core.initSafeExit( false );
};
/**
 * Initialise l'objet "task" ainsi que la méthode "init" obligatoire pour la bibliothèque EoxiaJS.
 *
 * @since 1.0.0
 * @version 1.5.0
 */
window.eoxiaJS.taskManager.newTask = {};

window.eoxiaJS.taskManager.newTask.draggedElement;

window.eoxiaJS.taskManager.newTask.init = function() {
	window.eoxiaJS.taskManager.newTask.event();
};

window.eoxiaJS.taskManager.newTask.event = function() {
	jQuery( document ).on( 'blur', '.table-projects .table-type-project  .project-title', window.eoxiaJS.taskManager.newTask.editTitle );
	jQuery( document ).on( 'click', '.table-type-project .project-toggle-task', window.eoxiaJS.taskManager.newTask.togglePoints );
	jQuery( document ).on( 'click', '.table-type-project .project-state .dropdown-item',  window.eoxiaJS.taskManager.newTask.displayState );
	jQuery( document ).on( 'click, focus', '.list-task .table-cell div[contenteditable="true"]', function(e) {
		jQuery( '.cell-focus .table-cell.cell-focus' ).removeClass( 'cell-focus' );
		jQuery( this ).closest( '.table-cell' ).addClass( 'cell-focus' );
	});
	jQuery( document ).on( 'blur', '.list-task .table-cell.cell-focus', function(e) {
		jQuery( this ).removeClass( 'cell-focus' );
	});
	jQuery( '.list-task' ).on( 'scroll', window.eoxiaJS.taskManager.newTask.stickyAction );
	window.eoxiaJS.taskManager.newTask.stickyAction();

	jQuery( document ).on( 'click', '.table-projects .cell-affiliated', function(e) {
		e.stopPropagation();
		window.eoxiaJS.taskManager.task.displayInputTextParent(e, jQuery( this ).find( '.add_parent_to_task'));
	});


	window.eoxiaJS.taskManager.newTask.clickTags();
	window.eoxiaJS.taskManager.newTask.clickUsers();

	jQuery( document ).on( 'dragstart', '.table-header .table-cell', function( e ) {
		window.eoxiaJS.taskManager.newTask.draggedElement = e.currentTarget;
		e.currentTarget.style.border = 'dashed';
		e.originalEvent.dataTransfer.setData("text/plain", e.target.id );
	} );

	jQuery( document ).on( 'dragend', '.table-header .table-cell', function( event ) {
		event.preventDefault();
	} );

	jQuery( document ).on( 'dragover', '.table-header .table-cell', function( event ) {
		event.preventDefault();
		return false;
	} );

	jQuery( document ).on( "dragenter", '.table-header .table-cell', function( event ) {
		if (jQuery( event.target ).hasClass( 'table-cell' ) && ! jQuery( event.target ).hasClass( 'no-order' ) ) {
			jQuery( event.target )[0].style.border = "dashed";

			var target      = jQuery( event.target );
			var targetKey  = target.data('key');
			if (target.hasClass( 'table-cell' ) ) {
				var cells = jQuery( '.table-row:not(.table-header) .table-cell[data-key=' + targetKey + ']' ).addClass( 'border-active' );
			}
		}
	} );

	jQuery( document ).on( "dragleave", '.table-header .table-cell', function( event ) {
		if (jQuery( event.target ).hasClass( 'table-cell' ) && ! jQuery( event.target ).hasClass( 'no-order' ) ) {
			jQuery( event.target )[0].style.border = "none";

			var target      = jQuery( event.target );
			var targetKey  = target.data('key');
			jQuery( '.table-row:not(.table-header) .table-cell[data-key=' + targetKey + ']' ).removeClass( 'border-active' );


		}
	} );

	jQuery( document ).on( 'drop', '.table-header .table-cell', function( ev ) {
		ev.preventDefault();

		if ( ev.stopPropagation() ) {
			ev.stopPropagation();
		}

		var currentElement = jQuery( window.eoxiaJS.taskManager.newTask.draggedElement );
		var newElement     = currentElement.clone();
		var target         = jQuery( ev.target );

		if ( ! jQuery( ev.target ).hasClass( 'table-cell' ) || jQuery( ev.target ).hasClass( 'no-order' ) ) {
			return;
		}

		var draggedKey = currentElement.data( 'key' );
		var targetKey  = target.data('key');

		var cells = jQuery( '.table-row:not(.table-header) .table-cell[data-key=' + draggedKey + ']' );

		cells.each(function() {
			var tmp = jQuery( this ).clone();

			jQuery(this).closest('.table-row').find('.table-cell[data-key=' + targetKey + ']').after(tmp[0].outerHTML);
			jQuery(this).remove();
		});

		jQuery( ev.target ).after( newElement[0].outerHTML );
		jQuery( ev.target )[0].style.border = "none";

		window.eoxiaJS.taskManager.newTask.draggedElement.remove();

		window.eoxiaJS.taskManager.newTask.refreshKey();

		jQuery( '.table-row:not(.table-header) .table-cell[data-key=' + targetKey + ']' ).removeClass( 'border-active' );


		return false;
	});

	jQuery( document ).on( 'click', '.table-projects .dropdown-item.load-complete-point', function( ev ) {
		var data         = {};
		data.action      = 'load_point';
		data._wpnonce    = jQuery( this ).data('nonce');
		data.task_id     = jQuery( this ).data('task-id');
		data.point_state = jQuery( this ).data('point-state' );

		if ( ! jQuery( this ).hasClass( 'active' ) ) {
			var _this = jQuery( this );
			jQuery( this ).addClass( 'active' );
			jQuery.post(ajaxurl, data, function(response) {
				window.eoxiaJS.taskManager.newPoint.loadedPointSuccess( _this, response );
			});
		} else {
			jQuery(this).removeClass('active');

			if (data.point_state == 'completed') {
				jQuery('.table-projects .table-type-task.task-completed[data-post-id=' + data.task_id + ']').slideUp(400, function() {
					jQuery( this ).remove();
				});
			} else {
				jQuery('.table-projects .table-type-task:not(.task-completed)[data-post-id=' + data.task_id + ']').slideUp(400, function() {
					jQuery( this ).remove();
				});
			}
		}
	} );
};

window.eoxiaJS.taskManager.newTask.clickTags = function() {
	jQuery( document ).one( 'click', '.table-projects .project-categories', function(e) {
		jQuery(this).find('.action-attribute').trigger('click');
	});
}

window.eoxiaJS.taskManager.newTask.clickUsers = function() {
	jQuery( document ).one( 'click', '.table-projects .project-users', function(e) {
		jQuery(this).find('.action-attribute').trigger('click');
	});
}

window.eoxiaJS.taskManager.newTask.editTitle = function() {
	var data = {};
	var element;

	if ( ! element ) {
		element = jQuery( this );
	}

	data.action  = 'edit_title';
	data.task_id = element.closest( '.table-row' ).data( 'id' );
	data.title   = element.html();
	window.eoxiaJS.loader.display( element.closest( 'div' ) );
	window.eoxiaJS.request.send( element, data );
};

window.eoxiaJS.taskManager.newTask.togglePoints = function() {
	const projectID = jQuery( this ).closest( '.table-row' ).data( 'id' );
	var element;

	if ( ! element ) {
		element = jQuery( this );
	}

	if ( jQuery( this ).find( '.fas' ).hasClass( 'fa-angle-down' ) ) {

		jQuery( this ).find( '.fas' ).removeClass( 'fa-angle-down' ).addClass( 'fa-angle-right' );
		jQuery( '.table-type-task[data-post-id=' + projectID + ']' ).slideUp(400, function() {
			jQuery( this ).remove();
		});
		jQuery( '.table-type-comment[data-post-id=' + projectID + ']' ).slideUp(400, function() {
			jQuery( this ).remove();
		});

		jQuery( '.table-type-project[data-id=' + projectID + '] .cell-sticky div[data-action="edit_point"]' ).attr( 'data-toggle', false );

	} else {
		var data = {};

		data.action   = 'load_point';
		data._wpnonce = element.data( 'nonce' );
		data.task_id  = element.data( 'id' );
		window.eoxiaJS.loader.display( element );
		window.eoxiaJS.request.send( element, data );

		jQuery( this ).find( '.fas' ).removeClass( 'fa-angle-right' ).addClass( 'fa-angle-down' );
		jQuery( '.table-type-project[data-id=' + projectID + '] .cell-sticky div[data-action="edit_point"]' ).attr( 'data-toggle', true );
	}
};

window.eoxiaJS.taskManager.newTask.displayState = function ( event ) {
	var state          = jQuery( this ).attr( 'data-state' );
	var parent_element = jQuery( this ).closest( '.project-state' );
	parent_element.find( 'input[name="state"]' ).val( state );

	var this_html = jQuery( this ).html();
	parent_element.find( '.dropdown-toggle' ).html( this_html );

	var data = {};
	var element;

	if ( ! element ) {
		element = jQuery( this );
	}
	data.action   = 'task_state';
	data.task_id  = parent_element.data( 'id' );
	data.state = state;
	window.eoxiaJS.loader.display( element );
	window.eoxiaJS.request.send( element, data );
};

window.eoxiaJS.taskManager.newTask.taskStateSuccess = function( element, response ) {
	jQuery( element ).closest( '.table-column' ).replaceWith( response.data.view );
};

window.eoxiaJS.taskManager.newTask.stickyAction = function( e ) {
	var tables = jQuery( '.list-task' );

	tables.each( function( i ) {
		var scrollPos = jQuery( this ).scrollLeft();
		var finalPos = scrollPos + jQuery( this ).width() - 102;
		var finalPosHeader = scrollPos + jQuery( this ).width() - 30;

		jQuery( this ).find( '.cell-sticky' ).css({left: finalPos});
		jQuery( this ).find( '.table-header-edit' ).css({left: finalPosHeader });
	});
};

window.eoxiaJS.taskManager.newTask.editedColumnSuccess = function (triggeredElement, response) {
	jQuery( '.table-header .wpeo-util-hidden' ).removeClass( 'wpeo-util-hidden' );

	triggeredElement.removeClass( 'button-blue' ).addClass( 'button-green' );
	triggeredElement.find( 'i' ).removeClass( 'fa-pencil-alt' ).addClass( 'fa-save' );
	triggeredElement.attr( 'data-action', 'tm_save_columns' );

	jQuery( '.table-header .table-cell' ).attr( 'draggable', true );

	for (var key in response.data.user_columns_def) {
		if (! response.data.user_columns_def[key].displayed) {
			jQuery( '.table-cell[data-key=' + key + ']' ).css({display: 'flex' ,opacity: 0.3}).addClass( 'next-time-hidden');
			jQuery( '.table-cell[data-key=' + key + '] input[type=checkbox]' ).attr( 'checked', false );
		}
	}

	jQuery( '.load-more-button' ).hide();
};

window.eoxiaJS.taskManager.newTask.refreshKey = function( event ) {
	jQuery( '.table-header .table-cell' ).each( function( key ) {
		jQuery( this ).find( 'input[type="hidden"]' ).val(key);
	} );
};

window.eoxiaJS.taskManager.newTask.savedColumnSuccess = function( triggeredElement, response ) {
	jQuery( '.table-header.table-row .input-header' ).addClass( 'wpeo-util-hidden' );
	triggeredElement.removeClass( 'button-green' ).addClass( 'button-blue' );
	triggeredElement.find( 'i' ).removeClass( 'fa-save' ).addClass( 'fa-pencil-alt' );
	triggeredElement.attr( 'data-action', 'tm_edit_columns' );

	jQuery( '.table-header .table-cell' ).attr( 'draggable', false );

	jQuery( '.table-cell.next-time-hidden' ).removeClass( '.next-time-hidden' ).css({display: 'none'});
	jQuery( '.load-more-button' ).show();
};


/**
 * Initialise l'objet "task" ainsi que la méthode "init" obligatoire pour la bibliothèque EoxiaJS.
 *
 * @since 1.0.0
 * @version 1.5.0
 */
window.eoxiaJS.taskManager.task = {};
window.eoxiaJS.taskManager.task.offset = 0;
window.eoxiaJS.taskManager.task.canLoadMore = true;

window.eoxiaJS.taskManager.task.init = function() {
	window.eoxiaJS.taskManager.task.event();
	// // jQuery( '.list-task' ).colcade( {
	// 	items: '.wpeo-project-task',
	// 	columns: '.grid-col'
	// } );
	window.eoxiaJS.taskManager.task.initAutoComplete();
	window.eoxiaJS.taskManager.task.clignotePetitIcone();
};

window.eoxiaJS.taskManager.task.refresh = function() {
	window.eoxiaJS.taskManager.task.initAutoComplete();
};

window.eoxiaJS.taskManager.task.event = function() {
	// jQuery( '.tm-wrap' ).on( 'keypress', '.wpeo-project-task-title', window.eoxiaJS.taskManager.task.keyEnterEditTitle );
	jQuery( '.tm-wrap' ).on( 'blur', '.wpeo-project-task-title', window.eoxiaJS.taskManager.task.editTitle );
	jQuery( document ).on( 'click', '.load-more-button', window.eoxiaJS.taskManager.task.onScrollLoadMore );
	jQuery( '.tm-wrap' ).on( 'click', '.task-header-action .success span', window.eoxiaJS.taskManager.task.closeSuccess );
	jQuery( '#poststuff' ).on( 'click', '#wpeo-task-metabox', window.eoxiaJS.taskManager.task.refresh );
	jQuery( document ).on( 'click', '#tm_include_archive_client', window.eoxiaJS.taskManager.task.showArchiveClient );

	jQuery( document ).on( 'click', '.tm_client_indicator_update', window.eoxiaJS.taskManager.audit.preventDefaultHeader );
	jQuery( document ).on( 'click', '.tm_client_indicator_update_body table tbody .tm_client_indicator', window.eoxiaJS.taskManager.task.OpenTaskRow );

	jQuery( document ).on( 'click', '.wpeo-pagination.pagination-task .pagination-element', window.eoxiaJS.taskManager.task.paginationUpdateTasks );

	jQuery( document ).on( 'click', '.add_parent_to_task', window.eoxiaJS.taskManager.task.displayInputTextParent );

	jQuery( document ).on( 'click change', '.task-search-taxonomy', window.eoxiaJS.taskManager.task.initAutoComplete );

	jQuery( document ).on( 'click', '.tm-task-delink-parent', window.eoxiaJS.taskManager.task.delinkTaskFromParent );

	jQuery( document ).on( 'click', '.wpeo-task-parent-add .wpeo-tag label', window.eoxiaJS.taskManager.task.taskShowAutocompleteParent );
	jQuery( document ).on( 'focusout', '.wpeo-task-parent-add .wpeo-tag ul', window.eoxiaJS.taskManager.task.taskHideAutocompleteParent );


	jQuery( document ).on( 'keyup', '.tm_task_autocomplete_parent', window.eoxiaJS.taskManager.task.taskUpdateAutocompleteParent );

	jQuery( document ).on( 'click keyup', '.wpeo-ul-parent.wpeo-tag-wrap', window.eoxiaJS.taskManager.task.allClientsFocusIn );

	jQuery( document ).on( 'click', '.wpeo-task-parent-add .tm_list_parent_li_element', window.eoxiaJS.taskManager.task.getValueAutocompleteParent );

	jQuery( document ).on( 'change keyup', '.tm_indicator_updateprofile input[type="number"]', window.eoxiaJS.taskManager.task.activateButtonPlanning );

	jQuery( document ).on( 'click', '.table-header .table-cell input[type="checkbox"]', window.eoxiaJS.taskManager.task.showHideColumn );
};

/**
 * Initialise l'autocomplete pour déplacer la tâche.
 *
 * @return {void}
 *
 * @since 1.4.0-ford
 * @version 1.4.0-ford
 */
window.eoxiaJS.taskManager.task.initAutoComplete = function() {
	jQuery( '.search-parent' ).autocomplete( {
		'source': 'admin-ajax.php?action=search_parent',
		'delay': 0,
		'select': function( event, ui ) {
			jQuery( 'input[name="to_element_id"]' ).val( ui.item.id );
			jQuery( this ).closest( '.form-fields' ).find( '.action-input' ).addClass( 'active' );
			event.stopPropagation();
		}
	} );
};

window.eoxiaJS.taskManager.task.onScrollLoadMore = function() {
	var data = {};

	var get = window.location.search.substr(1).split('&');

	window.eoxiaJS.taskManager.task.offset += parseInt( window.task_manager_posts_per_page );
	window.eoxiaJS.taskManager.task.canLoadMore = false;

	data.action = 'load_more_task';
	data.offset = window.eoxiaJS.taskManager.task.offset;
	data.posts_per_page = window.task_manager_posts_per_page;

	for (var key in get) {
		var keyvalue = get[key].split('=');

		data[keyvalue[0]] = keyvalue[1];
	}

	window.eoxiaJS.loader.display( jQuery( '.load-more-button' ) );
	window.eoxiaJS.request.send( jQuery( '.load-more-button' ), data );
};

window.eoxiaJS.taskManager.task.loadedMoreTask = function( element, response ) {
	window.eoxiaJS.taskManager.task.canLoadMore = response.data.can_load_more;

	var elements = jQuery( response.data.view );
	elements.css({display: 'none'});
	jQuery( '.table-projects' ).append( elements );
	elements.slideDown(400);

	var current = parseInt(jQuery( '.table-projects .table-row:not(.table-header)' ).length);
	var total = parseInt(jQuery( '.load-more-button .total' ).text());

	if (current >= total) {
		jQuery( '.load-more-button' ).addClass( 'button-disable' );
		jQuery( '.load-more-button .title' ).text( 'No more entries' );
	}

	jQuery( '.load-more-button .current' ).text( current );

	window.eoxiaJS.taskManager.newTask.stickyAction();
}
/**
 * Envoie une requête pour enregsitrer le nouveau titre de la tâche.
 *
 * @since 1.0.0
 * @version 1.4.0
 *
 * @param  {FocusEvent} event         L'état de l'évènement lors du 'blur'.
 * @param  {HTMLInputElement} element Le champ de texte contenant le titre.
 * @return {void}
 */
window.eoxiaJS.taskManager.task.editTitle = function( event, element ) {
	var data = {};

	if ( ! element ) {
		element = jQuery( this );
	}

	data.action = 'edit_title';
	data._wpnonce = element.data( 'nonce' );
	data.task_id = element.closest( '.wpeo-project-task' ).data( 'id' );
	data.title = element.text();

	window.eoxiaJS.loader.display( element.closest( '.wpeo-task-header' ) );
	window.eoxiaJS.request.send( element, data );
};

/**
 * Appel la méthode 'editTitle' pour modifier le titre lors de l'appuie de la touche entré.
 *
 * @since 1.0.0
 * @version 1.4.0
 *
 * @param  {KeyboardEvent} event L'état du clavier.
 * @return {void}
 */
window.eoxiaJS.taskManager.task.keyEnterEditTitle = function( event ) {
	if ( 13 === event.which || 13 === event.keyCode ) {
		window.eoxiaJS.taskManager.task.editTitle( event, jQuery( this ) );
	}
};

/**
 * Le callback en cas de réussite à la requête Ajax "create_task".
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.0.0.0
 * @version 1.3.6.0
 */
window.eoxiaJS.taskManager.task.createdTaskSuccess = function( element, response ) {
	var tmp = jQuery( response.data.view );
	tmp.css( {display: "none"} );
	jQuery( '.table-projects > .table-header' ).after( tmp );
	tmp.slideDown( 400 );

	tmp.find( '.cell-content' ).addClass( 'cell-focus' );

	window.eoxiaJS.taskManager.core.selectContentEditable( tmp.find( '.project-title' ) );

	window.eoxiaJS.taskManager.newTask.stickyAction();
};

/**
 * Le callback en cas de réussite à la requête Ajax "delete_task".
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.0.0.0
 * @version 1.3.6.0
 */
window.eoxiaJS.taskManager.task.deletedTaskSuccess = function( element, response ) {
	const projectID = element.closest( '.table-row' ).data('id');

	element.closest( '.table-row' ).fadeOut(400, function() { jQuery( this ).remove(); })

	jQuery( '.table-type-task[data-post-id=' + projectID + ']' ).fadeOut(400, function() {
		jQuery( this ).remove();
	});
	jQuery( '.table-type-comment[data-post-id=' + projectID + ']' ).fadeOut(400, function() {
		jQuery( this ).remove();
	});
};

/**
 * Avant d'envoyer la requête pour changer la tâche de couleur.
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant l'action.
 * @param  {Object}         data          		Les données du l'action.
 * @return {void}
 *
 * @since 1.0.0.0
 * @version 1.3.6.0
 */
window.eoxiaJS.taskManager.task.beforeChangeColor = function( triggeredElement, data ) {
	jQuery( triggeredElement ).closest( '.wpeo-project-task' ).removeClass( 'red yellow purple white blue green' );
	jQuery( triggeredElement ).closest( '.wpeo-project-task' ).addClass( jQuery( triggeredElement ).data( 'color' ) );

	return true;
};

/**
 * Le callback en cas de réussite à la requête Ajax "move_task_to".
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.0.0.0
 * @version 1.3.6.0
 */
window.eoxiaJS.taskManager.task.movedTaskTo = function( triggeredElement, response ) {
	jQuery( triggeredElement ).closest( '.wpeo-project-task' ).hide();
};

/**
 * Le callback en cas de réussite à la requête Ajax "notify_by_mail".
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.5.0
 * @version 1.5.0
 */
window.eoxiaJS.taskManager.task.notifiedByMail = function( triggeredElement, response ) {

};
/**
 * Le callback en cas de réussite à la requête Ajax "recompile_task".
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.6.0
 * @version 1.6.0
 */
window.eoxiaJS.taskManager.task.recompiledTask = function( triggeredElement, response ) {
	jQuery( '.table-type-project[data-id=' + response.data.recompiled_elements.task.id + '] .project-time .elapsed' ).text( response.data.recompiled_elements.task.time );

	for (var key in response.data.recompiled_elements.points) {
		jQuery( '.table-type-task[data-id=' + response.data.recompiled_elements.points[key].id + '] .task-time .elapsed' ).text( response.data.recompiled_elements.points[key].time );
	}
};


/**
 * Enlève la classe 'active' de l'élement 'success'.
 *
 * @since 1.5.0
 * @version 1.5.0
 *
 * @param  {MouseEvent} event L'état de la souri.
 *
 * @return {void}
 */
window.eoxiaJS.taskManager.task.closeSuccess = function( event ) {
	jQuery( this ).closest( '.success.active' ).removeClass( 'active' );
};

window.eoxiaJS.taskManager.task.updateIndicatorClientSuccess = function( element, response ) {
	jQuery( '.tm_client_indicator_update_body' ).replaceWith( response.data.view );
	jQuery( '.tm_client_indicator_update #tm_client_indicator_header_minus' ).attr( 'data-year', response.data.year - 1 );
	jQuery( '.tm_client_indicator_update #tm_client_indicator_header_actual' ).attr( 'data-year', response.data.year );
	jQuery( '.tm_client_indicator_update #tm_client_indicator_header_display' ).html( response.data.year );
	jQuery( '.tm_client_indicator_update #tm_client_indicator_header_plus' ).attr( 'data-year', response.data.year + 1 );
};

window.eoxiaJS.taskManager.task.showArchiveClient = function( triggeredElement, response ){

  window.eoxiaJS.taskManager.task.editButtonPaginationClient();

	var pagination_parent = jQuery( this ).parent();

	var data = {};
	data.action    = 'pagination_update_tasks';
	data.page      = jQuery( this ).parent().find( '.wpeo-pagination' ).data( 'page' );
	data.post_id  = jQuery( this ).data( 'post-id' );
	data.next      = jQuery( this ).parent().find( '.wpeo-pagination' ).data( 'page' ); // on récupere la meme page
	data.show      = jQuery( this ).data( 'showarchive' );

	window.eoxiaJS.loader.display( jQuery( this ).parent() );
	window.eoxiaJS.request.send( jQuery( this ), data );
}

window.eoxiaJS.taskManager.task.OpenTaskRow = function( event ){
	var select = jQuery( this );
	var icondown = jQuery( this ).find( '.tag-title .fa-caret-down' );
	var iconup = jQuery( this ).find( '.tag-title .fa-caret-right' );

	if( select.attr( 'data-show' ) == 'true' ){
		icondown.hide();
		iconup.show();
		select.attr( 'data-show', 'false' );
		jQuery( '.tm_client_indicator_' + select.attr( 'data-id' ) + '_' + select.attr( 'data-type' ) ).hide( '200' );
	}else{
		icondown.show();
		iconup.hide();
		select.attr( 'data-show', 'true' );
		jQuery( '.tm_client_indicator_' + select.attr( 'data-id' ) + '_' + select.attr( 'data-type' ) ).show( '200' );
	}
}

window.eoxiaJS.taskManager.task.paginationUpdateTasks = function( event ) {
	var data = {};

	var pagination_parent = jQuery( this ).parent();

	data.action   = 'pagination_update_tasks';
	data.page     = pagination_parent.data( 'page' );
	data.post_id  = pagination_parent.data( 'post-id' );
	data.next     = jQuery( this ).data( 'pagination' );
	data.show     = jQuery( "#tm_include_archive_client" ).data( 'showarchive' );

	window.eoxiaJS.loader.display( jQuery( this ).parent() );
	window.eoxiaJS.request.send( jQuery( this ), data );
}


window.eoxiaJS.taskManager.task.loadedTasksSuccess = function( element, response ) {
	jQuery( '#tm_client_load_task_page' ).replaceWith( response.data.view );

	// jQuery( '.list-task' ).colcade( {
	//	items: '.wpeo-project-task',
	//	columns: '.grid-col'
	//} );

	if( response.data.show_archive ){
		window.eoxiaJS.taskManager.task.editButtonPaginationClient( true, response.data.show_archive );
	}
}

window.eoxiaJS.taskManager.task.editButtonPaginationClient = function( dontKnowStatut = true, showArchive = false ){

  var button_element = jQuery( '#tm_include_archive_client' );

	if( ! dontKnowStatut ){
		var checked = dontKnowStatut;
	}else{
		var checked = button_element.data( 'showarchive' );

	}

	if( checked ){
		button_element.data( 'showarchive', false );

		button_element.css( 'background' , '#f7f7f7' );
		button_element.css( 'color' , '#0073aa;' );

		button_element.find( '.button-icon' ).removeClass( 'fa-check-square' ).addClass( 'fa-square' );

	}else{
		button_element.data('showarchive', true );

		button_element.css( 'background' , '#0084ff' );
		button_element.css( 'color' , '#fff' );

		button_element.find( '.button-icon' ).removeClass( 'fa-square' ).addClass( 'fa-check-square' );

	}
}

window.eoxiaJS.taskManager.task.displayInputTextParent = function( event, element ){
	if ( ! element ) {
		var element = jQuery( this );
	}

	if( ! element.data( 'request_send' ) ){
		element.addClass( 'button-disabled' );
		element.css( 'background', '#0084ff' );
		element.css( 'color', 'white' );
		element.data( 'request_send', "true" );
		var data = {
			action: 'load_all_task_parent_data',
			_wpnonce: element.data( 'nonce' )
		};

		window.eoxiaJS.loader.display( element.closest( '.wpeo-ul-parent' ) );
		window.eoxiaJS.request.send( element, data );
	}else{
		if( ! element.hasClass( 'button-disabled' ) && element.closest( '.wpeo-ul-parent' ).find( '.task_search-taxonomy' ).val() ){

			var data = {
				action: 'link_parent_to_task',
				id : element.data( 'id' ),
				parent_id: element.closest( '.wpeo-ul-parent' ).find( '.task_search-taxonomy' ).val()
			};

			window.eoxiaJS.loader.display( element.closest( '.wpeo-ul-parent' ) );
			window.eoxiaJS.request.send( element, data );
		}else{
			// INVALID ID
		}
	}
}

window.eoxiaJS.taskManager.task.delinkTaskFromParent = function( event ){
	if( confirm( window.indicatorString.delink_parent ) ){
		var data = {
			action: 'delink_parent_to_task',
			id : jQuery( this ).data( 'id' ),
		};

		window.eoxiaJS.loader.display( jQuery( this ).closest( '.wpeo-ul-parent' ) );
		window.eoxiaJS.request.send( jQuery( this ), data );
	}
}

window.eoxiaJS.taskManager.task.loadedAllClientsCommands = function( element, response ){

	jQuery( element ).parent().find('.wpeo-task-parent-add').html( response.data.view );
	jQuery( element ).parent().find('.wpeo-task-parent-add').show( '400' );
	jQuery( element ).parent().find('.wpeo-task-parent-add .tm_task_autocomplete_parent').focus();

}

window.eoxiaJS.taskManager.task.allClientsFocusIn = function( event ){
	jQuery( this ).find('.wpeo-task-parent-add .wpeo-tag ul').show();
}

window.eoxiaJS.taskManager.task.taskShowAutocompleteParent = function( event ){
	jQuery( this ).find( 'ul' ).show( '200' );
	var div = jQuery( this ).find( '.tm_task_autocomplete_parent' );
	setTimeout(function() {
			div.focus();
	}, 0);
}

window.eoxiaJS.taskManager.task.taskHideAutocompleteParent = function( event ){
	jQuery( this ).find( 'ul' ).hide( '200' );
}


window.eoxiaJS.taskManager.task.taskUpdateAutocompleteParent = function( event ){
	event.stopPropagation();
	var value = jQuery( this ).val().toLowerCase();

	var list_parent = jQuery( this ).closest( '.wpeo-tag' ).find( 'ul' );
	var all = 0;
	var valid = 0;
	if( value == "" ){
		jQuery( this ).closest( '.wpeo-tag' ).find( 'ul li' ).show();
		list_parent.find( '.tm_list_infoempty' ).hide();
		return true;
	}

	var valid_parent = [];

	list_parent.find( '.tm_list_parent_li_element' ).each(function( element ) {
		if( valid >= 12 ){
			jQuery( this ).hide();
		}else{
			var a = jQuery( this ).html().trim().toLowerCase();
			if( a.includes( value ) ){
				if( ! jQuery.inArray( jQuery( this ).data( 'key' ), valid_parent ) !== -1 ){
					valid_parent.push( jQuery( this ).data( 'key' ) );
				}
				valid ++;
				jQuery( this ).show();
			}else{
				jQuery( this ).hide();
			}
		}
	});

	var elementfound = false;
	list_parent.find( '.tm_list_parent' ).each(function( element ) {
		if( jQuery.inArray( jQuery( this ).data( 'key' ), valid_parent ) !== -1 ){
			elementfound = true;
			jQuery( this ).show();
		}else{
			jQuery( this ).hide();
		}
	});

	if( ! elementfound ){ // Aucun element n'a était trouvé
		list_parent.find( '.tm_list_infoempty' ).show();
	}else{
		list_parent.find( '.tm_list_infoempty' ).hide();
	}
}

window.eoxiaJS.taskManager.task.getValueAutocompleteParent = function( event ){
	var value = jQuery( this ).html();
	var id = jQuery( this ).data( 'id' );

	jQuery( this ).closest( '.wpeo-tag' ).find( 'input[type="text"]' ).val( value.trim() );
	jQuery( this ).closest( '.wpeo-tag' ).find( 'input[type="hidden"]' ).val( id );
	jQuery( this ).closest( '.wpeo-ul-parent' ).find( '.add_parent_to_task' ).removeClass( 'button-disabled' );

	jQuery( this ).parent().hide( '200' );
}

window.eoxiaJS.taskManager.task.reloadTaskParentElement = function( element, response ){
	jQuery( element ).closest( '.wpeo-ul-parent' ).replaceWith( response.data.view );
}

window.eoxiaJS.taskManager.task.clignotePetitIcone = function( event ){
	var interval = 0;
	var myReq;
	var k = [67, 65, 80, 71, 69, 77, 73, 78 ,73],
	n = 0;

	var oui = false;
	var color = [];

	jQuery(document).keydown(function (e) {

   if (e.keyCode === k[n++]) {
     if (n === k.length) {
         // oui = true;
         interval = setInterval( function(){ jQuery( '.fas' ).each( function( ){
						jQuery( this ).css( 'color', '#'+Math.floor(Math.random()*9999).toString(16) );
	         	// jQuery( this ).rotate(Math.floor(Math.random()*25));
         }); }, 200 );
         n = 0;
         return false;
     }
   }else {
		 clearInterval( interval );
      n = 0;
   }
	});
}

window.eoxiaJS.taskManager.task.activateButtonPlanning = function( event ){
	jQuery( this ).closest( '.tm_indicator_updateprofile' ).find( '.button-add-row-plan .disabled' ).removeClass( 'disabled' );
};

window.eoxiaJS.taskManager.task.returnSuccessUpdateTaskPerPage = function( element, response ) {
	jQuery( '.pmg-sotut-container' ).append( '<p style="color:green">' + response.data.text_success + '</p>' );
	window.location.reload();
};

window.eoxiaJS.taskManager.task.taskHidedPoints = function( element, response ) {
	jQuery( element ).closest( '.wpeo-project-task' ).html( response.data.view );
};

window.eoxiaJS.taskManager.task.showHideColumn = function( event ) {
	const key = jQuery( this ).closest( '.table-cell' ).data( 'key' );

	if (jQuery( this ).is( ':checked' ) ) {
		jQuery( '.table-cell[data-key=' + key + ']' ).removeClass( 'next-time-hidden' );
		jQuery( '.table-cell[data-key=' + key + ']' ).css({opacity: 1});
	} else {
		jQuery( '.table-cell[data-key=' + key + ']' ).css({opacity: 0.3});
		jQuery( '.table-cell[data-key=' + key + ']' ).addClass( 'next-time-hidden' );

	}
};

/**
 * Initialise l'objet "timeExceeded" ainsi que la méthode "init" obligatoire pour la bibliothèque EoxiaJS.
 *
 * @since 1.5.0
 * @version 1.6.1
 */
window.eoxiaJS.taskManager.timeExceeded = {};

window.eoxiaJS.taskManager.timeExceeded.init = function() {
	window.eoxiaJS.taskManager.timeExceeded.event();
};

window.eoxiaJS.taskManager.timeExceeded.event = function() {
};

/**
 * Le callback en cas de réussite à la requête Ajax "load_time_exceeded".
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.5.0
 * @version 1.6.1
 */
window.eoxiaJS.taskManager.timeExceeded.loadedTimeExceeded = function( triggeredElement, response ) {
	jQuery( '#tm-indicator-time-exceeded .inside table' ).replaceWith( response.data.view );
};

/**
 * Initialise l'objet "tag" ainsi que la méthode "init" obligatoire pour la bibliothèque EoxiaJS.
 *
 * @since 1.0.0
 * @version 1.6.0
 */
window.eoxiaJS.taskManager.tag = {};

window.eoxiaJS.taskManager.tag.init = function() {
	window.eoxiaJS.taskManager.tag.event();
};

window.eoxiaJS.taskManager.tag.event = function() { };

/**
 * Lorsqu'on clique sur la barre des tags, avant de lancer l'action on ajoute une classe permettant de bloquer les actions futures tant que cette action n'est pas terminée
 *
 * @param  {HTMLUListElement} element  The element clicked where to display tags.
 */
window.eoxiaJS.taskManager.tag.before_load_tags = function( element ) {
	element.addClass( 'no-action' );

	return true;
};

/**
 * Le callback en cas de réussite à la requête Ajax "archive_task".
 * Remplaces le contenu de list-task.
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.0.0
 * @version 1.0.0
 */
window.eoxiaJS.taskManager.tag.archivedTaskSuccess = function( triggeredElement, response ) {
	const projectID = triggeredElement.closest( '.table-row' ).data('id');

	triggeredElement.closest( '.table-row' ).fadeOut(400, function() { jQuery( this ).remove(); })

	jQuery( '.table-type-task[data-post-id=' + projectID + ']' ).fadeOut(400, function() {
		jQuery( this ).remove();
	});
	jQuery( '.table-type-comment[data-post-id=' + projectID + ']' ).fadeOut(400, function() {
		jQuery( this ).remove();
	});
};

/**
 * Le callback en cas de réussite à la requête Ajax "unarchive_task".
 * Remplaces le contenu de list-task.
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.0.0
 * @version 1.0.0
 */
window.eoxiaJS.taskManager.tag.unarchivedTaskSuccess = function( triggeredElement, response ) {
	jQuery( triggeredElement ).closest( '.wpeo-project-task' ).remove();
};

/**
 * Le callback en cas de réussite à la requête Ajax "load_tags".
 * Remplaces le contenu de ".wpeo-tag-wrap" par la vue reçu dans la réponse AJAX.
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.0.0
 * @version 1.0.0
 */
window.eoxiaJS.taskManager.tag.loadedTagSuccess = function( element, response ) {
	element.closest( '.wpeo-tag-wrap' ).replaceWith( response.data.view );
	window.eoxiaJS.refresh();
};

/**
 * Le callback en cas de réussite à la requête Ajax "close_tag_edit_mode".
 * Remplaces le contenu de ".wpeo-tag-wrap" par la vue reçu dans la réponse AJAX.
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.0.0
 * @version 1.0.0
 */
window.eoxiaJS.taskManager.tag.closedTagEditMode = function( element, response ) {
	element.closest( '.wpeo-tag-wrap' ).replaceWith( response.data.view );
	window.eoxiaJS.refresh();
	window.eoxiaJS.taskManager.newTask.clickTags();
};

/**
 * Cette méthode est appelé automatiquement lors du clique sur une catégorie a affecter.
 *
 * @param  {HTMLUListElement} element L'élément déclenchant la méthode au clique.
 * @return {void}
 *
 * @since 1.0.0
 * @version 1.3.6.0
 */
window.eoxiaJS.taskManager.tag.beforeAffectTag = function( element ) {
	element.addClass( 'active' );

	return true;
};

/**
 * Cette méthode est appelé automatiquement lors du clique sur une catégorie a désaffecter.
 *
 * @param  {HTMLUListElement} element L'élément déclenchant la méthode au clique.
 * @return {void}
 *
 * @since 1.0.0
 * @version 1.3.6.0
 */
window.eoxiaJS.taskManager.tag.beforeUnaffectTag = function( element ) {
	element.removeClass( 'active' );

	return true;
};

/**
 * Le callback en cas de réussite à la requête Ajax "create_tag".
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.0.0
 * @version 1.3.6.0
 */
window.eoxiaJS.taskManager.tag.createdTagSuccess = function( triggeredElement, response ) {
	jQuery( '.wpeo-tag-title' ).after( response.data.view );
	jQuery( 'input[name="tag_name"]' ).val( '' );
};

/**
 * Le callback en cas de réussite à la requête Ajax "tag_affectation".
 *
 * @param  {HTMLDivElement} element  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.0.0
 * @version 1.6.0
 */
window.eoxiaJS.taskManager.tag.affectedTagSuccess = function( element, response ) {
	element.attr( 'data-action', 'tag_unaffectation' );
	element.attr( 'data-before-method', 'beforeUnaffectTag' );
	element.attr( 'data-nonce', response.data.nonce );

	if ( response.data.go_to_archive ) {
		element.closest( '.wpeo-project-task' ).hide();

		window.eoxiaJS.refresh();
	}
};

/**
 * Le callback en cas de réussite à la requête Ajax "tag_unaffectation".
 *
 * @param  {HTMLDivElement} element  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.0.0
 * @version 1.6.0
 */
window.eoxiaJS.taskManager.tag.unaffectedTagSuccess = function( element, response ) {
	element.attr( 'data-action', 'tag_affectation' );
	element.attr( 'data-before-method', 'beforeAffectTag' );
	element.attr( 'data-nonce', response.data.nonce );

	if ( response.data.go_to_all_task ) {
		element.closest( '.wpeo-project-task' ).remove();

		window.eoxiaJS.refresh();
	}
};

/**
 * Initialise l'objet "tools" ainsi que la méthode "init" obligatoire pour la bibliothèque EoxiaJS.
 *
 * @since 1.5.0
 * @version 1.5.0
 */
window.eoxiaJS.taskManager.tools = {};

/**
 * Méthode 'init' obligatoire.
 *
 * @since 1.5.0
 * @version 1.5.0
 *
 * @return {void}
 */
window.eoxiaJS.taskManager.tools.init = function() {
	window.eoxiaJS.taskManager.tools.event();
};

/**
 * Méthode 'event'.
 *
 * @since 1.5.0
 * @version 1.5.0
 *
 * @return {void}
 */
window.eoxiaJS.taskManager.tools.event = function() {
};
