window.eoxiaJS.taskManager = {};
window.eoxiaJS.taskManagerFrontend = {};

/**
 * Initialise l'objet "core" ainsi que la méthode "init" obligatoire pour la bibliothèque EoxiaJS.
 *
 * @since 1.0.0
 * @version 1.0.0
 */

window.eoxiaJS.taskManager.core = {};

/**
 * La méthode appelée automatiquement par la bibliothèque EoxiaJS.
 *
 * @return {void}
 *
 * @since 1.0.0
 * @version 1.0.0
 */
window.eoxiaJS.taskManager.core.init = function() {
	window.eoxiaJS.taskManager.core.event();
};

/**
 * La méthode contenant tous les évènements pour la core.
 *
 * @since 1.0.0
 * @version 1.0.0
 *
 * @return {void}
 */
window.eoxiaJS.taskManager.core.event = function() {
	jQuery( document ).on( 'click', '.tm-wrap .notification.patch-note.active', window.eoxiaJS.taskManager.core.openPopup );
	jQuery( document ).on( 'click', '.tm-wrap .notification.patch-note .close', window.eoxiaJS.taskManager.core.closeNotification );
};

/**
 * Ajoutes la classe 'active' dans l'élement 'popup.path-note'.
 *
 * @since 1.0.0
 * @version 1.0.0
 *
 * @param  {MouseEvent} event Les attributs de l'évènement.
 * @return {void}
 */
window.eoxiaJS.taskManager.core.openPopup = function( event ) {
	event.stopPropagation();
	jQuery( '.tm-wrap .popup.patch-note' ).addClass( 'active' );
};

/**
 * Ajoutes la classe 'active' dans l'élement 'popup.path-note'.
 *
 * @since 1.0.0
 * @version 1.0.0
 *
 * @param  {MouseEvent} event Les attributs de l'évènement.
 * @return {void}
 */
window.eoxiaJS.taskManager.core.closeNotification = function( event ) {
	event.stopPropagation();
	jQuery( this ).closest( '.notification' ).removeClass( 'active' );
};

/**
 * Actives ou désactive l'évènement unload pour le "safeExit".
 *
 * @since 1.6.0
 * @version 1.6.0
 *
 * @param  {boolean} add True active, false désactive l'évènement.
 * @return {void}
 */
window.eoxiaJS.taskManager.core.initSafeExit = function( add ) {
	if ( add ) {
		window.addEventListener( 'beforeunload', window.eoxiaJS.taskManager.core.safeExit );
	} else {
		window.removeEventListener( 'beforeunload', window.eoxiaJS.taskManager.core.safeExit );

	}
}
/**
 * Ajoutes une popup si l'utilisateur essai de quitter la page.
 *
 * @since 1.6.0
 * @version 1.6.0
 *
 * @return {void}
 */
window.eoxiaJS.taskManager.core.safeExit = function() {
	var confirmationMessage = 'The changes you have made will not be saved.';

	event.returnValue = confirmationMessage;
	return confirmationMessage;
}

window.eoxiaJS.taskManager.input = {};

window.eoxiaJS.taskManager.input.init = function() {
	window.eoxiaJS.taskManager.input.event();
};

window.eoxiaJS.taskManager.input.event = function() {
  jQuery( document ).on( 'keyup', '.tm-wrap .form-element input, .tm-wrap .form-element textarea', window.eoxiaJS.taskManager.input.keyUp );
};

window.eoxiaJS.taskManager.input.keyUp = function( event ) {
	if ( 0 < jQuery( this ).val().length ) {
		jQuery( this ).closest( '.form-element' ).addClass( 'form-active' );
	} else {
		jQuery( this ).closest( '.form-element' ).removeClass( 'form-active' );
	}
};

/**
 * Initialise l'objet "comment" ainsi que la méthode "init" obligatoire pour la bibliothèque EoxiaJS.
 *
 * @since 1.0.0
 * @version 1.6.0
 */
window.eoxiaJS.taskManager.parseContent = {};
window.eoxiaJS.taskManager.parseContent.currentInput;
window.eoxiaJS.taskManager.parseContent.currentSuggest;
window.eoxiaJS.taskManager.parseContent.parseContent;
window.eoxiaJS.taskManager.parseContent.startPos;
window.eoxiaJS.taskManager.parseContent.endPos;

/**
 * La méthode obligatoire pour la biblotèque EoxiaJS.
 *
 * @return {void}
 *
 * @since 1.0.0
 * @version 1.0.0
 */
window.eoxiaJS.taskManager.parseContent.init = function() {
	window.eoxiaJS.taskManager.parseContent.event();

	wp.heartbeat.enqueue( 'refresh-index' );
};

/**
 * Initialise tous les évènements liés au comment de Task Manager.
 *
 * @return {void}
 *
 * @since 1.0.0
 * @version 1.5.0
 */
window.eoxiaJS.taskManager.parseContent.event = function() {
	jQuery( document ).on( 'blur keyup paste keydown click', '.comments .comment .content, .wpeo-point-new-contenteditable', window.eoxiaJS.taskManager.parseContent.parse );
	jQuery( document ).on( 'keydown', window.eoxiaJS.taskManager.parseContent.navigate );
	jQuery( document ).on( 'click', '.suggest li', window.eoxiaJS.taskManager.parseContent.selectSuggested );

	jQuery( document ).on( 'heartbeat-tick.refresh-index', function( event, data ) {
		taskManager.data = data.task_manager_data;
	} );
};

window.eoxiaJS.taskManager.parseContent.navigate = function( event ) {
	if ( window.eoxiaJS.taskManager.parseContent.currentSuggest ) {
		if ( window.eoxiaJS.taskManager.parseContent.currentSuggest.hasClass( 'dropdown-active' ) ) {
			switch (event.keyCode) {
				case 40: // BAS
					var next = window.eoxiaJS.taskManager.parseContent.currentSuggest.find( 'li.focus' ).next();

					if (next.length == 0 ) {
						next = window.eoxiaJS.taskManager.parseContent.currentSuggest.find( 'li:first' );
					}

					window.eoxiaJS.taskManager.parseContent.currentSuggest.find( 'li.focus' ).removeClass( 'focus' );
					next.addClass( 'focus' );

					event.preventDefault();
				break;
				case 38: // HAUT
					var prev = window.eoxiaJS.taskManager.parseContent.currentSuggest.find( 'li.focus' ).prev();

					if (prev.length == 0 ) {
						prev = window.eoxiaJS.taskManager.parseContent.currentSuggest.find( 'li:last' );
					}

					window.eoxiaJS.taskManager.parseContent.currentSuggest.find( 'li.focus' ).removeClass( 'focus' );
					prev.addClass( 'focus' );

					event.preventDefault();
				break;
				case 13:
				case 9:
					window.eoxiaJS.taskManager.parseContent.selectSuggested();
					event.preventDefault();
				break;
			}
		}
	}
}

window.eoxiaJS.taskManager.parseContent.selectSuggested = function() {
	var text = window.eoxiaJS.taskManager.parseContent.currentInput.text();
	var startText = text.substr( 0, window.eoxiaJS.taskManager.parseContent.startPos );
	var endText = undefined;
	if ( window.eoxiaJS.taskManager.parseContent.endPos > -1 ) {
		endText = text.substr( window.eoxiaJS.taskManager.parseContent.startPos + window.eoxiaJS.taskManager.parseContent.parseContent.length );
	}
	var replacedText = window.eoxiaJS.taskManager.parseContent.parseContent;

	replacedText = replacedText.replace( replacedText, window.eoxiaJS.taskManager.parseContent.currentSuggest.find( 'li.focus' ).data( 'value' ) );

	if ( endText ) {
		text = startText + replacedText + endText;
	} else {
		text = startText + replacedText;
	}

	var lengthText = startText + replacedText;

	window.eoxiaJS.taskManager.parseContent.currentInput.text( text );

	var el = window.eoxiaJS.taskManager.parseContent.currentInput[0];
	var range = document.createRange();
	var sel = window.getSelection();
	sel.collapse(el.firstChild, lengthText.length);

	window.eoxiaJS.taskManager.parseContent.currentSuggest.removeClass( 'dropdown-active' );
}

/**
 * Met à jour le champ caché contenant le texte du comment écris dans la div "contenteditable".
 *
 * @param  {MouseEvent} event L'évènement de la souris lors de l'action.
 * @return {void}
 *
 * @since 1.0.0
 * @version 1.6.0
 */
window.eoxiaJS.taskManager.parseContent.parse = function( event ) {
	if ( 'keyup' == event.type && (event.which <= 90 && event.which >= 48 ) || event.which == 32 || event.which == 37 || event.which == 39 || ( event.which >= 96 && event.which <= 105 ) || event.which == 8 ) {
		window.eoxiaJS.taskManager.parseContent.currentInput = jQuery( this );
		var x = getSelectionCoords().x;
		var position = jQuery( this ).offset();

		var foundHashtag = false;
		var endPos = getCaretPosition(jQuery( this )[0]);
		var startPos = -1;
		var stringToParse = '';
		var currentText = jQuery( this ).text();

		// Cherche fin de la chaine de caractère

		var i = endPos;
		while ( ( i - 1 ) >= 0 ) {
			if ( currentText[ i - 1 ].match(/\s/g)) {
				foundHashtag = false;
				startPos = -1;
				break;
			} else if ( currentText[ i - 1 ] != '#' ) {
				i--;
			} else {
				foundHashtag = true;
				startPos = i;
				break;
			}
		}

		i = startPos;

		if ( i < - 1 ) {
			i = 0;
		}

		while (true) {
			if ( currentText[i] ) {
				if ( currentText[i].match(/\s/g)) {
					endPos = i;
					break;
				}
			} else {
				endPos = -1;
				break;
			}
			i++;
		}

		if ( foundHashtag ) {
			if ( endPos != - 1 && startPos != -1 ) {
				stringToParse = currentText.substr( startPos, endPos - startPos );
			} else if (endPos != -1 && startPos == -1) {
				stringToParse = currentText.substr(0, endPos);
			} else if( endPos == -1 && startPos != -1) {
				stringToParse = currentText.substr(startPos);
			} else {
				stringToParse = currentText;
			}
		}

		window.eoxiaJS.taskManager.parseContent.startPos = startPos;
		window.eoxiaJS.taskManager.parseContent.endPos = endPos;

		window.eoxiaJS.taskManager.parseContent.currentSuggest = jQuery( this ).closest( 'li' ).find( '.suggest' );

		if ( foundHashtag ) {
			window.eoxiaJS.taskManager.parseContent.parseContent = stringToParse;
			window.eoxiaJS.taskManager.parseContent.currentSuggest.addClass( 'dropdown-active' );
			window.eoxiaJS.taskManager.parseContent.currentSuggest.css( {
				'left': (x - position.left) + 'px',
				'top': 20,
			} );
		} else {
			window.eoxiaJS.taskManager.parseContent.currentSuggest.removeClass( 'dropdown-active' );
		}

		var list = {};

		var output = '';


		if ( stringToParse ) {
			list = window.eoxiaJS.taskManager.getResultsFromParsedContent( list, stringToParse, true );
			list = window.eoxiaJS.taskManager.getResultsFromParsedContent( list, stringToParse );
		} else {
			for (var key in taskManager.data.last) {

				var content  = taskManager.data.last[key].content;
				var type     = taskManager.data.last[key].type;
				var id       = taskManager.data.last[key].id;
				var id_index = taskManager.data.last[key].id_index;

				list[id_index] = {
					id: id,
					content: content,
					type: type
				};
			}
		}

		var first = true;

		for (var key in list ) {
			var type_value = '';

			if ( list[key].type == 'point' ) {
				type_value = 'P';
			} else if( list[key].type == 'comment' ) {
				type_value = 'C';
			} else {
				type_value = 'T';
			}

			if ( first ) {
				output += '<li class="dropdown-item navigation focus" data-value="' + key + '" data-type="' + list[key].type + '" data-id="' + list[key].id + '"><span class="id">#' + key + '</span>' + list[key].content + '</li>';
				first = false;
			} else {
				output += '<li class="dropdown-item navigation" data-value="' + key + '" data-type="' + list[key].type + '" data-id="' + list[key].id + '"><span class="id">#' + key + '</span>' + list[key].content + '</li>';
			}
		}

		if ( 0 === Object.keys( list ).length ) {
				window.eoxiaJS.taskManager.parseContent.currentSuggest.removeClass( 'dropdown-active' );
		}

		window.eoxiaJS.taskManager.parseContent.currentSuggest.find( '.dropdown-content' ).html( output );
	}
};

window.eoxiaJS.taskManager.getResultsFromParsedContent = function( list, stringToParse, priorityID ) {
	if ( 5 <= Object.keys( list ).length ) {
		return list;
	}

	for (var key in taskManager.data.list) {
		if ( 5 <= Object.keys( list ).length ) {
			break;
		}

		var content = taskManager.data.list[key].content;
		var type    = taskManager.data.list[key].type;
		var id      = taskManager.data.list[key].id;

		if ( priorityID && stringToParse == id ) {
			list[key] = {
				id: id,
				content: content,
				type: type
			};
		} else if( !priorityID && ( stringToParse == key || content.indexOf( stringToParse ) != - 1 ) ) {
			list[key] = {
				id: id,
				content: content,
				type: type
			};
		}
	}

	return list;
};

function getSelectionCoords() {
	var sel = document.selection, range, rect;
	var x = 0, y = 0;
	if ( sel ) {
		if ( sel.type != "Control" ) {
			range = sel.createRange();
			range.collapse( true );
			x = range.boundingLeft;
			y = range.boundingTop;
		}
	} else if ( window.getSelection ) {
		sel = window.getSelection();
		if ( sel.rangeCount ) {
			range = sel.getRangeAt( 0 ).cloneRange();
			if ( range.getClientRects ) {
				range.collapse( true );
				if ( range.getClientRects().length > 0 ) {
					rect = range.getClientRects()[0];
					x = rect.left;
					y = rect.top;
				}
			}

			if ( x == 0 && y == 0 ) {

				var span = document.createElement( "span" );
				if ( span.getClientRects ) {
					span.appendChild( document.createTextNode( "\u200b" ) );
					range.insertNode( span );
					rect = span.getClientRects()[0];
					x = rect.left;
					y = rect.top;
					var spanParent = span.parentNode;
					spanParent.removeChild( span );

					spanParent.normalize();
				}
			}
		}
	}

	return { x: x, y: y };
}

function setCursorPosition( obj, pos ) {

	if(obj != null) {
		if(obj.createTextRange) {
			var range = obj.createTextRange();
			range.move('character', pos);
			range.select();
		} else {
			if(obj.selectionStart) {
				obj.focus();
				obj.setSelectionRange(pos, pos);
			} else {
				obj.focus();
			}
		}
	}
}

function getCaretPosition( editableDiv ) {
	var caretPos = 0,
	sel, range;
	if ( window.getSelection ) {
		sel = window.getSelection();
		if ( sel.rangeCount ) {
			range = sel.getRangeAt( 0 );
			if ( range.commonAncestorContainer.parentNode == editableDiv ) {
				caretPos = range.endOffset;
			}
		}
	} else if ( document.selection && document.selection.createRange ) {
		range = document.selection.createRange();
		if ( range.parentElement() == editableDiv ) {
			var tempEl = document.createElement( "span" );
			editableDiv.insertBefore( tempEl, editableDiv.firstChild );
			var tempRange = range.duplicate();
			tempRange.moveToElementText( tempEl );
			tempRange.setEndPoint( "EndToEnd", range );
			caretPos = tempRange.text.length;
		}
	}
	return caretPos;
}

/**
 * Initialise l'objet "activity" ainsi que la méthode "init" obligatoire pour la bibliothèque EoxiaJS.
 *
 * @since 1.5.0
 * @version 1.5.0
 */
window.eoxiaJS.taskManager.activity = {};

/**
 * Méthode 'init' obligatoire.
 *
 * @since 1.5.0
 * @version 1.5.0
 *
 * @return {void}
 */
window.eoxiaJS.taskManager.activity.init = function() {
	window.eoxiaJS.taskManager.activity.event();
};

/**
 * Méthode 'event'.
 *
 * @since 1.5.0
 * @version 1.5.0
 *
 * @return {void}
 */
window.eoxiaJS.taskManager.activity.event = function() {
	jQuery( document ).on( 'click', '.activities .load-more-history', window.eoxiaJS.taskManager.activity.loadMoreHistory );

	jQuery( '.tm-wrap' ).on( 'click', '.tm-task-display-method-buttons .list-display', window.eoxiaJS.taskManager.activity.switchViewToLine );
};

/**
 * Réaffiches les points lors du clic.
 *
 * @since 1.5.0
 * @version 1.5.0
 *
 * @param  {ClickEvent} event         L'état de l'évènement lors du 'click'.
 * @return {void}
 */
window.eoxiaJS.taskManager.activity.switchViewToLine = function( event ) {
	var taskElement = jQuery( this ).closest( '.wpeo-project-task' );
	taskElement.find( '.tm-task-display-method-buttons .wpeo-button.active' ).removeClass( 'active' );
	jQuery( this ).addClass( 'active' );
	taskElement[0].querySelector( '.bloc-activities' ).style.display = 'none';
	this.closest( '.wpeo-project-task' ).querySelector( '.points.sortable' ).style.display = 'block';
};

/**
 * Envoie une requête pour charger plus d'évènement dans l'historique.
 *
 * @since 1.5.0
 * @version 1.6.0
 *
 * @return void
 */
window.eoxiaJS.taskManager.activity.loadMoreHistory = function( event ) {
	var element = jQuery( this );
	var data = {
		action: 'load_last_activity',
		_wpnonce: element.closest( '.wpeo-project-task' ).find( '.dashicons-screenoptions' ).data( 'nonce' ),
		tasks_id: element.closest( '.wpeo-project-task' ).data( 'id' ),
		offset: element.closest( '.activities' ).find( '.offset-event' ).val(),
		last_date: element.closest( '.activities' ).find( '.last-date' ).val()
	};
	window.eoxiaJS.loader.display( element );

	if ( element.closest( '.popup.last-activity' ).length ) {
		data.term = jQuery( '.wpeo-general-search input[type="text"]' ).val();
		data.follower_id_selected = jQuery( '.wpeo-header-search .follower_id_selected' ).val();
		data.categories_id_selected = jQuery( 'input[name="categories_id_selected"]' ).val();
	}

	jQuery.post( ajaxurl, data, function( response ) {
		element.closest( '.activities' ).find( '.offset-event' ).val( response.data.offset );
		element.closest( '.activities' ).find( '.content:first' ).append( response.data.view );
		element.closest( '.activities' ).find( '.last-date' ).val( response.data.last_date );

		if ( response.data.end ) {
			element.closest( '.activities' ).find( '.load-more-history' ).hide();
		} else {
			element.closest( '.activities' ).find( '.load-more-history' ).show();
		}

		window.eoxiaJS.loader.remove( element.closest( '.activities' ).find( '.load-more-history' ) );
	} );
};

/**
 * Récupères les critères de recherche dans la navigation avant d'ouvrir la POPUP des dernières activitées.
 *
 * @since 1.5.0
 * @version 1.5.0
 *
 * @param  {Element} element L'élément déclenchant l'ouverture de la POPUP.
 * @return {Object}
 */
window.eoxiaJS.taskManager.activity.getDataBeforeOpenPopup = function( element ) {
	return {
		term: jQuery( '.wpeo-general-search input[type="text"]' ).val(),
		follower_id_selected: jQuery( '.wpeo-header-search .follower_id_selected' ).val(),
		categories_id_selected: jQuery( 'input[name="categories_id_selected"]' ).val()
	};
};

/**
 * Le callback en cas de réussite à la requête Ajax "load_last_activity".
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.5.0
 * @version 1.6.0
 */
window.eoxiaJS.taskManager.activity.loadedLastActivity = function( triggeredElement, response ) {
	
	if ( triggeredElement.closest( '.wpeo-project-task' ).length ) {
		var taskElement = triggeredElement.closest( '.wpeo-project-task' );
		triggeredElement.addClass( 'active' );
		triggeredElement.closest( '.tm-task-display-method-buttons' ).find( '.list-display.active' ).removeClass( 'active' );
		triggeredElement[0].closest( '.wpeo-project-task' ).querySelector( '.points' ).style.display = 'none';
		taskElement.find( '.bloc-activities' ).html( response.data.view ).show();
	} else{
		var element = triggeredElement.closest( '.inside' );
		element.html( response.data.view ).show();
		// jQuery( '#tm-indicator-activity .inside' ).html( response.data.view ); // 28/03/2019 Inutilisé ?
	};

	if( response.data.data_indicator != null && response.data.data_indicator != '' ){
		window.eoxiaJS.taskManager.activity.loadIndicatorActivity( response.data.data_indicator );
	}
};

window.eoxiaJS.taskManager.activity.loadIndicatorActivity = function( data ){

	if( document.getElementById( "tm_activity_post_indicator_doghnut_" + data[ 'task_id' ][ 0 ] ) !== null  ){
		jQuery( "#tm_activity_post_indicator_doghnut_" + data[ 'task_id' ][ 0 ] ).html( '<canvas id="tm_activity_post_indicator_doghnut' + data[ 'task_id' ][ 0 ] + '" class="wpeo-modal-event" ></canvas>' );

		var canvasDonut = document.getElementById( "tm_activity_post_indicator_doghnut" + data[ 'task_id' ][ 0 ] ).getContext('2d');

		var data_canvas_doghnut = {
			labels : [ window.indicatorString.completed, window.indicatorString.uncompleted ],
			datasets: [
					{
						backgroundColor: [ "#005387", "#ee6123" ],
						data: [ data[ 'count_completed_points' ], data[ 'count_uncompleted_points' ] ],
					}
				],
		};

		new Chart( canvasDonut, {
	    type: 'doughnut',
	    data: data_canvas_doghnut,
	    options: ''
		});
	}

};

/**
 * Le callback de la requête ajax "export_activity".
 *
 * @param  {HTMLButtonElement} triggeredElement L'élement HTML déclenchant la requête Ajax.
 * @param  {Object} response                    Les données renvoyées par la requête Ajax.
 *
 * @since 1.7.1
 */
window.eoxiaJS.taskManager.activity.exportedActivity = function( triggeredElement, response ) {
	window.eoxiaJS.global.downloadFile( response.data.url_to_file, response.data.filename );
};

/**
 * Initialise l'objet "task" ainsi que la méthode "init" obligatoire pour la bibliothèque EoxiaJS.
 *
 * @since 1.0.0
 * @version 1.5.0
 */
window.eoxiaJS.taskManager.audit = {};

window.eoxiaJS.taskManager.audit.init = function() {
	window.eoxiaJS.taskManager.audit.event();
	// window.eoxiaJS.taskManager.audit.initAutoComplete();

	jQuery( '.tm_client_audit_list_task' ).colcade( {
		items: '.wpeo-project-task',
		columns: '.grid-col'
	} );

	window.eoxiaJS.taskManager.task.initAutoComplete();

};

window.eoxiaJS.taskManager.audit.refresh = function() {
	// window.eoxiaJS.taskManager.audit.initAutoComplete();
	window.eoxiaJS.taskManager.task.initAutoComplete();

};


window.eoxiaJS.taskManager.audit.event = function() {
	jQuery( document ).on( 'click', '#tm_client_audit_backtomain', window.eoxiaJS.taskManager.audit.clientAuditBackToMain );
	// jQuery( document ).on( 'keyup', '.tm_audit_search_task_autocomplete', window.eoxiaJS.taskManager.audit.initAutoComplete );

	jQuery( document ).on( 'keyup', '#tm_client_audit_title_new', window.eoxiaJS.taskManager.audit.checkIfTitleIsOk );
	jQuery( document ).on( 'paste', '#tm_client_audit_title_new', window.eoxiaJS.taskManager.audit.checkIfTitleIsOk );
	jQuery( document ).on( 'change', '#tm_audit_client_date_deadline', window.eoxiaJS.taskManager.audit.checkIfDateIsOk );

	// jQuery( document ).on( 'click', '#tm_audit_client_button_accesstotask', window.eoxiaJS.taskManager.audit.accessToTaskView );

	jQuery( document ).on( 'click', '.tm-import-add-keyword-audit > .wpeo-button', window.eoxiaJS.taskManager.audit.addKeywordToTextarea );

	jQuery( document ).on( 'click', '#wpeo-task-metabox-auditlist h2 span .action-attribute', window.eoxiaJS.taskManager.audit.preventDefaultHeader );

	jQuery( document ).on( 'change', '#tm_audit_selector_search', window.eoxiaJS.taskManager.audit.updateSearchSelect );

};

window.eoxiaJS.taskManager.audit.startNewAudit = function( triggeredElement, response ){

	jQuery( '.tm_client_audit_main' ).css( 'display', 'none' );
	jQuery( '.tm_client_audit_edit' ).css( 'display', 'block' );

	jQuery( '.tm_client_audit_edit' ).html( response.data.view );
}

window.eoxiaJS.taskManager.audit.updateMainPage = function( triggeredElement, response ){
	jQuery( '.tm_client_audit_main' ).css( 'display', 'block' );
	jQuery( '.tm_client_audit_edit' ).css( 'display', 'none' );

	jQuery( '#tm_client_audit_listauditmain' ).html( response.data.view );
}

window.eoxiaJS.taskManager.audit.clientAuditBackToMain = function ( trigerredElement ){
	jQuery( '.tm_client_audit_main' ).css( 'display', 'block' );
	jQuery( '.tm_client_audit_edit' ).css( 'display', 'none' );
}

/*window.eoxiaJS.taskManager.audit.initAutoComplete = function( event, contentcomment ){

	var parent_id = jQuery( '#tm_client_audit_data' ).data( 'parentid' );
	var auditid = jQuery( '#tm_client_audit_data' ).data( 'auditid' );

	jQuery( '.tm_audit_search_task_autocomplete' ).autocomplete( {
		source: 'admin-ajax.php?action=search_task',
		delay: 0,
		select: function( event, ui ) {
			var data = {
				action: 'audit_select_task',
				task_id: ui.item.id,
				parent_id: parent_id,
				audit_id: auditid
			};

			jQuery( 'input[name="task_id"]' ).val( ui.item.id );
			event.stopPropagation();

			window.eoxiaJS.request.send( jQuery( this ).closest( '.form' ), data );
		}
	} );
}*/

window.eoxiaJS.taskManager.audit.checkIfTitleIsOk = function( event ){ // If title and date
	jQuery( '#tm_client_audit_title_newhidden' ).val( jQuery( '#tm_client_audit_title_new' ).html() );

	if( jQuery( this ).html() != jQuery( this ).parent( '.wpeo-task-title' ).find( '#tm_client_audit_title_old' ).val() && jQuery( this ).html() != "" ){
		jQuery( '#tm_client_audit_buttonsavetitle' ).removeClass( 'button-disable' );
	}else{
		jQuery( '#tm_client_audit_buttonsavetitle' ).addClass( 'button-disable' );
	}
}

window.eoxiaJS.taskManager.audit.checkIfDateIsOk = function( event ){ // If title and date
	jQuery( '#tm_client_audit_buttonsavetitle' ).removeClass( 'button-disable' );

}

window.eoxiaJS.taskManager.audit.updateTitle = function( element, response ){
	jQuery( '#tm_client_audit_title_newhidden' ).val( response.data.title );
	window.eoxiaJS.taskManager.audit.checkIfTitleIsOk();

	// jQuery( '.tm_client_audit_main' ).replaceWith( response.data.view_main );
	jQuery( '.tm_client_audit_main' ).css( 'display', 'none' );
}

window.eoxiaJS.taskManager.audit.displayShortcodeTask = function( element, response ){

	var elements = jQuery( response.data.view );

	jQuery( '#tm_audit_client_generate_tasklink' ).html( response.data.view );

}

window.eoxiaJS.taskManager.audit.viewMainPage = function( element, response ){
	jQuery( '.tm_client_audit_main' ).replaceWith( response.data.view );
	jQuery( '.tm_client_audit_edit' ).css( 'display', 'none' );
}

window.eoxiaJS.taskManager.audit.generateAuditIndicator = function( task_id, complet_point, uncomplet_point, audit_id, audit_title ){

	jQuery( "#audit_client_indicator_" + audit_id ).append( '<div class="audit-chart-item"><canvas id="audit_client_indicator_task_' + task_id + '" class="wpeo-modal-event alignright" style=""></canvas></div>' );

	var canvasDonut = document.getElementById( "audit_client_indicator_task_" + task_id ).getContext('2d');

	if( complet_point == 0 && uncomplet_point == 0 ){
		var data_canvas_doghnut = {
			labels : [ window.indicatorString.taskempty, window.indicatorString.taskempty ],
			datasets: [
					{
						backgroundColor: [ '#D3D3D3', 'D3D3D3' ],
						data: [ 1, 0 ]
					}
				],
		};

	}else{

		var data_canvas_doghnut = {
			labels : [ window.indicatorString.completed, window.indicatorString.uncompleted ],
			datasets: [
					{
						backgroundColor: [ "#0099FF", "#5A5A5A" ],
						data: [ complet_point, uncomplet_point ],
					}
				],
		};
	}

	var option = {
		title: {
			display: true,
			text: audit_title + '(#' + task_id + ')',
			position: 'bottom',
		},
		tooltips: {
			custom: function(tooltip) {
	    }
		},
		legend: {
      display: false
	   },


	};

	canvasDonut.canvas.width = 100;
	canvasDonut.canvas.height = 100;

	new Chart( canvasDonut, {
    type: 'doughnut',
    data: data_canvas_doghnut,
    options: option
	});
}


window.eoxiaJS.taskManager.audit.addKeywordToTextarea = function( event ) {
	var importContent = jQuery( this ).closest( '.tm-audit-import.modal-active' ).find( 'textarea' );
	var keyword       = '%' + jQuery( this ).attr( 'data-type' ) + '%';
	importContent.val( importContent.val() + '\r\n' + keyword );
};

window.eoxiaJS.taskManager.audit.createdAuditTaskSuccess = function ( trigerredElement, response ){
	jQuery( '#tm_audit_client_generate_tasklink .list-task' ).prepend( response.data.view );
}

window.eoxiaJS.taskManager.audit.importAuditTaskSuccess = function ( trigerredElement, response ){
	jQuery( '#tm_audit_client_generate_tasklink .list-task' ).prepend( response.data.view );
}

window.eoxiaJS.taskManager.audit.searchAuditFilter = function ( trigerredElement, response ){
	var data = response.data.list_audit;

	for( var i = 0; i < data.length; i ++ ){
		if( data[ i ][ 'valid' ] ){
			jQuery( '.tm_audit_item_' + data[ i ][ 'id' ] ).show();
		}else{
			jQuery( '.tm_audit_item_' + data[ i ][ 'id' ] ).hide();
		}
	}
}

window.eoxiaJS.taskManager.audit.preventDefaultHeader = function( event ){

	jQuery( '#wpeo-task-metabox-auditlist' ).removeClass( 'closed' );
}

window.eoxiaJS.taskManager.audit.updateSearchSelect = function( event ){
	jQuery( '#tm_audit_button_search' ).attr( 'data-modification', 'true' );
}

/**
 * Initialise l'objet "comment" ainsi que la méthode "init" obligatoire pour la bibliothèque EoxiaJS.
 *
 * @since 1.0.0
 * @version 1.6.0
 */
window.eoxiaJS.taskManager.comment = {};

/**
 * La méthode obligatoire pour la biblotèque EoxiaJS.
 *
 * @return {void}
 *
 * @since 1.0.0
 * @version 1.0.0
 */
window.eoxiaJS.taskManager.comment.init = function() {
	window.eoxiaJS.taskManager.comment.event();
};

/**
 * Initialise tous les évènements liés au comment de Task Manager.
 *
 * @return {void}
 *
 * @since 1.0.0
 * @version 1.5.0
 */
window.eoxiaJS.taskManager.comment.event = function() {
	jQuery( document ).on( 'keyup', '.comment div[contenteditable="true"], .comment input[name="time"]', window.eoxiaJS.taskManager.comment.triggerCreate );
	jQuery( document ).on( 'blur keyup paste keydown click', '.comments .comment .content', window.eoxiaJS.taskManager.comment.updateHiddenInput );
	jQuery( document ).on( 'click', '.point.edit', window.eoxiaJS.taskManager.comment.loadComments );
	//jQuery( document ).on( 'click', '.point.edit', window.eoxiaJS.taskManager.comment.blurHideComments );

	jQuery( document ).on( 'click', function( e ){
		if ( ! $(event.target).closest( ".wpeo-project-task" ).length) {
			jQuery( '.point.edit' ).each( function (){
				if ( jQuery( this ).closest( 'div.point' ).find( '.comments' ).is( ':visible' ) ) {
					jQuery( 'div.point .comments:visible' ).slideUp( 400, function() {
						window.eoxiaJS.refresh();
					});
				}
			})
    }
	} );

};

/**
 * Fermes les points.active ainsi que leurs commentaires
 *
 * @since 1.5.0
 * @version 1.5.0
 *
 * @return {void}
 */
window.eoxiaJS.taskManager.comment.closePoint = function( event ) {
	jQuery( '.point.active' ).removeClass( 'active' );
	if ( jQuery( 'div.point' ).find( '.comments' ).is( ':visible' ) ) {
		jQuery( 'div.point .comments:visible' ).slideUp( 400, function() {
			window.eoxiaJS.refresh();
		} );
	}
};

/**
 * Stop propagation afin d'éviter la fermeture du point.
 *
 * @since 1.5.0
 * @version 1.5.0
 *
 * @return {void}
 */
window.eoxiaJS.taskManager.comment.preventClosePoint = function( event ) {
	event.stopPropagation();
};

window.eoxiaJS.taskManager.comment.triggerCreate = function( event ) {
	if ( event.ctrlKey && 13 === event.keyCode ) {
		jQuery( this ).closest( '.comment' ).find( '.action-input' ).click();
	}
};

/**
 * Met à jour le champ caché contenant le texte du comment écris dans la div "contenteditable".
 *
 * @param  {MouseEvent} event L'évènement de la souris lors de l'action.
 * @return {void}
 *
 * @since 1.0.0
 * @version 1.6.0
 */
window.eoxiaJS.taskManager.comment.updateHiddenInput = function( event ) {

	if ( 0 < jQuery( this ).text().length ) {
		jQuery( this ).closest( '.comment' ).find( '.placeholder' ).addClass( 'hidden' );
		jQuery( this ).closest( '.comment' ).removeClass( 'add' ).addClass( 'edit' );
		window.eoxiaJS.taskManager.core.initSafeExit( true );
	} else {
		jQuery( this ).closest( '.comment' ).find( '.placeholder' ).removeClass( 'hidden' );
		jQuery( this ).closest( '.comment' ).removeClass( 'edit' ).addClass( 'add' );
		window.eoxiaJS.taskManager.core.initSafeExit( false );
	}

	jQuery( this ).closest( '.comment' ).find( 'input[name="content"]' ).val( jQuery( this ).html() );
};

/**
 * Charges les commentaires au clic sur le content editable.
 *
 * @param  {MouseEvent} event L'évènement du clic
 * @return {void}
 *
 * @since 1.3.6.0
 * @version 1.3.6.0
 */
window.eoxiaJS.taskManager.comment.loadComments = function( event ) {
	var data = {};

	data.action = 'load_comments';
	data.task_id = jQuery( this ).closest( '.wpeo-project-task' ).data( 'id' );
	data.point_id = jQuery( this ).closest( '.point' ).data( 'id' );

	if ( ! jQuery( this ).closest( 'div.point' ).find( '.comments' ).is( ':visible' ) ) {
		jQuery( 'div.point .comments:visible' ).slideUp( 400, function() {
			window.eoxiaJS.refresh();
		} );

		window.eoxiaJS.loader.display( jQuery( this ) );
		window.eoxiaJS.request.send( jQuery( this ), data );
	}
};

window.eoxiaJS.taskManager.comment.blurHideComments = function( event ){

	console.log( '---' );
	if ( jQuery( this ).closest( 'div.point' ).find( '.comments' ).is( ':visible' ) ) {
		jQuery( 'div.point .comments:visible' ).slideUp( 400, function() {
			window.eoxiaJS.refresh();
		} );
	}

}

/**
 * Le callback en cas de réussite à la requête Ajax "load_comments".
 * Met le contenu dans la div.comments.
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.0.0.0
 * @version 1.0.0.0
 */
window.eoxiaJS.taskManager.comment.loadedCommentsSuccess = function( triggeredElement, response ) {
	jQuery( triggeredElement ).closest( 'div.point' ).find( '.comments' ).html( response.data.view );

	triggeredElement.removeClass( 'loading' );
	triggeredElement.closest( 'div.point' ).find( '.comments' ).slideDown( 400, function() {
		window.eoxiaJS.refresh();
	} );
};

/**
 * Le callback en cas de réussite à la requête Ajax "edit_comment".
 * Met le contenu dans la div.comments.
 *
 * @since 1.0.0
 * @version 1.5.0
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 */
window.eoxiaJS.taskManager.comment.addedCommentSuccess = function( triggeredElement, response ) {
	triggeredElement.closest( '.comment' ).find( 'div.content' ).html( '' );

	triggeredElement.closest( '.wpeo-project-task' ).find( '.wpeo-task-time-info .elapsed' ).text( response.data.time.task );
	triggeredElement.closest( '.comments' ).prev( '.form' ).find( '.wpeo-time-in-point' ).text( response.data.time.point );

	triggeredElement.closest( 'div.point' ).find( '.comments' ).html( response.data.view );
	jQuery( '.wpeo-project-task[data-id="' + response.data.comment.data.post_id + '"] .point[data-id="' + response.data.comment.data.parent_id + '"] .comment.new div.content' ).focus();
	jQuery( '.wpeo-project-task[data-id="' + response.data.comment.data.post_id + '"] .point[data-id="' + response.data.comment.data.parent_id + '"] .wpeo-point-summary .number-comments' ).html( response.data.point.data.count_comments );

	window.eoxiaJS.refresh();
	window.eoxiaJS.taskManager.core.initSafeExit( false );
};

/**
 * Le callback en cas de réussite à la requête Ajax "delete_comment".
 * Supprimes la ligne.
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.0.0
 * @version 1.5.0
 */
window.eoxiaJS.taskManager.comment.deletedCommentSuccess = function( triggeredElement, response ) {
	triggeredElement.closest( '.comment' ).fadeOut();

	triggeredElement.closest( '.wpeo-project-task.mask' ).removeClass( 'mask' );
	triggeredElement.closest( '.wpeo-project-task' ).find( '.wpeo-task-time-info .elapsed' ).text( response.data.time.task );
	triggeredElement.closest( '.comments' ).prev( 'form' ).find( '.wpeo-time-in-point' ).text( response.data.time.point );

	window.eoxiaJS.refresh();
};

/**
 * Le callback en cas de réussite à la requête Ajax "load_edit_view_comment".
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.0.0.0
 * @version 1.0.0.0
 */
window.eoxiaJS.taskManager.comment.loadedEditViewComment = function( triggeredElement, response ) {
	jQuery( triggeredElement ).closest( '.comment' ).replaceWith( response.data.view );
	jQuery( '.wpeo-project-task.mask' ).removeClass( 'mask' );
};

window.eoxiaJS.taskManager.comment.afterTriggerChangeDate = function( $input ) {
	$input.closest( '.group-date' ).find( 'input[name="value_changed"]' ).val( 1 );
	$input.closest( '.group-date' ).find( 'div' ).attr( 'aria-label', $input.val() );
	$input.closest( '.group-date' ).find( 'span' ).css( 'background', '#389af6' );
};

/**
 * Initialise l'objet "task" ainsi que la méthode "init" obligatoire pour la bibliothèque EoxiaJS.
 *
 * @since 1.5.1
 * @version 1.6.0
 */
window.eoxiaJS.taskManager.taskExport = {};

window.eoxiaJS.taskManager.taskExport.init = function() {
	window.eoxiaJS.taskManager.taskExport.event();
};

window.eoxiaJS.taskManager.taskExport.event = function() {
	jQuery( document ).on( 'change', 'input[name=export_type]', window.eoxiaJS.taskManager.taskExport.displayDateForExport );
};

/**
 * Le callback en cas de réussite à la requête Ajax "load_export_popup".
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.6.0
 * @version 1.6.0
 */
window.eoxiaJS.taskManager.taskExport.loadedExportPopup = function( triggeredElement, response ) {
	jQuery( triggeredElement ).closest( '.wpeo-project-task' ).find( '.popup.popup-export .content' ).html( response.data.view );
	jQuery( triggeredElement ).closest( '.wpeo-project-task' ).find( '.popup.popup-export .container' ).removeClass( 'loading' );
};

/**
 * [description]
 * @method
 * @param  {[type]} $input [description]
 * @return {[type]}        [description]
 */
window.eoxiaJS.taskManager.taskExport.afterTriggerChangeDate = function( $input ) {
	$input.closest( '.group-date' ).find( '.date-display' ).html( $input.val() );
};

/**
 * [description]
 * @method
 * @param  {[type]} triggeredElement [description]
 * @return {[type]}                  [description]
 */
window.eoxiaJS.taskManager.taskExport.displayDateForExport = function( triggeredElement ) {
	if ( 'by_date' == jQuery( this ).val() ) {
		jQuery( '.tm_export_date_container' ).show();
	} else {
		jQuery( '.tm_export_date_container' ).hide();
	}
};

/**
 * Le callback en cas de réussite à la requête Ajax "export_task".
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.3.6
 * @version 1.6.0
 */
window.eoxiaJS.taskManager.taskExport.exportedTask = function( triggeredElement, response ) {
	jQuery( '.tm_export_result_container' ).find( 'textarea' ).html( response.data.content );
};

/**
 * Initialise l'objet "point" ainsi que la méthode "follower" obligatoire pour la bibliothèque EoxiaJS.
 *
 * @since 1.0.0.0
 * @version 1.0.0.0
 */
window.eoxiaJS.taskManager.follower = {};

window.eoxiaJS.taskManager.follower.init = function() {
	window.eoxiaJS.taskManager.follower.event();
};

window.eoxiaJS.taskManager.follower.event = function() {
	jQuery( document ).on( 'click', '.showfullplanning', window.eoxiaJS.taskManager.follower.showfullplanning );
 };

/**
 * Le callback en cas de réussite à la requête Ajax "load_followers".
 * Remplaces le contenu de l'element cliqué par la vue reçu dans la réponse AJAX.
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.0.0.0
 * @version 1.0.0.0
 */
window.eoxiaJS.taskManager.follower.loadedFollowersSuccess = function( element, response ) {
	element.closest( '.wpeo-ul-users' ).replaceWith( response.data.view );
	window.eoxiaJS.refresh();
};

/**
 * Le callback en cas de réussite à la requête Ajax "close_followers_edit_mode".
 * Remplaces le contenu de l'element cliqué par la vue reçu dans la réponse AJAX.
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.0.0.0
 * @version 1.0.0.0
 */
window.eoxiaJS.taskManager.follower.closedFollowersEditMode = function( element, response ) {
	element.closest( '.wpeo-ul-users' ).replaceWith( response.data.view );
	window.eoxiaJS.refresh();
};

/**
 * Cette méthode est appelé automatiquement lors du clique sur une catégorie a affecter.
 *
 * @param  {HTMLUListElement} element L'élément déclenchant la méthode au clique.
 * @return {void}
 *
 * @since 1.0.0.0
 * @version 1.3.6.0
 */
window.eoxiaJS.taskManager.follower.beforeAffectFollower = function( element ) {
	element.addClass( 'active' );

	return true;
};

/**
 * Cette méthode est appelé automatiquement lors du clique sur une catégorie a désaffecter.
 *
 * @param  {HTMLUListElement} element L'élément déclenchant la méthode au clique.
 * @return {void}
 *
 * @since 1.0.0.0
 * @version 1.3.6.0
 */
window.eoxiaJS.taskManager.follower.beforeUnaffectFollower = function( element ) {
	element.removeClass( 'active' );

	return true;
};

/**
 * Le callback en cas de réussite à la requête Ajax "follower_affectation".
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.0.0.0
 * @version 1.0.0.0
 */
window.eoxiaJS.taskManager.follower.affectedFollowerSuccess = function( element, response ) {
	element.attr( 'data-action', 'follower_unaffectation' );
	element.attr( 'data-before-method', 'beforeUnaffectFollower' );
	element.attr( 'data-nonce', response.data.nonce );
};

/**
 * Le callback en cas de réussite à la requête Ajax "follower_unaffectation".
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.0.0.0
 * @version 1.0.0.0
 */
window.eoxiaJS.taskManager.follower.unaffectedFollowerSuccess = function( element, response ) {
	element.attr( 'data-action', 'follower_affectation' );
	element.attr( 'data-before-method', 'beforeAffectFollower' );
	element.attr( 'data-nonce', response.data.nonce );
};

window.eoxiaJS.taskManager.follower.showfullplanning = function( event ){
	jQuery( '.showfullplanning' ).css( 'display', 'none' );
}

window.eoxiaJS.taskManager.follower.reloadPlanningUser = function( element, response ){
	jQuery( '.planninguser' ).replaceWith( response.data.view );
}

/**
 * Initialise l'objet "historyTime" ainsi que la méthode "init" obligatoire pour la bibliothèque EoxiaJS.
 *
 * @since 1.0.0
 * @version 1.0.0
 */
window.eoxiaJS.taskManager.historyTime = {};

/**
 * La méthode obligatoire pour la biblotèque EoxiaJS.
 *
 * @return {void}
 *
 * @since 1.0.0
 * @version 1.0.0
 */
window.eoxiaJS.taskManager.historyTime.init = function() {
	window.eoxiaJS.taskManager.historyTime.event();
};

/**
 * Initialise tous les évènements liés au historyTime de Task Manager.
 *
 * @return {void}
 *
 * @since 1.0.0
 * @version 1.6.0
 */
window.eoxiaJS.taskManager.historyTime.event = function() {};

/**
 * Le callback en cas de réussite à la requête Ajax "load_history_time".
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.0.0
 * @version 1.0.0
 */
window.eoxiaJS.taskManager.historyTime.loadedTimeHistorySuccess = function( element, response ) {
	jQuery( element ).closest( '.wpeo-project-task' ).find( '.popup .content' ).html( response.data.view );
	jQuery( element ).closest( '.wpeo-project-task' ).find( '.popup .container' ).removeClass( 'loading' );
};

/**
 * Le callback en cas de réussite à la requête Ajax "create_history_time".
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.0.0
 * @version 1.0.0
 */
window.eoxiaJS.taskManager.historyTime.createdHistoryTime = function( element, response ) {
	jQuery( 'body' ).find( '.wpeo-modal .modal-container .modal-content .history-time-container' ).replaceWith( response.data.history_time_view );
	jQuery( 'div.wpeo-project-task[data-id="' + response.data.task_id + '"]' ).find( '.wpeo-task-header' ).replaceWith( response.data.task_header_view );
};

/**
 * Le callback en cas de réussite à la requête Ajax "delete_history_time".
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.0.0
 * @version 1.0.0
 */
window.eoxiaJS.taskManager.historyTime.deletedHistoryTime = function( element, response ) {
	jQuery( element ).closest( '.list-element' ).fadeOut();
	jQuery( 'div[data-id="' + response.data.task_id + '"]' ).find( 'ul.wpeo-task-time-manage' ).replaceWith( response.data.task_header_view );
};

/**
 * Initialise l'objet "import" ainsi que la méthode "init" obligatoire pour la bibliothèque EoxiaJS.
 *
 * @since 1.7.0
 * @version 1.7.0
 */
window.eoxiaJS.taskManager.import = {};

window.eoxiaJS.taskManager.import.init = function() {
	window.eoxiaJS.taskManager.import.event();
};

window.eoxiaJS.taskManager.import.event = function() {
	jQuery( document ).on( 'click', '.tm-import-add-keyword > .wpeo-button', window.eoxiaJS.taskManager.import.addKeywordToTextarea );
};

/**
 * Callback de l'import des tâches.
 *
 * @return void
 */
window.eoxiaJS.taskManager.import.importSuccess = function( element, response ) {
	if ( 'tasks' === response.data.type ) {
		window.eoxiaJS.taskManager.task.createdTaskSuccess( element, response );
	} else if ( 'points' === response.data.type ) {
		var task = jQuery( "div.wpeo-project-task[data-id='" + response.data.task_id + "']" );

		task.find( '.total-point' ).text( response.data.task.data.count_all_points );
		task.find( '.points.sortable .point:last' ).before( response.data.view );

		window.eoxiaJS.taskManager.point.initAutoComplete();
		window.eoxiaJS.refresh();
		window.eoxiaJS.taskManager.core.initSafeExit( false );

		task.find( '.wpeo-task-filter .point-uncompleted' ).html( response.data.task.data.count_uncompleted_points );


	}

	window.eoxiaJS.taskManager.task.initAutoComplete();

	window.eoxiaJS.modal.close();
};

/**
 * Fonction permettant d'insérer un mot clés dans le textarea contenant les données à importer
 */
window.eoxiaJS.taskManager.import.addKeywordToTextarea = function( event ) {
	var importContent = jQuery( this ).closest( '.tm-import-tasks.modal-active' ).find( 'textarea' );
	var keyword       = '%' + jQuery( this ).attr( 'data-type' ) + '%';
	importContent.val( importContent.val() + '\r\n' + keyword );
};

/**
 * Initialise l'objet "indicator" ainsi que la méthode "init" obligatoire pour la bibliothèque EoxiaJS.
 *
 * @since 1.5.0
 * @version 1.5.0
 */
window.eoxiaJS.taskManager.indicator = {};

window.eoxiaJS.taskManager.indicator.init = function() {
	window.eoxiaJS.taskManager.indicator.event();
};

window.eoxiaJS.taskManager.indicator.event = function() {
	jQuery( document ).on( 'click', '.page-indicator button.handlediv', window.eoxiaJS.taskManager.indicator.toggleMetabox );
};

window.eoxiaJS.taskManager.indicator.toggleMetabox = function( event ) {
	// var data = {
	// 	"action": ":closed-postboxes",
	// 	"closed": ":wpeo-task-metabox",
	// 	"hidden": "slugdiv",
	// 	"closedpostboxesnonce": "nonce",
	// };
  //
	// window.eoxiaJS.request.send( jQuery( this ), data, function( triggeredElement, response ) {
  //
	// } );
}

/**
 * Fonction principal qui génére les canvas de type Bar et Doghnut
 * Elle est lancé par une fonction php '/activity/action'
 *
 * @param  {[type]} triggeredElement [ ]
   @param  {[type]} response         [ donnés reçues par la requete ajax ]
 *
 * @author Corentin Eoxia
 * @since 1.9.0 - BETA
 */

window.eoxiaJS.taskManager.indicator.loadedCustomerActivity = function( triggeredElement, response ) {
	window.eoxiaJS.taskManager.indicator.isSelectOneUser( response.data.user_select, response.data.user_id );
	window.eoxiaJS.taskManager.indicator.updateTimeChoose( response.data.time_choose, response.data.date_start, response.data.date_end );
	jQuery( '#tm-indicator-activity .inside' ).html( response.data.view );
	jQuery( '#displaycanvas' ).html( '' ); // reset les affichages de Canvas
	jQuery( '#displaycanvas_specific_week' ).html( '' ); // reset le second affichage de la semaine
	jQuery( '#displaymodal' ).html( '' );

	var data = response.data.object;

	jQuery( '#tm_redirect_settings_user' ).css('display', 'none');
	jQuery( '#tm_indicator_chart_display' ).css( 'display', 'none' );

	jQuery( '#display_modal' ).html( '' );

	if( data.length != 0 ){
		if( response.data.display_specific_week == true ){
			window.eoxiaJS.taskManager.indicator.displaySpecificChartForWeek( data );
		}

		jQuery("#horizontalChart").css('display','block');
		jQuery("#doghnutChart").css('display','block');
		jQuery("#displaycanvas").css('display','block');

		var total_time_work = 0; // Pour l'affichage
		var total_time_elapsed = 0; // Du premier Canvas
		var total_donut_duree = [];
		var total_donut_point = [];
		var total_donut_title  = [];
		jQuery( "#displaycanvas" ).append( '<div class="wpeo-grid grid-2"><div class="grid-1"><canvas id="canvasHorizontalBarAll"></canvas></div><div class="grid-1"><canvas id="canvasDoghnutChartAll" width="400" height="225" class="wpeo-modal-event" ></canvas></div></div>' ); // Qui resume TOUT

			for ( var i = 0; i < data.length ; i++ ){
				total_time_work += data[i]['duree_travail'];
				total_time_elapsed += data[i]['duree_journée'];


				jQuery( "#displaycanvas" ).append( '<div class="wpeo-grid grid-2"><div class="grid-1"><canvas id="canvasHorizontalBar' + i + '"></canvas></div><div class="grid-1"><canvas id="canvasDoghnutChart' + i + '" width="400" height="225" class="wpeo-modal-event" ></canvas></div></div>' );
				var canvasHorizontal = document.getElementById( "canvasHorizontalBar" + i ).getContext('2d');

				var data_canvas_horizontalBar = {
					labels: [ window.indicatorString.minute ],
					datasets: [
					{
						label: window.indicatorString.time_work,//window.indicator.time_work,
						backgroundColor: "#3e95cd",
						data: [ data[i]['duree_travail'] ],
						borderWidth: 1
					}, {
						label: window.indicatorString.time_day,//window.indicator.time_day,
						backgroundColor: "#8e5ea2",
						data: [ data[i]['duree_journée'], 0 ],
						borderWidth: 1
					}]
				};

				var option_canvas_horizontalbar = {
					plugins: {
						labels: {
							render: 'label'
						}
					},
					legend: { display: true },
					title: {
						display: true,
						text:  data[i]['jour']
					},
					scales: {
						yAxes: [{
							ticks: {
								beginAtZero: true
							}
						}]
					}
				};

				window.eoxiaJS.taskManager.indicator.generateCanvasDynamic( canvasHorizontal, 'horizontalBar', data_canvas_horizontalBar, option_canvas_horizontalbar ); // Génération du canvas de type horizontalBar

				// - - - - -

				var canvasDonut = document.getElementById( "canvasDoghnutChart" + i).getContext('2d');

				if( data[ i ][ 'tache_effectue' ] != undefined && data[ i ][ 'tache_effectue' ].length > 0 ){
					jQuery( '#canvasDoghnutChart' + i ).css( 'cursor', 'pointer' );
					jQuery( '#canvasDoghnutChart' + i ).addClass( 'display_all_point' );
					jQuery( '#canvasDoghnutChart' + i ).attr( "data-canvas-focus", i );

					window.eoxiaJS.taskManager.indicator.generateModalContent( i, data[ i ] );

					var donutduree = [];
					var donutpoint = [];
					var donutitle  = [];
					var dayfocus   = '';

					for (var v = 0; v < data[ i ][ 'tache_effectue' ].length; v++) {
						donutduree[ v ] = data[ i ][ 'tache_effectue' ][ v ][ 'duree' ];
						donutpoint[ v ] = data[ i ][ 'tache_effectue' ][ v ][ 'point_id' ];
						donutitle[ v ]  = data[ i ][ 'tache_effectue' ][ v ][ 'tache_title' ];

						dayfocus        = data[ i ][ 'jour' ];



						total_donut_duree[ total_donut_duree.length ]  = data[ i ][ 'tache_effectue' ][ v ][ 'duree' ];
						total_donut_point[ total_donut_point.length ]  = data[ i ][ 'tache_effectue' ][ v ][ 'point_id' ];
						total_donut_title[ total_donut_title.length ] = data[ i ][ 'tache_effectue' ][ v ][ 'tache_title' ];
					}

					var data_canvas_doghnut = {
						labels : donutpoint,
						datasets: [
				        {
				          label: window.indicatorString.planning,
				          backgroundColor: ["#800000", "#9A6324","#808000","#469990","#000075", "#e6194B", "#f58231", "#ffe119", "#bfef45", "#3cb44b", "#42d4f4", "#4363d8", "#911eb4", "#f032e6", "#a9a9a9", "#fabebe", "#ffd8b1", "#fffac8", "#aaffc3", "#e6beff"],
				          data: donutduree,
				        }
				      ],
						dataset : donutitle,
					};

					var option_canvas_doghnut =  {
						onClick: function( event, info ) {
							var numline = -1;
							if( info.length != 0 ){
								numline = info[0]['_index'];
							}
							window.eoxiaJS.taskManager.indicator.displayAllPoint( numline, this['canvas'] );
						},
			      title: {
			        display: true,
			        text: data[ i ][ 'jour' ]
			      },
						tooltips: {
              callbacks: {
                title: function( item, data_indicator ) {
									return data_indicator[ 'dataset' ][ item[ 0 ][ 'index' ] ];
                },
              }
            },
						legend: {
              onClick: (e) => e.stopPropagation() // Block click
            }
			    };

					window.eoxiaJS.taskManager.indicator.generateCanvasDynamic( canvasDonut, 'doughnut', data_canvas_doghnut, option_canvas_doghnut ); // Génération du canvas de type doghnut
				}
			}

			window.eoxiaJS.taskManager.indicator.generateSummaryCanvas( total_time_work, total_time_elapsed, total_donut_duree, total_donut_point, total_donut_title )

		jQuery( '#information_canvas' ).css('display', 'none');
	}else{

		if( response.data.error == 'date_error' ){ // Date invalid

			jQuery( '#information_canvas' ).html( window.indicatorString.date_error );

		}else if( response.data.error == 'person_error' ){ // User don't choose person

			jQuery( '#information_canvas' ).html( window.indicatorString.person_error );

		}else{ // No data found
			jQuery( '#information_canvas' ).html( window.indicatorString.nodata );
			jQuery( '#tm_redirect_settings_user' ).css('display', 'block');
		}

		jQuery( '#information_canvas' ).css('display', 'block');
	}
};

/**
 * Fonction qui génère (TOUS) les canvas
 * @param  {String} [elementbyid='']  [Recupère l'élement créé, qui contiendra le canvas]
 * @param  {String} [typelabel='bar'] [type de canvas à afficher] => 3 types : 'bar', 'horizontalBar','doughnut'
 * @param  {Object} [data={}]         [liste des données]
 * @param  {Object} [option={}]       [liste des options / fonctions à éxecuter]
 * @since 1.9.0 - BETA
 */
window.eoxiaJS.taskManager.indicator.generateCanvasDynamic = function( elementbyid = '', typelabel = 'bar', data = {}, option = {} ){
	new Chart(elementbyid, {
    type: typelabel,
    data: data,
    options: option
	});
}

window.eoxiaJS.taskManager.indicator.updateTimeChoose = function( time = '', day_start = '', day_end = '' ){
	$( '#tm_indicator_date_start_id' ).val( day_start );
	$( '#tm_indicator_date_end_id' ).val( day_end );
}

window.eoxiaJS.taskManager.indicator.event = function( event ) {
	jQuery( document ).on( 'click', '.clickonfollower', window.eoxiaJS.taskManager.indicator.addFollower );
	jQuery( document ).on( 'click', '.clickontypechart', window.eoxiaJS.taskManager.indicator.modifyTypeChart );
	jQuery( document ).on( 'click', '.display_this_point', window.eoxiaJS.taskManager.indicator.displayThisPoint );
};

/**
 * Modifie le css d'un utilisateur suite à une action utilisateur
 * La fonction peut etre lancé par un clic sur un cadre utilisateur, ou lors de l'affichage de l'emploi du temps
 * @param  {[type]} event       [action utilisateur]
 * @param  {Number} [user_id=0] [utilisateur actuel]
 * @return {[type]}             [description]
 *
 * @since 1.9.0 - BETA
 */
window.eoxiaJS.taskManager.indicator.addFollower = function( event, user_id = 0 ) {
	if( user_id == 0 ){

		var addFollower = jQuery( this ).attr( "data-user-id" );
	}else{
		var addFollower = user_id;
	}

	var value_input = document.getElementById( "tm_indicator_list_followers" ).value;
	var list_follower = value_input.toString() ? value_input.toString() : '';

	if( list_follower == '' ){
		var arrayFollowers = addFollower;
		if( document.getElementById( 'tm_user_indicator_' + addFollower ) ){
			jQuery( '#tm_user_indicator_' + addFollower ).addClass( 'active' );
		}
		// active addFollower
	}else{
		if( list_follower == addFollower ){ // Desactive list
			var arrayFollowers = '';
			if( document.getElementById( 'tm_user_indicator_' + list_follower ) ){ // Desactive list
				jQuery( '#tm_user_indicator_' + list_follower ).removeClass( 'active' );
			}
		}else{

			var arrayFollowers = addFollower;
			if( document.getElementById( 'tm_user_indicator_' + addFollower ) ){ // active add
				jQuery( '#tm_user_indicator_' + addFollower ).addClass( 'active' );
			}

			if( document.getElementById( 'tm_user_indicator_' + list_follower ) ){ // Desactive list
				jQuery( '#tm_user_indicator_' + list_follower ).removeClass( 'active' );
			}
		}
	}

	document.getElementById( "tm_indicator_list_followers" ).value = arrayFollowers;
};

window.eoxiaJS.taskManager.indicator.markedAsReadSuccess = function ( triggeredElement, response ) {
	triggeredElement.closest( '.activity' ).hide();
};

/**
 * Affichage de deux canvas supplémaitres lors de la sélection 'semaine'
 * ces canvas résument la semaine, en traitant les données contenu dans le parametre 'data'
 * @param  {[type]} data [données des taches effectuées]
 * @return {[type]}      [description]
 *
 * @since 1.9.0 - BETA
 */
window.eoxiaJS.taskManager.indicator.displaySpecificChartForWeek = function( data ){
	jQuery( '#tm_indicator_chart_display' ).css( 'display', 'block' );

	var data_work_time = [];
	var data_day_time = [];
	var data_day = [];
	var data_color = [ "#800000", "#9A6324","#808000","#469990","#000075", "#e6194B", "#f58231" ]
	var data_time_work = [];
	var data_point_id_work_ = [];

		for( var i = 0; i < data.length; i++ ){
			data_work_time.push( data[i]['duree_travail'] );
			data_day_time.push( data[i]['duree_journée'] );
			data_day.push( data[ i ][ 'date_fr' ] );

			if( data[ i ][ 'tache_effectue' ] != undefined && data[ i ][ 'tache_effectue' ].length > 0 ){
				for (var v = 0; v < data[ i ][ 'tache_effectue' ].length; v++) {
					var point_already_create = false;

					for( var x = 0; x < data_point_id_work_.length; x++ ){
						if( data_point_id_work_[ x ] == data[ i ][ 'tache_effectue' ][ v ][ 'point_id' ] ){
							data_time_work[ x ] = data_time_work[ x ] + data[ i ][ 'tache_effectue' ][ v ][ 'duree' ];
							point_already_create = true;
							break;
						}
					}
					if( ! point_already_create ){
						data_point_id_work_.push( data[ i ][ 'tache_effectue' ][ v ][ 'point_id' ] );
						data_time_work.push( data[ i ][ 'tache_effectue' ][ v ][ 'duree' ] );
					}
				}
			}
		}

		data_time_work.push( 0 ); // Pour l'affichage un bel affichage canvas, en ajoutant un 0 à la fin

	jQuery( "#displaycanvas_specific_week" ).append( '<div class="wpeo-grid grid-2"><div class="grid-1"><canvas id="tm_indicator_canvasbar_week"></canvas></div><div class="grid-1"><canvas id="tm_indicator_canvasdoghnut_week" width="400" height="225"></canvas></div></div>' );
	var canvasbar = document.getElementById( "tm_indicator_canvasbar_week" ).getContext('2d');

		var data_canvas_bar = {
			labels: data_day,
			datasets: [{
				label: window.indicatorString.time_work,//window.indicator.time_work,
				backgroundColor: "#3e95cd",
				data: data_work_time,
				borderWidth: 1
			}, {
				label: window.indicatorString.time_day,//window.indicator.time_day,
				backgroundColor: "#8e5ea2",
				data: data_day_time,
				borderWidth: 1
			}]
		};

		var options_canvas_bar = {
			plugins: {
				labels: {
					render: 'label'
				}
			},
			legend: { display: true },
			title: {
				display: true,
				text:  window.indicatorString.from + ' ' + data[ 0 ]['jour'] + ' ' + window.indicatorString.to + ' ' + data[ data.length - 1 ]['jour']
			},
			scales: {
				yAxes: [{
					ticks: {
						beginAtZero: true
					}
				}]
			}
		};

		window.eoxiaJS.taskManager.indicator.generateCanvasDynamic( canvasbar, 'bar', data_canvas_bar, options_canvas_bar );

// - - - - -

	var canvasdonut = document.getElementById( "tm_indicator_canvasdoghnut_week" ).getContext('2d');

	var data_canvas_donut = {
			labels: data_point_id_work_,
			datasets: [
				{
					label: window.indicatorString.planning,
					backgroundColor: ["#800000", "#9A6324","#808000","#469990","#000075", "#e6194B", "#f58231", "#ffe119", "#bfef45", "#3cb44b", "#42d4f4", "#4363d8", "#911eb4", "#f032e6", "#a9a9a9", "#fabebe", "#ffd8b1", "#fffac8", "#aaffc3", "#e6beff"],
					data: data_time_work,
				}
			]
		};

		var options_canvas_donut = {
			title: {
				display: true,
				text: window.indicatorString.plan_week
			}
		};

	window.eoxiaJS.taskManager.indicator.generateCanvasDynamic( canvasdonut, 'doughnut', data_canvas_donut, options_canvas_donut );
}

/**
 * Modifie l'affichage des boutons lors de la sélection 'semaine'
 * Et modifie l'affichage des canvas
 * @param  {[type]} triggeredElement [ ]
 * @param  {[type]} response         [ ]
 *
 * @since 1.9.0 - BETA
 */
window.eoxiaJS.taskManager.indicator.modifyTypeChart = function( triggeredElement, response ) {

	var chart_selected = jQuery( this ).attr( "data-chart-type" );
	var data_chart_display = jQuery( '#tm_indicator_chart_display' ).attr( "data-chart-display" );

	if( chart_selected != data_chart_display ){ // on change d'affichage
		if( chart_selected == 'bar' ){

			jQuery( '#tm_indicator_chart_bar' ).removeClass( 'button-grey' );
			jQuery( '#tm_indicator_chart_horizontalBar' ).addClass( 'button-grey' );
			jQuery( '#tm_indicator_chart_display' ).attr( "data-chart-display", "bar" );
			jQuery( '#displaycanvas' ).css( "display", "none" );
			jQuery( '#displaycanvas_specific_week' ).css( "display", "block" );
		}else{

			jQuery( '#tm_indicator_chart_horizontalBar' ).removeClass( 'button-grey' );
			jQuery( '#tm_indicator_chart_bar' ).addClass( 'button-grey' );
			jQuery( '#tm_indicator_chart_display' ).attr( "data-chart-display", "horizontalBar" );
			jQuery( '#displaycanvas' ).css( "display", "block" );
			jQuery( '#displaycanvas_specific_week' ).css( "display", "none" );
		}
	}
};

/**
 * Sélectionne un utilisateur par défaut, si aucun n'a était choisis.
 * Ici l'utilisateur actuel est pris en compte;
 * @param  {[type]} user_select [Utilisateur sélectionné ] // null si aucun
 * @param  {[type]} user_id     [id de l'utilisateur actuel]
 *
 * @since 1.9.0 - BETA
 */
window.eoxiaJS.taskManager.indicator.isSelectOneUser = function( user_select, user_id ){
	if( ! user_select ){
		window.eoxiaJS.taskManager.indicator.addFollower( null, user_id );
	}
};

/**
 * [Créer le contenu du modal :
 * => Génération du tableau
 * => Génération de l'explication de chaque point (il suffirat de display block pour l'affichage)]
 * @param  {[type]} num_modal [Numéro du modal, chacun modal représente un canvas doghnut ]
 * @param  {[type]} data      [toutes les données récupérés par le php => Liste des jours => liste des taches effectués]
 *
 * @since 1.9.0 - BETA
 */
window.eoxiaJS.taskManager.indicator.generateModalContent = function ( num_modal, data ){

	if( ! jQuery( '#tm_indicator_modal_active_canvas .modal-container' ).data()[ 'update' ] ){

		jQuery( '#tm_indicator_modal_active_canvas .modal-container' ).data('update', 'true' );

		var oldwidth = jQuery( '#tm_indicator_modal_active_canvas .modal-container' ).css('max-width');
		var oldheight = jQuery( '#tm_indicator_modal_active_canvas .modal-container' ).css('max-height');

		oldwidth = parseInt( oldwidth ) * 1.5;
		oldheight = parseInt( oldheight ) * 1.5;

		jQuery( '#tm_indicator_modal_active_canvas .modal-container' ).css('max-width', oldwidth + 'px' );
		jQuery( '#tm_indicator_modal_active_canvas .modal-container' ).css('max-height', oldheight + 'px' );
		jQuery( '#tm_indicator_modal_active_canvas .modal-container .modal-content' ).css('height', '86%' );
	}


	jQuery( '#tm_indicator_day_taches' ).html( data['jour'] );

	jQuery( '#display_modal' ).append( '<div id="tm_indicator_modal_block' + num_modal + '" style="display : none"></div>');
	var array_top = '<table class="wpeo-table" id="chart_selected_' + num_modal + '"><thead><tr><th data-title="point_id">ID</th><th data-title="tache_title">Tache TITLE</th><th data-title="point_title">Point TITLE</th><th data-title="time">Duree</th></tr></thead><tbody id="tm_indicator_table_' + num_modal + '_" data-chartselect=' + num_modal +'>';
	var array_content = '';
	var block_text = '';

	for( var i = 0; i < data['tache_effectue'].length; i++ ){
		var withoutbackline = '/<br\s*[\/]?>/gi';

		var task_title = data[ 'tache_effectue' ][ i ][ 'tache_title' ];
		if( task_title.length > 40 ){
			task_title = task_title.substring( 0, 40 ) + ' ...';
		}
		task_title = task_title.replace(/(<br ?\/?>)*/g,"");

		var point_title = data['tache_effectue'][ i ]['point_title'];
		if( point_title.length > 20 ){
			point_title = point_title.substring( 0, 20 ) + ' ...';
		}
		point_title = point_title.replace(/(<br ?\/?>)*/g,"");

		client_name = '';
		if( data[ 'tache_effectue' ][ i ][ 'pt_title' ] != null ){
			client_name = data[ 'tache_effectue' ][ i ][ 'pt_title' ];
		}


		var array_content = array_content + '<tr id="tm_indicator_task_' + num_modal + '_' + i + '" class="display_this_point" data-tmindicatorpointid="' + data[ 'tache_effectue' ][ i ][ 'point_id' ] + '" style="cursor : pointer"><th data-title="point_id">' + data['tache_effectue'][ i ]['point_id'] + '</th><th data-title="tache_title">' + task_title + '</th><th data-title="point_title">' + point_title + '</th><th data-title="time">' + data['tache_effectue'][ i ]['duree'] + '</th></tr>';


		var block_task_date = '<h2 style="float : left" title="Date"><i>' + data[ 'tache_effectue' ][ i ][ 'com_date' ] + '</i></h2>';
		var block_task_time = '<h2  style="float : right" title="Time spend"><i>' + data[ 'tache_effectue' ][ i ][ 'duree' ] + '</i> minutes </h2>' + client_name;
		var block_task_title =  '<h1 title="Task TITLE" style="text-align : center">' + data[ 'tache_effectue' ][ i ][ 'tache_title' ] +'<br></h1><span title="Task ID"><i>( #' + data[ 'tache_effectue' ][ i ][ 'tache_id' ] + ' )</i></span>';
		var block_text_point =  '<h3 title="Point TITLE">' + data[ 'tache_effectue' ][ i ][ 'point_title' ] +'</h3><br><span title="Point ID"><i>( #' + data[ 'tache_effectue' ][ i ][ 'point_id' ] + ' )</i></span>';

		var block_text_com = '';
		var num_commentary = 0;
		for( var t = data[ 'tache_effectue' ][ i ][ 'commentary' ].length - 1; t > -1 ; t-- ){
			var num_commentary = num_commentary + 1;
			var block_text_com = block_text_com + '<div style="margin-bottom : 10px; border : 2px solid #0d262c; margin-left: 14%; width : 72%; border-radius: 5px; padding : 5px;  padding-bottom : 25px;"><h4 title="Com TITLE"><span style="font-size : 15px"><b> ' + num_commentary + '.</b></span><div style="float : right"><h2><i>' + data[ 'tache_effectue' ][ i ][ 'commentary' ][ t ][ 'com_time' ] +'</i> minutes</h2></div> <br> ' + data[ 'tache_effectue' ][ i ][ 'commentary' ][ t ][ 'com_title' ] +'</h4><span style="float : right "title="com ID"><i>( #' + data[ 'tache_effectue' ][ i ][ 'commentary' ][ t ][ 'com_id' ] + ' )</i></span></div>';
		}

		var block_text_content = '<div style="border : 2px solid #6f2e2e; margin-left : 15%; width : 70%; border-radius: 10px;"></div><br><div style="border : 2px solid #6f2e2e; border-radius: 5px; margin-bottom : 20px; padding : 8px; margin-left: 10%; width : 80%;">' + block_task_date + block_task_time + block_task_title + '</div>' + '<div style="border : 2px solid #0d262c; border-radius: 5px; margin-bottom : 20px; margin-left: 12%; width : 76%; padding : 8px">' + block_text_point + '</div>'+ block_text_com;

		var block_text = block_text + '<div id="tm_indicator_point_' + data[ 'tache_effectue' ][ i ][ 'point_id' ] + '_' + num_modal + '" style="display : none">' + block_text_content + '</div>';
	}

	var array_bot =  '</tbody></table>';
	var array_full = array_top + array_content + array_bot + block_text;
	jQuery( '#tm_indicator_modal_block' + num_modal).append( array_full );
}

/**
 * Affiche tous les points du canvas ciblé (display block le modal généré à l'avance)
 * Cette fonction est lancé lorsque l'utilisateur clic sur un canvas
 * @param  {[type]} numline   [position de l'element cliqué dans le tableau principal] // peut etre null si l'utilisateur clic dans le vide
 * @param  {[type]} divcanvas [div de la canvas]
 *
 * @since 1.9.0 - BETA
 */
window.eoxiaJS.taskManager.indicator.displayAllPoint = function( numline, divcanvas ){

	jQuery( '#display_modal' ).children().css( 'display', 'none' );
	var chart_selected = jQuery( divcanvas ).attr( "data-canvas-focus" );
	jQuery( '#displaycanvas_modal' ).css( 'display', 'block' );

	jQuery( '#tm_indicator_modal_block' + chart_selected ).css( 'display' ,'block' );

	jQuery( '#tm_indicator_modal_active_canvas' ).addClass( 'modal-active' );

	jQuery( '#tm_indicator_table_' + chart_selected + '_' ).children().css( 'backgroundColor', '' );

	var divmodal = jQuery( '#tm_indicator_modal_block' + chart_selected ).children().not('.wpeo-table');
	divmodal.css( 'display' , 'none' );

	if( numline != -1 ){

		jQuery( '#tm_indicator_task_' + chart_selected + '_' + numline ).css( 'backgroundColor', 'grey' );
		var data_attribute         = jQuery( '#tm_indicator_task_' + chart_selected + '_' + numline ).data();
		var data_attribute_pointid = data_attribute[ 'tmindicatorpointid' ];
		jQuery( '#tm_indicator_point_' + data_attribute_pointid + '_' + chart_selected ).css( 'display', 'block' );
	}
}

/**
 * Affiche la div relié au point ciblé (sur le tableau)
 *
 * @param  {[type]} event [ ]
 *
 * @since 1.9.0 - BETA
 */
window.eoxiaJS.taskManager.indicator.displayThisPoint = function( event ){

	var data_attribute = jQuery( this ).data();
	var data_attribute_pointid = data_attribute[ 'tmindicatorpointid' ];


	var divtable = jQuery( this ).parent();
	divtable.children().css( "backgroundColor", '' );
	jQuery( this ).css( 'backgroundColor', 'grey' );

	num_modal = divtable.data()[ 'chartselect' ];
	var divindicatormodal = jQuery( '#tm_indicator_point_' + data_attribute_pointid + '_' + num_modal ).parent();
	var divmodal = divindicatormodal.children().not('.wpeo-table');
	divmodal.css( 'display' , 'none' );

 	jQuery( '#tm_indicator_point_' + data_attribute_pointid + '_' + num_modal ).css( 'display', 'block' );

	}

	window.eoxiaJS.taskManager.indicator.generateSummaryCanvas = function( time_work, time_elasped, total_donut_duree, total_donut_point, total_donut_title ){

		var canvasHorizontal = document.getElementById( "canvasHorizontalBarAll" ).getContext('2d');

		var data_canvas_horizontalBar = {
			labels: [ window.indicatorString.minute ],
			datasets: [
			{
				label: window.indicatorString.time_work,//window.indicator.time_work,
				backgroundColor: "#3e95cd",
				data: [ time_work ],
				borderWidth: 1
			}, {
				label: window.indicatorString.time_day,//window.indicator.time_day,
				backgroundColor: "#8e5ea2",
				data: [ time_elasped, 0 ],
				borderWidth: 1
			}]
		};

		var option_canvas_horizontalbar = {
			plugins: {
				labels: {
					render: 'label'
				}
			},
			legend: { display: true },
			title: {
				display: true,
				text:  'RESUME HORIZONTAL'
			},
			scales: {
				yAxes: [{
					ticks: {
						beginAtZero: true
					}
				}]
			}
		};


		window.eoxiaJS.taskManager.indicator.generateCanvasDynamic( canvasHorizontal, 'horizontalBar', data_canvas_horizontalBar, option_canvas_horizontalbar ); // Génération du canvas de type horizontalBar

		// - - - - -

		var canvasDonut = document.getElementById( "canvasDoghnutChartAll" ).getContext('2d');

		if( time_work > 0 && time_elasped > 0 ){
			jQuery( 'canvasDoghnutChartAll' ).css( 'cursor', 'pointer' );
			jQuery( 'canvasDoghnutChartAll' ).addClass( 'display_all_point' );
			// jQuery( 'canvasDoghnutChartAll' ).attr( "data-canvas-focus", i );

			// window.eoxiaJS.taskManager.indicator.generateModalContent( i, data[ i ] );

			var data_canvas_doghnut = {
				labels : total_donut_point,
				datasets: [
						{
							label: window.indicatorString.planning,
							backgroundColor: ["#800000", "#9A6324","#808000","#469990","#000075", "#e6194B", "#f58231", "#ffe119", "#bfef45", "#3cb44b", "#42d4f4", "#4363d8", "#911eb4", "#f032e6", "#a9a9a9", "#fabebe", "#ffd8b1", "#fffac8", "#aaffc3", "#e6beff"],
							data: total_donut_duree,
						}
					],
				dataset : total_donut_title,
			};

			var option_canvas_doghnut =  {
				title: {
					display: true,
					text: 'RESUME DOGHNUT'
				},
				tooltips: {
					callbacks: {
						title: function( item, data_indicator ) {
							return data_indicator[ 'dataset' ][ item[ 0 ][ 'index' ] ];
						},
					}
				},
				legend: {
					// onClick: (e) => e.stopPropagation() // Block click
				}
			};

			window.eoxiaJS.taskManager.indicator.generateCanvasDynamic( canvasDonut, 'doughnut', data_canvas_doghnut, option_canvas_doghnut ); // Génération du canvas de type doghnut
		}
	}

/**
 * Initialise l'objet "point" ainsi que la méthode "navigation" obligatoire pour la bibliothèque EoxiaJS.
 *
 * @since 1.0.0
 * @version 1.6.0
 */
window.eoxiaJS.taskManager.navigation = {};

window.eoxiaJS.taskManager.navigation.init = function() {
	window.eoxiaJS.taskManager.navigation.event();
};

window.eoxiaJS.taskManager.navigation.event = function() {
	jQuery( document ).on( 'keyup', '.wpeo-header-bar input[name="term"]', window.eoxiaJS.taskManager.navigation.triggerSearch );
	// jQuery( document ).on( 'change', '.wpeo-header-bar .wpeo-autocomplete', window.eoxiaJS.taskManager.navigation.closeResults );

	jQuery( document ).on( 'click', '.wpeo-header-bar .more-search-options', window.eoxiaJS.taskManager.navigation.toggleMoreOptions );
	jQuery( document ).on( 'click', '.wpeo-tag-search', window.eoxiaJS.taskManager.navigation.selectTag );
};

window.eoxiaJS.taskManager.navigation.triggerSearch = function( event ) {
	if ( 13 === event.keyCode ) {
		jQuery( '.tm-advanced-search .action-input' ).click();
	}
};

window.eoxiaJS.taskManager.navigation.closeResults = function( event ) {
	jQuery( this ).removeClass( 'autocomplete-active' );
};

/**
 * Toggle le barre de recherche avancée.
 *
 * @return void
 *
 * @since 1.0.0
 * @version 1.4.0
 */
window.eoxiaJS.taskManager.navigation.toggleMoreOptions = function() {
	jQuery( '.wpeo-header-search' ).toggle();
};


/**
 * Toggle la classe "active" à l'élement cliqué.
 *
 * @return {void}
 *
 * @since 1.0.0
 * @version 1.3.6
 */
window.eoxiaJS.taskManager.navigation.selectTag = function() {
	jQuery( this ).toggleClass( 'active' );
};

/**
 * Vérifies les données pour la recherche avant d'exécuter la requête.
 *
 * @param  {HTMLSpanElement} triggeredElement L'élement déclenchant l'action.
 * @return {void}
 *
 * @since 1.0.0
 * @version 1.6.0
 */
window.eoxiaJS.taskManager.navigation.checkDataBeforeSearch = function( triggeredElement ) {
	var categoriesIdSelected = [];

	jQuery( '.dropdown-content .tags li.active' ).each( function( key, item ) {
		categoriesIdSelected.push( parseInt( jQuery( item ).attr( 'data-tag-id' ) ) );
	} );

	jQuery( 'input[name="categories_id"]' ).val( categoriesIdSelected.join( ',' ) );

	if ( triggeredElement && ! triggeredElement.hasClass( 'change-status' ) ) {
		// window.eoxiaJS.loader.display( jQuery( '.wpeo-general-search' ) );
	} else if ( triggeredElement && triggeredElement.hasClass( 'change-status' ) ) {
		jQuery( '.wpeo-header-bar input[name="status"]' ).val( triggeredElement.data( 'status' ) );
	}

	if ( jQuery( '.wpeo-header-bar input[name="post_parent_order"]' ).val() != 0 ) {
		jQuery( '.wpeo-header-bar input[name="post_parent"]' ).val( jQuery( '.wpeo-header-bar input[name="post_parent_order"]' ).val() );
	}

	return true;
};

/**
 * Le callback en cas de réussite à la requête Ajax "search".
 * Remplaces le contenu des tâches du dashboard et affiches la div contenant le résultat de la recherche.
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.0.0
 * @version 1.6.0
 */
window.eoxiaJS.taskManager.navigation.searchedSuccess = function( triggeredElement, response ) {
	jQuery( '.tm-wrap .load-more' ).remove();
	window.eoxiaJS.loader.remove( jQuery( '.wpeo-general-search' ) );
	jQuery( '.eo-search-value' ).val( '' );

	jQuery( '.tm-dashboard-shortcuts .active' ).removeClass( 'active' );
	jQuery( '.list-task' ).replaceWith( response.data.view.tasks );
	jQuery( '.list-task' ).colcade( {
		items: '.wpeo-project-task',
		columns: '.grid-col'
	} );
	jQuery( '.search-results' ).replaceWith( response.data.view.search_result );
	window.eoxiaJS.taskManager.task.offset = 0;
	window.eoxiaJS.taskManager.task.canLoadMore = true;

	// Changes l'onglet "active" dans la barre de navigation.
	if ( triggeredElement.hasClass( 'change-status' ) ) {
		jQuery( '.wpeo-header-bar .change-status.active' ).removeClass( 'active' );
		jQuery( triggeredElement ).addClass( 'active' );
	}

	triggeredElement.closest( '.wpeo-dropdown' ).removeClass( 'dropdown-active' );

	window.eoxiaJS.taskManager.task.initAutoComplete();
	window.eoxiaJS.taskManager.point.refresh(); 
};

window.eoxiaJS.taskManager.navigation.createdShortcutSuccess = function( triggeredElement, response ) {
	jQuery( '.tm-dashboard-shortcuts .active' ).removeClass( 'active' );
	jQuery( '.tm-dashboard-shortcuts .handle-shortcut' ).before( response.data.view_shortcut );
	triggeredElement.closest( '.wpeo-modal' ).find( '.modal-content' ).html( response.data.view_content );
	triggeredElement.closest( '.wpeo-modal' ).find( '.modal-footer' ).html( response.data.view_button );
};

window.eoxiaJS.taskManager.navigation.deletedShortcutSuccess = function( triggeredElement, response ) {
	triggeredElement.closest( 'tr' ).fadeOut();
	jQuery( '.tm-dashboard-shortcuts li[data-key="' + response.data.key + '"]' ).fadeOut();
};

/**
 * Initialise l'objet "notify" ainsi que la méthode "init" obligatoire pour la bibliothèque EoxiaJS.
 *
 * @since 1.5.0
 * @version 1.6.1
 */
window.eoxiaJS.taskManager.notify = {};

/**
 * Méthode 'init' obligatoire.
 *
 * @since 1.5.0
 * @version 1.5.0
 *
 * @return {void}
 */
window.eoxiaJS.taskManager.notify.init = function() {
	window.eoxiaJS.taskManager.notify.event();
};

/**
 * Méthode 'event'.
 *
 * @since 1.5.0
 * @version 1.5.0
 *
 * @return {void}
 */
window.eoxiaJS.taskManager.notify.event = function() {
	jQuery( document ).on( 'click', '.popup-notification ul li', window.eoxiaJS.taskManager.notify.selectUser );
};

/**
 * Méthode qui permet d'ajouter/supprimer l'utilisateur ID dans champs caché users_id.
 *
 * @since 1.5.0
 * @version 1.5.0
 *
 * @return {void}
 */
window.eoxiaJS.taskManager.notify.selectUser = function() {
	var index      = 0;
	var container  = jQuery( this ).closest( 'ul' );
	var input      = container.find( 'input' );
	var currentVal = input.val();

	if ( currentVal ) {
		currentVal = currentVal.split( ',' );
	} else {
		currentVal = [];
	}

	for ( var i = 0; i < currentVal.length; i++ ) {
		currentVal[i] = parseInt( currentVal[i] );
	}

	jQuery( this ).toggleClass( 'active' );

	if ( jQuery( this ).hasClass( 'active' ) ) {
		currentVal.push( parseInt( jQuery( this ).data( 'id' ) ) );
	} else {
		index = currentVal.indexOf( jQuery( this ).data( 'id' ) );

		if ( -1 != index ) {
			currentVal.splice( index, 1 );
		}
	}

	jQuery( this ).closest( 'div' ).find( '.selected-number' ).text( currentVal.length );

	input.val( currentVal.join( ',' ) );
};

/**
 * Le callback en cas de réussite à la requête Ajax "load_notify_popup".
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.5.0
 * @version 1.5.0
 */
window.eoxiaJS.taskManager.notify.loadedNotifyPopup = function( triggeredElement, response ) {
	jQuery( triggeredElement ).closest( '.wpeo-project-task' ).find( '.popup .content' ).html( response.data.view );
	jQuery( triggeredElement ).closest( '.wpeo-project-task' ).find( '.popup .container' ).removeClass( 'loading' );
};

/**
 * Le callback en cas de réussite à la requête Ajax "send_notification".
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.5.0
 * @version 1.6.1
 */
window.eoxiaJS.taskManager.notify.sendedNotification = function( triggeredElement, response ) {
	triggeredElement.closest( '.wpeo-modal' ).find( '.modal-close' ).click();


};

/**
 * Initialise l'objet "user" ainsi que la méthode "init" obligatoire pour la bibliothèque EoxiaJS.
 *
 * @since 1.3.6
 * @version 1.6.0
 */
window.eoxiaJS.taskManager.owner = {};

window.eoxiaJS.taskManager.owner.init = function() {
	window.eoxiaJS.taskManager.owner.event();
};

/**
 * Initialise les évènements des utilisateurs
 *
 * @since 1.3.6
 * @version 1.3.6
 *
 * @return {void}
 */
window.eoxiaJS.taskManager.owner.event = function() {};

/**
 * Callback en cas de réussite de la requête Ajax "switch_owner"
 * Remplaces le template du responsable
 *
 * @since 1.3.6
 * @version 1.6.0
 *
 * @param  {HTMLSpanElement} triggeredElement   L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}        response             Les données renvoyées par la requête Ajax.
 * @return {void}
 */
window.eoxiaJS.taskManager.owner.switchedOwnerSuccess = function( triggeredElement, response ) {
	jQuery( triggeredElement ).closest( '.wpeo-dropdown' ).replaceWith( response.data.view );
};

/**
 * Initialise l'objet "point" ainsi que la méthode "init" obligatoire pour la bibliothèque EoxiaJS.
 *
 * @since 1.0.0
 * @version 1.7.0
 */
window.eoxiaJS.taskManager.point = {};
window.eoxiaJS.taskManager.point.lastContent = '';
/**
 * La méthode obligatoire pour la biblotèque EoxiaJS.
 *
 * @return {void}
 *
 * @since 1.0.0
 * @version 1.0.0
 */
window.eoxiaJS.taskManager.point.init = function() {
	window.eoxiaJS.taskManager.point.initAutoComplete();
	window.eoxiaJS.taskManager.point.event();
	window.eoxiaJS.taskManager.point.refresh();
};

/**
 * Initialise tous les évènements liés au point de Task Manager.
 *
 * @return {void}
 *
 * @since 1.0.0
 * @version 1.0.0
 */
window.eoxiaJS.taskManager.point.event = function() {
	jQuery( document ).on( 'keyup', '.wpeo-project-task .point:not(.edit) .wpeo-point-new-contenteditable', window.eoxiaJS.taskManager.point.triggerCreate );

	jQuery( document ).on( 'click', '.wpeo-project-task .point.edit .wpeo-point-new-contenteditable', window.eoxiaJS.taskManager.point.activePoint );
	jQuery( document ).on( 'blur keyup paste keydown click', '.point .point-content .wpeo-point-new-contenteditable', window.eoxiaJS.taskManager.point.updateHiddenInput );
	jQuery( document ).on( 'blur paste', '.wpeo-project-task .point.edit .wpeo-point-new-contenteditable', window.eoxiaJS.taskManager.point.editPoint );
	jQuery( document ).on( 'click', '.wpeo-project-task .form .completed-point', window.eoxiaJS.taskManager.point.completePoint );

	jQuery( document ).on( 'click', '.point-type-display-buttons div.active', window.eoxiaJS.taskManager.point.undisplayPoint );
};

/**
 * Initialise l'autocomplete pour déplacer les points.
 *
 * @return {void}
 *
 * @since 1.4.0-ford
 * @version 1.4.0-ford
 */
window.eoxiaJS.taskManager.point.initAutoComplete = function() {
	jQuery( '.search-task' ).autocomplete( {
		'source': 'admin-ajax.php?action=search_task',
		'delay': 0,
		'select': function( event, ui ) {
			jQuery( 'input[name="to_task_id"]' ).val( ui.item.id );
			jQuery( this ).closest( '.form-fields' ).find( '.action-input' ).addClass( 'active' );
			event.stopPropagation();
		}
	} );
};

window.eoxiaJS.taskManager.point.triggerCreate = function( event ) {
	if ( event.ctrlKey && 13 === event.keyCode ) {
		jQuery( this ).closest( '.point' ).find( '.wpeo-point-new-btn' ).click();
	}
};

window.eoxiaJS.taskManager.point.activePoint = function( event ) {
	jQuery( '.point.active' ).removeClass( 'active' );

	jQuery( this ).closest( '.point' ).addClass( 'active' );
	window.eoxiaJS.taskManager.point.lastContent = jQuery( this ).closest( '.point' ).find( '.point-content input[name="content"]' ).val();
};

/**
 * Cette méthode est appelé automatiquement lors de l'appel à la méthode window.eoxiaJS.taskManager.refresh().
 *
 * @return void
 *
 * @since 1.0.0
 * @version 1.4.0
 */
window.eoxiaJS.taskManager.point.refresh = function() {
	jQuery( '.tm-wrap .points.sortable' ).sortable( {
		handle: '.wpeo-sort-point',
		items: 'div.point.edit',
		update: window.eoxiaJS.taskManager.point.editOrder
	} );

	window.eoxiaJS.taskManager.point.initAutoComplete();
};

/**
 * Met à jour le champ caché contenant le texte du point écris dans la div "contenteditable".
 *
 * @param  {MouseEvent} event L'évènement de la souris lors de l'action.
 * @return {void}
 *
 * @since 1.0.0
 * @version 1.6.0
 */
window.eoxiaJS.taskManager.point.updateHiddenInput = function( event ) {
	if ( ! jQuery( this ).closest( '.point' ).hasClass( 'edit' ) ) {
		if ( 0 < jQuery( this ).text().length ) {
			jQuery( this ).closest( '.point' ).find( '.quick-point-event' ).hide();
			jQuery( this ).closest( '.point' ).find( '.wpeo-point-new-btn' ).show();
			jQuery( this ).closest( '.point' ).find( '.wpeo-point-new-btn' ).removeClass( 'no-action' );
			jQuery( this ).closest( '.point' ).find( '.wpeo-point-new-placeholder' ).addClass( 'hidden' );
			jQuery( this ).closest( '.point' ).find( '.wpeo-point-new-btn' ).css( 'pointerEvents', 'auto' );
			window.eoxiaJS.taskManager.core.initSafeExit( true );
		} else {
			jQuery( this ).closest( '.point' ).find( '.wpeo-point-new-btn' ).hide();
			jQuery( this ).closest( '.point' ).find( '.quick-point-event' ).show();
			jQuery( this ).closest( '.point' ).find( '.wpeo-point-new-btn' ).addClass( 'no-action' );
			jQuery( this ).closest( '.point' ).find( '.wpeo-point-new-placeholder' ).removeClass( 'hidden' );
			jQuery( this ).closest( '.point' ).find( '.wpeo-point-new-btn' ).css( 'pointerEvents', 'none' );
			window.eoxiaJS.taskManager.core.initSafeExit( false );
		}
	}

	jQuery( this ).closest( '.point' ).find( '.point-content input[name="content"]' ).val( jQuery( this ).html() );

	jQuery( this ).closest( '.point' ).find( '.point-content input[name="content"]' ).trigger( 'change' );

	// window.eoxiaJS.refresh();
};

/**
 * Le callback en cas de réussite à la requête Ajax "create_point".
 * Ajoutes le point avant le formulaire pour ajouter un point dans le ul.wpeo-task-point-sortable
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.0.0
 * @version 1.7.0
 */
window.eoxiaJS.taskManager.point.addedPointSuccess = function( triggeredElement, response ) {
	var task = jQuery( "div.wpeo-project-task[data-id='" + response.data.task_id + "']" );

	task.find( '.point-uncompleted' ).text( response.data.task.data.count_uncompleted_points );
	task.find( '.point-completed' ).text( response.data.task.data.count_completed_points );

	if ( triggeredElement.closest( '.point' ).length ) {
		triggeredElement.closest( '.point' ).find( '.wpeo-point-new-contenteditable' ).text( '' );
		triggeredElement.closest( '.point' ).find( 'input[name="content"]' ).val( '' );
		triggeredElement.closest( '.point' ).find( '.quick-point-event' ).hide();
		triggeredElement.closest( '.point' ).find( '.wpeo-point-new-btn' ).hide();
		triggeredElement.closest( '.point' ).find( '.wpeo-point-new-btn' ).addClass( 'no-action' );
		triggeredElement.closest( '.point' ).find( '.wpeo-point-new-placeholder' ).removeClass( 'hidden' );
		triggeredElement.closest( '.point' ).find( '.wpeo-point-new-btn' ).css( 'pointerEvents', 'auto' )
	}

	if ( response.data.point && true != response.data.point.data.completed ) {
		task.find( '.points.sortable .point:not(.edit)' ).after( response.data.view );
	}

	window.eoxiaJS.taskManager.point.initAutoComplete();
	triggeredElement.trigger( 'addedPointSuccess' );
	window.eoxiaJS.taskManager.core.initSafeExit( false );
};

/**
 * Le callback en cas de réussite à la requête Ajax "create_point".
 * Ajoutes le point avant le formulaire pour ajouter un point dans le ul.wpeo-task-point-sortable
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.0.0
 * @version 1.6.0
 */
window.eoxiaJS.taskManager.point.editedPointSuccess = function( triggeredElement, response ) {
	window.eoxiaJS.loader.remove( triggeredElement.closest( '.form' ) );
};

/**
 * Met à jour un point en cliquant sur le bouton pour envoyer le formulaire.
 *
 * @since 1.0.0
 * @version 1.5.0
 *
 * @return void
 */
window.eoxiaJS.taskManager.point.editPoint = function() {
	if ( window.eoxiaJS.taskManager.point.lastContent !== jQuery( this ).closest( '.form' ).find( '.point-content input[name="content"]' ).val() ) {
		window.eoxiaJS.loader.display( jQuery( this ).closest( '.form' ) );
		jQuery( this ).closest( '.form' ).find( '.action-input.update' ).click();
	}
};

/**
 * Supprimes la ligne du point.
 *
 * @param  {HTMLSpanElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {object} response                   Les données renvoyées par la requête Ajax.
 * @return void
 * @since 1.0.0
 * @version 1.0.0
 */
window.eoxiaJS.taskManager.point.deletedPointSuccess = function( triggeredElement, response ) {
	var totalPoint = jQuery( triggeredElement ).closest( '.wpeo-project-task' ).find( '.total-point' ).text();
	var totalCompletedPoint = jQuery( triggeredElement ).closest( '.wpeo-project-task' ).find( '.point-completed' ).text();
	totalPoint--;
	jQuery( triggeredElement ).closest( '.wpeo-project-task' ).find( '.total-point' ).text( totalPoint );

	if ( jQuery( triggeredElement ).closest( '.point' ).find( '.completed-point' ).is( ':checked' ) ) {
		totalCompletedPoint--;
		jQuery( triggeredElement ).closest( '.wpeo-project-task' ).find( '.point-completed' ).text( totalCompletedPoint );
	}

	jQuery( triggeredElement ).closest( '.wpeo-project-task' ).find( '.wpeo-task-time-info .elapsed' ).text( response.data.time );

	jQuery( triggeredElement ).closest( '.wpeo-project-task.mask' ).removeClass( 'mask' );

	jQuery( triggeredElement ).closest( 'div.point.edit' ).fadeOut( 400, function() {
	} );
};

var longpress = 500; // Durée par défaut d'un clic => 2 sec
var start = 0; // Creer un timer au début du clic (pour calculer sa durée)

window.eoxiaJS.taskManager.point.completePointChoices = function( e ){

	if( e.type == "mousedown" ){ // L'utilisateur click sur la checkbox
		start = new Date().getTime();

	}else if( e.type == "mouseup" ){ // L'utilisateur relache le click sur la metabox
		if( ! jQuery( this ).data( 'checked' ) ){ // Avec les events mouseup, mousedown, mouseleave, l'utilisateur ne coche pas
			jQuery( this ).data( 'checked', 'true' ); // La metabox au moment du clic
			jQuery( this ).prop( "checked", true ); // Donc on le fait manuellement
		}else{
			jQuery( this ).data( 'checked', 'false' );
			jQuery( this ).prop( "checked", false );
		}

		if( new Date().getTime() >= ( start + longpress ) ){ // Si durée du clic > 2 sec => On affiche les options
			console.log( ' - LONG' );
			jQuery( this ).parent().find( '.point-list-element' ).show( '200' );


		}else{ // Sinon on coche simplement, la tache est complétée
			console.log( ' - SHORT' );

			window.eoxiaJS.taskManager.point.completePoint( this );
		}
	}else{ // L'utilisateur enleve sa souris de la metabox, on reset le chronometre qui calcul la durée du clic
		start = 0;
	}
}


/**
 * Envoie une requête pour passer le point en compléter ou décompléter.
 * Déplace le point vers la liste à puce "compléter" ou "décompléter".
 *
 * @since 1.0.0
 */
window.eoxiaJS.taskManager.point.completePoint = function() {

	var totalCompletedPoint   = jQuery( this ).closest( '.wpeo-project-task' ).find( '.point-completed' ).text();
	var totalUncompletedPoint = jQuery( this ).closest( '.wpeo-project-task' ).find( '.point-uncompleted' ).text();
	var completedButton       = jQuery( '.point-type-display-buttons button[data-point-state="completed"]' );
	var uncompletedButton     = jQuery( '.point-type-display-buttons button[data-point-state="uncompleted"]' );

	var data = {
		action: 'complete_point',
		_wpnonce: jQuery( this ).data( 'nonce' ),
		point_id: jQuery( this ).closest( '.form' ).find( 'input[name="id"]' ).val(),
		complete: jQuery( this ).is( ':checked' )
	};

	if ( jQuery( this ).is( ':checked' ) ) {
		totalCompletedPoint ++;
		totalUncompletedPoint --;
		jQuery( this ).closest( '.wpeo-project-task' ).find( '.point-completed' ).text( totalCompletedPoint );
		jQuery( this ).closest( '.wpeo-project-task' ).find( '.point-uncompleted' ).text( totalUncompletedPoint );

		if ( completedButton.hasClass( 'active' ) ) {
			jQuery( this ).closest( '.point' ).attr( 'data-point-state', 'completed' );
		} else {
			jQuery( this ).closest( '.point' ).remove();
		}

	} else {
		totalCompletedPoint --;
		totalUncompletedPoint ++;
		jQuery( this ).closest( '.wpeo-project-task' ).find( '.point-completed' ).text( totalCompletedPoint );
		jQuery( this ).closest( '.wpeo-project-task' ).find( '.point-uncompleted' ).text( totalUncompletedPoint );

		if ( uncompletedButton.hasClass( 'active' ) ) {
			jQuery( this ).closest( '.point' ).attr( 'data-point-state', 'uncompleted' );
		} else {
			jQuery( this ).closest( '.point' ).remove();
		}
	}

	window.eoxiaJS.request.send( jQuery( this ), data );
};

/**
 * Récupères les ID des points dans l'ordre de l'affichage et les envoies à l'action "edit_order_point".
 *
 * @return void
 *
 * @since 1.0.0
 * @version 1.6.0
 */
window.eoxiaJS.taskManager.point.editOrder = function() {
	var orderPointId = [];
	var objectId     = jQuery( this ).closest( '.wpeo-project-task' ).data( 'id' );
	var data         = {};

	jQuery( this ).find( '.point.edit' ).each( function() {
		orderPointId.push( jQuery( this ).data( 'id' ) );
	} );

	data.action         = 'edit_order_point';
	data.task_id        = objectId;
	data.order_point_id = orderPointId;

	window.eoxiaJS.request.send( jQuery( this ), data );
};

/**
 * Le callback en cas de réussite à la requête Ajax "load_point_properties".
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.0.0
 * @version 1.3.6.0
 */
window.eoxiaJS.taskManager.point.loadedPointProperties = function( triggeredElement, response ) {
	jQuery( triggeredElement ).closest( '.wpeo-project-task' ).find( '.popup .content' ).html( response.data.view );
	jQuery( triggeredElement ).closest( '.wpeo-project-task' ).find( '.popup .container' ).removeClass( 'loading' );
};

/**
 * Le callback en cas de réussite à la requête Ajax "move_point_to".
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.0.0
 * @version 1.5.0
 */
window.eoxiaJS.taskManager.point.movedPointTo = function( triggeredElement, response ) {
	var currentTask = jQuery( '.wpeo-project-task[data-id=' + response.data.current_task.data.id + ']' );
	var toTask      = jQuery( '.wpeo-project-task[data-id=' + response.data.to_task.data.id + ']' );

	jQuery( '.wpeo-project-task.mask' ).removeClass( 'mask' );

	// Met à jour le temps et le nombre de point sur la tâche.
	if ( currentTask.length ) {
		currentTask.find( '.wpeo-task-time-info' ).find( '.elapsed' ).html( response.data.current_task_elapsed_time );
		//currentTask.find( '.wpeo-point-toggle-a' ).find( '.total-point' ).html( response.data.current_task.data.count_completed_points + response.data.current_task.data.count_uncompleted_points );

		if ( response.data.point.data.completed ) {
			currentTask.find( '.wpeo-task-filter .point-completed' ).html( response.data.current_task.data.count_completed_points );
		}else{
			currentTask.find( '.wpeo-task-filter .point-uncompleted' ).html( response.data.current_task.data.count_uncompleted_points );
		}

		if ( toTask.length ) {
			if ( response.data.point.data.completed && toTask.find( '.points.completed:not(.hidden)' ).length ) {
				toTask.find( '.points.completed div.point:last' ).before( jQuery( '.point.edit[data-id=' + response.data.point.data.id + ']' ) );
			} else if ( response.data.point.data.completed && ! toTask.find( '.points.completed:not(.hidden)' ).length ) {
				jQuery( '.point.edit[data-id=' + response.data.point.data.id + ']' ).fadeOut( 400, function() {
					jQuery( this ).remove();
				} );
			} else {
				toTask.find( '.points.sortable div.point:last' ).before( jQuery( '.point.edit[data-id=' + response.data.point.data.id + ']' ) );
			}
		} else {
			jQuery( '.point.edit[data-id=' + response.data.point.data.id + ']' ).fadeOut( 400, function() {
				jQuery( this ).remove();
			} );
		}
	}

	triggeredElement.closest( '.wpeo-dropdown' ).removeClass( 'dropdown-active' );

	if ( toTask.length ) {
		toTask.find( '.wpeo-task-time-info .elapsed' ).text( response.data.to_task_elapsed_time );

		toTask.find( '.point.edit[data-id=' + response.data.point.data.id + '] .wpeo-point-summary .action-attribute' ).attr( 'data-task-id', response.data.to_task.data.id );
		toTask.find( '.point.edit[data-id=' + response.data.point.data.id + '] .point-header-action .form-fields .action-input' ).removeClass( 'active' );
		toTask.find( '.point.edit[data-id=' + response.data.point.data.id + '] .point-header-action .form-fields .search-task' ).val( '' );
		toTask.find( '.point.edit[data-id=' + response.data.point.data.id + '] .point-header-action .move-to input[name="task_id"]' ).val( response.data.to_task.data.id );
		toTask.find( '.point.edit[data-id=' + response.data.point.data.id + '] .point-header-action .move-to input[name="to_task_id"]' ).val( '' );
		toTask.find( '.point.edit[data-id=' + response.data.point.data.id + '] .point-header-action.active' ).removeClass( 'active' );

		if ( response.data.point.data.point_info.completed ) {
			toTask.find( '.wpeo-task-filter .point-completed' ).html( response.data.to_task.data.count_completed_points );
		}else{
			toTask.find( '.wpeo-task-filter .point-uncompleted' ).html( response.data.to_task.data.count_uncompleted_points );
		}

		// Met à jour le nombre de point sur la tâche reçevant le point.
		//toTask.find( '.wpeo-point-toggle-a' ).find( '.total-point' ).html( response.data.to_task.data.count_completed_points + response.data.to_task.data.count_uncompleted_points );
	}
};

/**
 * Méthode appelé lors de la modification de la date du point.
 * Envoie une requête AJAX pour effectuer la mise à jour en base de donnée.
 *
 * @since 1.5.0
 * @version 1.5.0
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 *
 * @return {void}
 */
window.eoxiaJS.taskManager.point.afterTriggerChangeDate = function( triggeredElement ) {
	var data = {
		action: 'change_date_point',
		id: triggeredElement.closest( '.point' ).attr( 'data-id' ),
		date: triggeredElement.val()
	};

	window.eoxiaJS.request.send( triggeredElement, data );
};


/**
 * Le callback en cas de réussite à la requête Ajax "load_completed_point".
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.0.0
 * @version 1.6.0
 */
window.eoxiaJS.taskManager.point.loadedPoint = function( triggeredElement, response ) {
	jQuery( triggeredElement ).addClass( 'active' ).removeClass( 'action-input' );
	jQuery( triggeredElement ).closest( '.wpeo-project-task' ).find( '.points .point:not(.edit)' ).after( response.data.view );
};

/**
 * Méthode appelée lors du clic sur les boutons de hoix du type de points affichés dans une tâche.
 *
 * @since 1.8.0
 *
 * @param  {type} event  L'événement lancé lors de l'action.
 */
window.eoxiaJS.taskManager.point.undisplayPoint = function( event ) {
	var pointState = jQuery( this ).attr( 'data-point-state' );
	// event.preventDefault();

	jQuery( this ).removeClass( 'active' ).addClass( 'action-input' );

	var points = this.closest( '.wpeo-project-task-container' ).querySelectorAll( '.points .point.edit[data-point-state="' + pointState + '"]' );
	for( var i = 0; i < points.length; i ++ ){
		points[i].remove();
	}
	// jQuery( this ).closest( '.wpeo-project-task-container' ).find( '.points .point.edit[data-point-state="' + pointState + '"]' ).remove();
};

/**
 * Initialise l'objet "quickPoint" (point rapide) ainsi que la méthode "init" obligatoire pour la bibliothèque EoxiaJS.
 *
 * @since 1.7.0
 * @version 1.7.0
 */
window.eoxiaJS.taskManager.quickPoint = {};

/**
 * La méthode obligatoire pour la biblotèque EoxiaJS.
 *
 * @return {void}
 *
 * @since 1.7.0
 * @version 1.7.0
 */
window.eoxiaJS.taskManager.quickPoint.init = function() {
	window.eoxiaJS.taskManager.quickPoint.event();
};

/**
 * Initialise tous les évènements liés aux points rapide de Task Manager.
 *
 * @return {void}
 *
 * @since 1.7.0
 * @version 1.7.0
 */
window.eoxiaJS.taskManager.quickPoint.event = function() {
	jQuery( document ).on( 'keyup', '.wpeo-modal.quick-point .point:not(.edit) .wpeo-point-new-contenteditable', window.eoxiaJS.taskManager.quickPoint.triggerCreate );

	jQuery( document ).on( 'change', '.point-content input[name="content"]', window.eoxiaJS.taskManager.quickPoint.onChange );
};

/**
 * Passes le contenu de la modal en "success".
 *
 * @since 1.7.0
 * @version 1.7.0
 *
 * @param  {CustomEvent} event Envoyé par Task Manager/Point.
 *
 * @return {void}
 */
window.eoxiaJS.taskManager.quickPoint.addedPointSuccess = function( triggeredElement, response ) {
	window.eoxiaJS.taskManager.point.addedPointSuccess( triggeredElement, response );

	jQuery( '.wpeo-modal.quick-point .modal-content' ).html( response.data.modal_view );
	jQuery( '.wpeo-modal.quick-point .modal-footer' ).html( response.data.modal_buttons_view );
};

/**
 * Reload la modal.
 *
 * @since 1.7.0
 * @version 1.7.0
 *
 * @param  {CustomEvent} event Envoyé par Task Manager/Point.
 *
 * @return {void}
 */
window.eoxiaJS.taskManager.quickPoint.reloadModal = function( triggeredElement, response ) {
	jQuery( '.wpeo-modal.quick-point .modal-content' ).html( response.data.view );
	jQuery( '.wpeo-modal.quick-point .modal-footer' ).html( response.data.buttons_view );
};

/**
 * Clic sur le bouton "Add" de la modal.
 *
 * @since 1.7.0
 * @version 1.7.0
 *
 * @param  {KeyboardEvent} event L'état du clavier à l'instant du keyUp.
 * @return {void}
 */
window.eoxiaJS.taskManager.quickPoint.triggerCreate = function( event ) {
	if ( event.ctrlKey && 13 === event.keyCode ) {
		jQuery( '.wpeo-modal.quick-point .action-input.button-main:not(.button-disable)' ).click();
	}
};

/**
 * Enlève la classe button-disable si le contenu du bouton n'est pas vide.
 *
 * @since 1.7.0
 * @version 1.7.0
 *
 * @return {void}
 */
window.eoxiaJS.taskManager.quickPoint.onChange = function() {
	if ( 0 < jQuery( this ).val().length ) {
		jQuery( '.wpeo-modal.quick-point .modal-footer .button-main.button-disable' ).removeClass( 'button-disable' );
	} else {
		jQuery( '.wpeo-modal.quick-point .modal-footer .button-main' ).addClass( 'button-disable' );
	}
};

/**
 * Initialise l'objet "setting" ainsi que la méthode "init" obligatoire pour la bibliothèque EoxiaJS.
 *
 * @since 1.5.0
 * @version 1.5.0
 */
window.eoxiaJS.taskManager.setting = {};

window.eoxiaJS.taskManager.setting.init = function() {
	window.eoxiaJS.taskManager.setting.event();
};

window.eoxiaJS.taskManager.setting.event = function() {
	jQuery( document ).on( 'click', '.settings_page_task-manager-setting .list-users .wp-digi-pagination a', window.eoxiaJS.taskManager.setting.pagination );
	jQuery( document ).on( 'change', '#setting-indicator-client-update-color', window.eoxiaJS.taskManager.setting.update_color_indicator_client );
	jQuery( document ).on( 'click', '#setting-indicator-client-input', window.eoxiaJS.taskManager.setting.update_form_indicator_client );
	jQuery( document ).on( 'keyup', '#setting-indicator-client-input', window.eoxiaJS.taskManager.setting.update_form_indicator_client );
};

/**
 * Gestion de la pagination des utilisateurs.
 *
 * @param  {ClickEvent} event [description]
 * @return {void}
 *
 * @since 1.5.0
 * @version 1.5.0
 */
window.eoxiaJS.taskManager.setting.pagination = function( event ) {
	var href = jQuery( this ).attr( 'href' ).split( '&' );
	var nextPage = href[1].replace( 'current_page=', '' );

	jQuery( '.list-users' ).addClass( 'loading' );

	var data = {
		action: 'paginate_setting_epi_page_user',
		next_page: nextPage
	};

	event.preventDefault();

	jQuery.post( window.ajaxurl, data, function( view ) {
		jQuery( '.list-users' ).replaceWith( view );
	} );
};

/**
 * Le callback en cas de réussite à la requête Ajax "save_capacity".
 * Affiches le message de "success".
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.5.0
 * @version 1.5.0
 */
window.eoxiaJS.taskManager.setting.savedCapability = function( triggeredElement, response ) {
	triggeredElement.addClass( 'button-success' );

	setTimeout( function() {
		triggeredElement.removeClass( 'button-success' );
	}, 1500 );
};

window.eoxiaJS.taskManager.setting.update_color_indicator_client = function( triggeredElement, response ) {
	jQuery( '#setting-indicator-client-update-hidden' ).val( jQuery( this ).val() );
	jQuery( '#div_setting_indicator_client_color' ).css( "background-color", jQuery( this ).val() );

};


window.eoxiaJS.taskManager.setting.display_view_settings_indicator_client = function( triggeredElement, response ) {
	jQuery( ".body-indicator-client-settings" ).html( response.data.view );
};

window.eoxiaJS.taskManager.setting.update_form_indicator_client = function( triggeredElement, response ){
	if( jQuery( "#setting-indicator-client-input" ).val() == '' ){
		jQuery( "#setting-indicator-client-button" ).addClass( 'button-disable' );

	}else if( jQuery( "#setting-indicator-client-input" ).val() > 250 ){
		jQuery( "#setting-indicator-client-input" ).val( 250 );
	}else if( jQuery( "#setting-indicator-client-input" ).val() < -100 ){
		jQuery( "#setting-indicator-client-input" ).val( -100 );
	}
	else{

		jQuery( "#setting-indicator-client-button" ).removeClass( 'button-disable' );

	}
}

/**
 * Initialise l'objet "setting" ainsi que la méthode "init" obligatoire pour la bibliothèque EoxiaJS.
 *
 * @since 1.5.0
 * @version 1.5.0
 */
window.eoxiaJS.taskManager.stickyNote = {};

window.eoxiaJS.taskManager.stickyNote.init = function() {
	window.eoxiaJS.taskManager.stickyNote.event();
};

window.eoxiaJS.taskManager.stickyNote.event = function() {
	jQuery( document ).on( 'blur', '.toplevel_page_wpeomtm-dashboard .postbox div[contenteditable="true"]', window.eoxiaJS.taskManager.stickyNote.editContent );
	jQuery( document ).on( 'blur keyup paste keydown click', '.toplevel_page_wpeomtm-dashboard .postbox div[contenteditable="true"]', window.eoxiaJS.taskManager.stickyNote.updatePlaceholder );
};

window.eoxiaJS.taskManager.stickyNote.editContent = function() {
	var data = {};
	var element = jQuery( this );

	data.action  = 'edit_note';
	data.note_id = element.closest( '.postbox' ).find( 'input[type="hidden"]' ).val();
	data.content = element.html();

	window.eoxiaJS.loader.display( element.closest( '.postbox' ) );
	window.eoxiaJS.request.send( element, data );
}

window.eoxiaJS.taskManager.stickyNote.updatePlaceholder = function( event ) {
	if ( 0 < jQuery( this ).text().length ) {
		jQuery( this ).closest( '.postbox' ).find( '.placeholder' ).addClass( 'hidden' );
		window.eoxiaJS.taskManager.core.initSafeExit( true );
	} else {
		jQuery( this ).closest( '.postbox' ).find( '.placeholder' ).removeClass( 'hidden' );
		window.eoxiaJS.taskManager.core.initSafeExit( false );
	}
}

/**
 * Le callback en cas de réussite à la requête Ajax "delete_note".
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.8.0
 */
window.eoxiaJS.taskManager.stickyNote.deletedNoteSuccess = function( element, response ) {
	element.closest( '.postbox' ).fadeOut();
};
/**
 * Le callback en cas de réussite à la requête Ajax "add_note".
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.8.0
 */
window.eoxiaJS.taskManager.stickyNote.addedNote = function( element, response ) {
	jQuery( '#tm-indicator-note-add' ).before( response.data.view );
	window.eoxiaJS.taskManager.core.initSafeExit( false );
};
/**
 * Initialise l'objet "tag" ainsi que la méthode "init" obligatoire pour la bibliothèque EoxiaJS.
 *
 * @since 1.0.0
 * @version 1.6.0
 */
window.eoxiaJS.taskManager.tag = {};

window.eoxiaJS.taskManager.tag.init = function() {
	window.eoxiaJS.taskManager.tag.event();
};

window.eoxiaJS.taskManager.tag.event = function() { };

/**
 * Lorsqu'on clique sur la barre des tags, avant de lancer l'action on ajoute une classe permettant de bloquer les actions futures tant que cette action n'est pas terminée
 *
 * @param  {HTMLUListElement} element  The element clicked where to display tags.
 */
window.eoxiaJS.taskManager.tag.before_load_tags = function( element ) {
	element.addClass( 'no-action' );

	return true;
};

/**
 * Le callback en cas de réussite à la requête Ajax "archive_task".
 * Remplaces le contenu de list-task.
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.0.0
 * @version 1.0.0
 */
window.eoxiaJS.taskManager.tag.archivedTaskSuccess = function( triggeredElement, response ) {
	jQuery( triggeredElement ).closest( '.wpeo-project-task' ).remove();

	window.eoxiaJS.refresh();
};

/**
 * Le callback en cas de réussite à la requête Ajax "unarchive_task".
 * Remplaces le contenu de list-task.
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.0.0
 * @version 1.0.0
 */
window.eoxiaJS.taskManager.tag.unarchivedTaskSuccess = function( triggeredElement, response ) {
	jQuery( triggeredElement ).closest( '.wpeo-project-task' ).remove();

	window.eoxiaJS.refresh();
};

/**
 * Le callback en cas de réussite à la requête Ajax "load_tags".
 * Remplaces le contenu de ".wpeo-tag-wrap" par la vue reçu dans la réponse AJAX.
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.0.0
 * @version 1.0.0
 */
window.eoxiaJS.taskManager.tag.loadedTagSuccess = function( element, response ) {
	element.closest( '.wpeo-tag-wrap' ).replaceWith( response.data.view );
	window.eoxiaJS.refresh();
};

/**
 * Le callback en cas de réussite à la requête Ajax "close_tag_edit_mode".
 * Remplaces le contenu de ".wpeo-tag-wrap" par la vue reçu dans la réponse AJAX.
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.0.0
 * @version 1.0.0
 */
window.eoxiaJS.taskManager.tag.closedTagEditMode = function( element, response ) {
	element.closest( '.wpeo-tag-wrap' ).replaceWith( response.data.view );
	window.eoxiaJS.refresh();
};

/**
 * Cette méthode est appelé automatiquement lors du clique sur une catégorie a affecter.
 *
 * @param  {HTMLUListElement} element L'élément déclenchant la méthode au clique.
 * @return {void}
 *
 * @since 1.0.0
 * @version 1.3.6.0
 */
window.eoxiaJS.taskManager.tag.beforeAffectTag = function( element ) {
	element.addClass( 'active' );

	return true;
};

/**
 * Cette méthode est appelé automatiquement lors du clique sur une catégorie a désaffecter.
 *
 * @param  {HTMLUListElement} element L'élément déclenchant la méthode au clique.
 * @return {void}
 *
 * @since 1.0.0
 * @version 1.3.6.0
 */
window.eoxiaJS.taskManager.tag.beforeUnaffectTag = function( element ) {
	element.removeClass( 'active' );

	return true;
};

/**
 * Le callback en cas de réussite à la requête Ajax "create_tag".
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.0.0
 * @version 1.3.6.0
 */
window.eoxiaJS.taskManager.tag.createdTagSuccess = function( triggeredElement, response ) {
	jQuery( '.wpeo-tag-title' ).after( response.data.view );
	jQuery( 'input[name="tag_name"]' ).val( '' );
};

/**
 * Le callback en cas de réussite à la requête Ajax "tag_affectation".
 *
 * @param  {HTMLDivElement} element  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.0.0
 * @version 1.6.0
 */
window.eoxiaJS.taskManager.tag.affectedTagSuccess = function( element, response ) {
	element.attr( 'data-action', 'tag_unaffectation' );
	element.attr( 'data-before-method', 'beforeUnaffectTag' );
	element.attr( 'data-nonce', response.data.nonce );

	if ( response.data.go_to_archive ) {
		element.closest( '.wpeo-project-task' ).hide();

		window.eoxiaJS.refresh();
	}
};

/**
 * Le callback en cas de réussite à la requête Ajax "tag_unaffectation".
 *
 * @param  {HTMLDivElement} element  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.0.0
 * @version 1.6.0
 */
window.eoxiaJS.taskManager.tag.unaffectedTagSuccess = function( element, response ) {
	element.attr( 'data-action', 'tag_affectation' );
	element.attr( 'data-before-method', 'beforeAffectTag' );
	element.attr( 'data-nonce', response.data.nonce );

	if ( response.data.go_to_all_task ) {
		element.closest( '.wpeo-project-task' ).remove();

		window.eoxiaJS.refresh();
	}
};

/**
 * Initialise l'objet "task" ainsi que la méthode "init" obligatoire pour la bibliothèque EoxiaJS.
 *
 * @since 1.0.0
 * @version 1.5.0
 */
window.eoxiaJS.taskManager.task = {};
window.eoxiaJS.taskManager.task.offset = 0;
window.eoxiaJS.taskManager.task.canLoadMore = true;

window.eoxiaJS.taskManager.task.init = function() {
	window.eoxiaJS.taskManager.task.event();
	jQuery( '.list-task' ).colcade( {
		items: '.wpeo-project-task',
		columns: '.grid-col'
	} );

	window.eoxiaJS.taskManager.task.initAutoComplete();
};

window.eoxiaJS.taskManager.task.refresh = function() {
	window.eoxiaJS.taskManager.task.initAutoComplete();
};

window.eoxiaJS.taskManager.task.event = function() {
	// jQuery( '.tm-wrap' ).on( 'keypress', '.wpeo-project-task-title', window.eoxiaJS.taskManager.task.keyEnterEditTitle );
	jQuery( '.tm-wrap' ).on( 'blur', '.wpeo-project-task-title', window.eoxiaJS.taskManager.task.editTitle );
	jQuery( window ).scroll( '.wpeo-wrap .tm-wrap #poststuff', window.eoxiaJS.taskManager.task.onScrollLoadMore );
	jQuery( '.tm-wrap' ).on( 'click', '.task-header-action .success span', window.eoxiaJS.taskManager.task.closeSuccess );
	jQuery( '#poststuff' ).on( 'click', '#wpeo-task-metabox', window.eoxiaJS.taskManager.task.refresh );
	jQuery( document ).on( 'click', '#tm_include_archive_client', window.eoxiaJS.taskManager.task.showArchiveClient );

	jQuery( document ).on( 'click', '.tm_client_indicator_update', window.eoxiaJS.taskManager.audit.preventDefaultHeader );
	jQuery( document ).on( 'click', '.tm_client_indicator_update_body table tbody .tm_client_indicator', window.eoxiaJS.taskManager.audit.openTaskRow );
};

/**
 * Initialise l'autocomplete pour déplacer la tâche.
 *
 * @return {void}
 *
 * @since 1.4.0-ford
 * @version 1.4.0-ford
 */
window.eoxiaJS.taskManager.task.initAutoComplete = function() {
	jQuery( '.search-parent' ).autocomplete( {
		'source': 'admin-ajax.php?action=search_parent',
		'delay': 0,
		'select': function( event, ui ) {
			jQuery( 'input[name="to_element_id"]' ).val( ui.item.id );
			jQuery( this ).closest( '.form-fields' ).find( '.action-input' ).addClass( 'active' );
			event.stopPropagation();
		}
	} );
};

window.eoxiaJS.taskManager.task.onScrollLoadMore = function() {
	var data = {};

	if ( 1 !== jQuery( '#poststuff' ).length ) {
		if ( ( jQuery( window ).scrollTop() == jQuery( document ).height() - jQuery( window ).height() ) && window.eoxiaJS.taskManager.task.canLoadMore ) {

			window.eoxiaJS.taskManager.task.offset += parseInt( window.task_manager_posts_per_page );
			window.eoxiaJS.taskManager.task.canLoadMore = false;

			data.action = 'load_more_task';
			data.offset = window.eoxiaJS.taskManager.task.offset;
			data.posts_per_page = window.task_manager_posts_per_page;
			data.term = jQuery( '.wpeo-header-bar input[name="term"]' ).val();
			data.users_id = jQuery( '.wpeo-header-search select[name="follower_id_selected"]' ).val();
			data.status = jQuery( '.wpeo-header-bar input[name="status"]' ).val();

			window.eoxiaJS.taskManager.navigation.checkDataBeforeSearch( undefined );

			data.categories_id = jQuery( '.wpeo-header-search input[name="categories_id_selected"]' ).val();

			window.eoxiaJS.loader.display( jQuery( '.load-more' ) );
			jQuery( '.load-more' ).show();
			window.eoxiaJS.request.send( jQuery( '.load-more' ), data );
		}
	}
};

window.eoxiaJS.taskManager.task.loadedMoreTask = function( element, response ){

	window.eoxiaJS.taskManager.task.canLoadMore = response.data.can_load_more;

	var elements = jQuery( response.data.view );
	jQuery( '.list-task' ).colcade( 'append', elements );

	jQuery( '.load-more' ).hide();
}
/**
 * Envoie une requête pour enregsitrer le nouveau titre de la tâche.
 *
 * @since 1.0.0
 * @version 1.4.0
 *
 * @param  {FocusEvent} event         L'état de l'évènement lors du 'blur'.
 * @param  {HTMLInputElement} element Le champ de texte contenant le titre.
 * @return {void}
 */
window.eoxiaJS.taskManager.task.editTitle = function( event, element ) {
	var data = {};

	if ( ! element ) {
		element = jQuery( this );
	}

	data.action = 'edit_title';
	data._wpnonce = element.data( 'nonce' );
	data.task_id = element.closest( '.wpeo-project-task' ).data( 'id' );
	data.title = element.text();

	window.eoxiaJS.loader.display( element.closest( '.wpeo-task-header' ) );
	window.eoxiaJS.request.send( element, data );
};

/**
 * Appel la méthode 'editTitle' pour modifier le titre lors de l'appuie de la touche entré.
 *
 * @since 1.0.0
 * @version 1.4.0
 *
 * @param  {KeyboardEvent} event L'état du clavier.
 * @return {void}
 */
window.eoxiaJS.taskManager.task.keyEnterEditTitle = function( event ) {
	if ( 13 === event.which || 13 === event.keyCode ) {
		window.eoxiaJS.taskManager.task.editTitle( event, jQuery( this ) );
	}
};

/**
 * Le callback en cas de réussite à la requête Ajax "create_task".
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.0.0.0
 * @version 1.3.6.0
 */
window.eoxiaJS.taskManager.task.createdTaskSuccess = function( element, response ) {
	var element = jQuery( response.data.view );
	window.eoxiaJS.taskManager.task.offset++;
	jQuery( '.list-task' ).colcade( 'prepend', element );
	//jQuery( '.tm-dashboard-primary .list-task .grid-col--1').prepend( element );
	window.eoxiaJS.taskManager.task.initAutoComplete();
};

/**
 * Le callback en cas de réussite à la requête Ajax "delete_task".
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.0.0.0
 * @version 1.3.6.0
 */
window.eoxiaJS.taskManager.task.deletedTaskSuccess = function( element, response ) {
	element.closest( '.wpeo-project-task' ).hide();
};

/**
 * Avant d'envoyer la requête pour changer la tâche de couleur.
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant l'action.
 * @param  {Object}         data          		Les données du l'action.
 * @return {void}
 *
 * @since 1.0.0.0
 * @version 1.3.6.0
 */
window.eoxiaJS.taskManager.task.beforeChangeColor = function( triggeredElement, data ) {
	jQuery( triggeredElement ).closest( '.wpeo-project-task' ).removeClass( 'red yellow purple white blue green' );
	jQuery( triggeredElement ).closest( '.wpeo-project-task' ).addClass( jQuery( triggeredElement ).data( 'color' ) );

	return true;
};

/**
 * Le callback en cas de réussite à la requête Ajax "move_task_to".
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.0.0.0
 * @version 1.3.6.0
 */
window.eoxiaJS.taskManager.task.movedTaskTo = function( triggeredElement, response ) {
	jQuery( triggeredElement ).closest( '.wpeo-project-task' ).hide();
};

/**
 * Le callback en cas de réussite à la requête Ajax "notify_by_mail".
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.5.0
 * @version 1.5.0
 */
window.eoxiaJS.taskManager.task.notifiedByMail = function( triggeredElement, response ) {

};
/**
 * Le callback en cas de réussite à la requête Ajax "recompile_task".
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.6.0
 * @version 1.6.0
 */
window.eoxiaJS.taskManager.task.recompiledTask = function( triggeredElement, response ) {
	triggeredElement.closest( '.wpeo-project-task' ).html( response.data.view );
};


/**
 * Enlève la classe 'active' de l'élement 'success'.
 *
 * @since 1.5.0
 * @version 1.5.0
 *
 * @param  {MouseEvent} event L'état de la souri.
 *
 * @return {void}
 */
window.eoxiaJS.taskManager.task.closeSuccess = function( event ) {
	jQuery( this ).closest( '.success.active' ).removeClass( 'active' );
};

window.eoxiaJS.taskManager.task.updateIndicatorClientSuccess = function( element, response ) {
	jQuery( '.tm_client_indicator_update_body' ).replaceWith( response.data.view );
	jQuery( '.tm_client_indicator_update #tm_client_indicator_header_minus' ).attr( 'data-year', response.data.year - 1 );
	jQuery( '.tm_client_indicator_update #tm_client_indicator_header_actual' ).attr( 'data-year', response.data.year );
	jQuery( '.tm_client_indicator_update #tm_client_indicator_header_display' ).html( response.data.year );
	jQuery( '.tm_client_indicator_update #tm_client_indicator_header_plus' ).attr( 'data-year', response.data.year + 1 );
};

window.eoxiaJS.taskManager.task.showArchiveClient = function( triggeredElement, response ){
	if( jQuery( this ).data( 'showarchive' ) ){
		console.log( '1' );
		jQuery( this ).data( 'showarchive', false );
		jQuery( this ).css( 'background' , 'rgba(0,0,0,0.1)' );
		jQuery( this ).css( 'color' , 'rgba(0,0,0,0.6)' );

		jQuery( this ).find( '.button-icon' ).removeClass( 'fa-check-square' ).addClass( 'fa-square' );

		jQuery( '.wpeo-project-wrap .list-task .wpeo-project-task' ).each(function(){
			if( jQuery( this ).data( 'status' ) == 'archive' ){
				jQuery( this ).css( 'display', 'none' );
			}
		});
	}else{
		console.log( '2' );

		jQuery( this ).data('showarchive', true );

		jQuery( this ).css( 'background' , '#0084ff' );
		jQuery( this ).css( 'color' , '#fff' );

		jQuery( this ).find( '.button-icon' ).removeClass( 'fa-square' ).addClass( 'fa-check-square' );

		jQuery( '.wpeo-project-wrap .list-task .wpeo-project-task' ).each(function(){
			if( jQuery( this ).data( 'status' ) == 'archive' ){
				jQuery( this ).css( 'display', 'block' );
			}
		});

	}
}

window.eoxiaJS.taskManager.audit.openTaskRow = function( event ){
	var select = jQuery( this );

	if( select.attr( 'data-show' ) == 'true' ){
		select.attr( 'data-show', 'false' );
		jQuery( '.tm_client_indicator_' + select.attr( 'data-id' ) + '_' + select.attr( 'data-type' ) ).hide( '200' );
	}else{
		select.attr( 'data-show', 'true' );
		jQuery( '.tm_client_indicator_' + select.attr( 'data-id' ) + '_' + select.attr( 'data-type' ) ).show( '500' );
	}
}

/**
 * Initialise l'objet "timeExceeded" ainsi que la méthode "init" obligatoire pour la bibliothèque EoxiaJS.
 *
 * @since 1.5.0
 * @version 1.6.1
 */
window.eoxiaJS.taskManager.timeExceeded = {};

window.eoxiaJS.taskManager.timeExceeded.init = function() {
	window.eoxiaJS.taskManager.timeExceeded.event();
};

window.eoxiaJS.taskManager.timeExceeded.event = function() {
};

/**
 * Le callback en cas de réussite à la requête Ajax "load_time_exceeded".
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.5.0
 * @version 1.6.1
 */
window.eoxiaJS.taskManager.timeExceeded.loadedTimeExceeded = function( triggeredElement, response ) {
	jQuery( '#tm-indicator-time-exceeded .inside table' ).replaceWith( response.data.view );
};

/**
 * Initialise l'objet "tools" ainsi que la méthode "init" obligatoire pour la bibliothèque EoxiaJS.
 *
 * @since 1.5.0
 * @version 1.5.0
 */
window.eoxiaJS.taskManager.tools = {};

/**
 * Méthode 'init' obligatoire.
 *
 * @since 1.5.0
 * @version 1.5.0
 *
 * @return {void}
 */
window.eoxiaJS.taskManager.tools.init = function() {
	window.eoxiaJS.taskManager.tools.event();
};

/**
 * Méthode 'event'.
 *
 * @since 1.5.0
 * @version 1.5.0
 *
 * @return {void}
 */
window.eoxiaJS.taskManager.tools.event = function() {
};
